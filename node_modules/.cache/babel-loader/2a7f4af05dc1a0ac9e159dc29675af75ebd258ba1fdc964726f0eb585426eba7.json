{"ast":null,"code":"// API Client for Backend Integration\nclass ApiClient {\n  constructor() {\n    // For localhost development, match the frontend protocol\n    // This ensures HTTPS frontend talks to HTTPS backend\n    const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    let defaultURL;\n    if (isLocalhost) {\n      // Match the frontend protocol for localhost development\n      const protocol = window.location.protocol;\n      defaultURL = `${protocol}//localhost:8000/api`;\n    } else {\n      // For production, match the current protocol\n      const isHttps = window.location.protocol === 'https:';\n      const protocol = isHttps ? 'https:' : 'http:';\n      defaultURL = `${protocol}//localhost:8000/api`;\n    }\n    this.baseURL = process.env.REACT_APP_API_URL || defaultURL;\n\n    // Always get fresh token from localStorage\n    this.refreshToken();\n\n    // Request queue to prevent overwhelming the server\n    this.requestQueue = [];\n    this.activeRequests = 0;\n    this.maxConcurrentRequests = 50; // Limit concurrent requests\n\n    console.log('🔍 DEBUG: API Client initialized with baseURL:', this.baseURL);\n    console.log('🔍 DEBUG: Frontend protocol:', window.location.protocol);\n    console.log('🔍 DEBUG: Backend will use same protocol for localhost');\n    console.log('🔍 DEBUG: Request queue initialized with max concurrent requests:', this.maxConcurrentRequests);\n  }\n  refreshToken() {\n    // Always get the latest token from localStorage\n    this.token = localStorage.getItem('authToken');\n    return this.token;\n  }\n  setToken(token) {\n    this.token = token;\n    if (token) {\n      localStorage.setItem('authToken', token);\n    } else {\n      localStorage.removeItem('authToken');\n    }\n  }\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    // Always get fresh token before making request\n    const currentToken = this.refreshToken();\n    if (currentToken) {\n      headers['Authorization'] = `Bearer ${currentToken}`;\n    }\n    return headers;\n  }\n\n  // Process the request queue\n  processQueue() {\n    if (this.requestQueue.length === 0 || this.activeRequests >= this.maxConcurrentRequests) {\n      return;\n    }\n    const {\n      resolve,\n      reject,\n      requestFn\n    } = this.requestQueue.shift();\n    this.activeRequests++;\n    requestFn().then(resolve).catch(reject).finally(() => {\n      this.activeRequests--;\n      this.processQueue(); // Process next request in queue\n    });\n  }\n\n  // Queue a request to prevent overwhelming the server\n  queueRequest(requestFn) {\n    return new Promise((resolve, reject) => {\n      this.requestQueue.push({\n        resolve,\n        reject,\n        requestFn\n      });\n      this.processQueue();\n    });\n  }\n  async request(endpoint, options = {}) {\n    // Queue the request to prevent overwhelming the server\n    return this.queueRequest(async () => {\n      const url = `${this.baseURL}${endpoint}`;\n      const config = {\n        headers: this.getHeaders(),\n        ...options\n      };\n      try {\n        console.log(`Making API request to: ${url} (Active: ${this.activeRequests}, Queued: ${this.requestQueue.length})`);\n\n        // Dynamic timeout – longer for AI image endpoints which can take ~30-60 s\n        let timeoutMs = 300000; // default  s\n        const longRunningEndpoints = ['/facebook/generate-image', '/facebook/post-with-image', '/facebook/ai-post-with-image', '/facebook/post-with-pre-generated-image', '/facebook/create-post',\n        // Add the unified Facebook post endpoint\n        '/instagram/post-carousel',\n        // Add Instagram carousel endpoint\n        '/social/instagram/upload-video',\n        // Add video upload endpoint\n        '/social/instagram/upload-image',\n        // Add image upload endpoint\n        '/social/instagram/upload-video',\n        // Alternative video upload path\n        '/social/instagram/upload-image',\n        // Alternative image upload path\n        '/social/instagram/generate-carousel',\n        // AI carousel generation\n        '/social/instagram/generate-image',\n        // AI image generation\n        '/social/instagram/generate-caption',\n        // AI caption generation\n        '/social/facebook/generate-image',\n        // Facebook AI image generation\n        '/social/facebook/generate-caption-with-strategy',\n        // Facebook AI caption generation\n        '/social/facebook/generate-bulk-captions',\n        // Facebook AI bulk caption generation\n        '/ai/generate-content',\n        // General AI content generation\n        '/social/instagram/create-post',\n        // Instagram post creation\n        '/social/facebook/create-post',\n        // Facebook post creation\n        '/social/instagram/post-carousel',\n        // Instagram carousel posting\n        '/social/instagram/post',\n        // Instagram post endpoint\n        '/social/facebook/post',\n        // Facebook post endpoint\n        '/ai/',\n        // All AI endpoints\n        '/generate',\n        // Any generation endpoint\n        '/carousel',\n        // Carousel operations\n        '/upload' // Upload operations\n        ];\n\n        // Check for specific high-load operations\n        const isAIGeneration = endpoint.includes('generate') || endpoint.includes('ai/');\n        const isCarouselOperation = endpoint.includes('carousel');\n        const isUploadOperation = endpoint.includes('upload');\n        if (longRunningEndpoints.some(ep => endpoint.includes(ep))) {\n          if (isAIGeneration || isCarouselOperation) {\n            timeoutMs = 300000; // 5 minutes for AI generation and carousel operations\n          } else if (isUploadOperation) {\n            timeoutMs = 180000; // 3 minutes for upload operations\n          } else {\n            timeoutMs = 120000; // 2 minutes for other long-running operations\n          }\n        }\n        console.log(`⏱ Using timeout ${timeoutMs / 1000}s for this request`);\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => {\n          console.error(`⏰ Timeout after ${timeoutMs / 1000}s for endpoint: ${endpoint}`);\n          controller.abort();\n        }, timeoutMs);\n        const response = await fetch(url, {\n          ...config,\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n          let errorData = {};\n          try {\n            errorData = await response.json();\n          } catch (e) {\n            console.warn('Failed to parse error response as JSON');\n          }\n\n          // Handle 401 Unauthorized specifically\n          if (response.status === 401) {\n            console.warn('Authentication failed - token may be expired');\n            this.setToken(null); // Clear invalid token\n            throw new Error('Could not validate credentials - please log in again');\n          }\n\n          // Handle 503 Service Unavailable (concurrency limit exceeded)\n          if (response.status === 503) {\n            console.warn('Server temporarily unavailable - concurrency limit exceeded');\n            // Wait a bit and retry for non-critical requests\n            if (!endpoint.includes('generate') && !endpoint.includes('post') && !endpoint.includes('upload')) {\n              await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\n              // Retry the request once\n              const retryResponse = await fetch(url, {\n                ...config,\n                signal: controller.signal\n              });\n              if (retryResponse.ok) {\n                const retryData = await retryResponse.json();\n                console.log(`✅ Retry successful for ${endpoint}`);\n                return retryData;\n              }\n            }\n            throw new Error('Server is temporarily busy. Please try again in a moment.');\n          }\n\n          // Handle validation errors (422)\n          if (response.status === 422 && errorData.detail) {\n            // Handle Pydantic validation errors\n            if (Array.isArray(errorData.detail)) {\n              const validationErrors = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');\n              throw new Error(`Validation Error: ${validationErrors}`);\n            } else {\n              throw new Error(errorData.detail);\n            }\n          }\n\n          // Extract error message properly\n          let errorMessage = 'Unknown error occurred';\n          if (typeof errorData === 'string') {\n            errorMessage = errorData;\n          } else if (errorData.error) {\n            errorMessage = errorData.error;\n          } else if (errorData.detail) {\n            errorMessage = errorData.detail;\n          } else if (errorData.message) {\n            errorMessage = errorData.message;\n          } else {\n            errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n          }\n          throw new Error(errorMessage);\n        }\n        const responseData = await response.json();\n        console.log(`API response from ${endpoint}:`, responseData);\n        return responseData;\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.error(`API request timeout for ${endpoint}`);\n          throw new Error('Request timed out - backend server may not be responding');\n        }\n        console.error(`API Error (${endpoint}):`, error);\n        throw error;\n      }\n    });\n  }\n\n  // Test connection to backend\n  async testConnection() {\n    try {\n      // Use the same protocol as the frontend for localhost\n      const protocol = window.location.protocol;\n      const healthURL = `${protocol}//localhost:8000/health`;\n      console.log('Testing backend connection to:', healthURL);\n      const response = await fetch(healthURL);\n      console.log('Backend connection test result:', response.status, response.ok);\n      return response.ok;\n    } catch (error) {\n      console.error('Backend connection test failed:', error);\n      if (window.location.protocol === 'https:') {\n        console.error('This is likely due to SSL certificate issues. Please visit https://localhost:8000/health in your browser and accept the certificate.');\n      } else {\n        console.error('Make sure the backend server is running on the correct protocol.');\n      }\n      return false;\n    }\n  }\n\n  // Authentication endpoints\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(email, password) {\n    console.log('🔍 DEBUG: Attempting login...');\n    console.log('🔍 DEBUG: Email:', email);\n    console.log('🔍 DEBUG: API Base URL:', this.baseURL);\n    console.log('🔍 DEBUG: Full login URL:', `${this.baseURL}/auth/login`);\n    const response = await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    console.log('🔍 DEBUG: Login response:', response);\n    if (response.access_token) {\n      this.setToken(response.access_token);\n      console.log('🔍 DEBUG: Token set successfully');\n    }\n    return response;\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n  async logout() {\n    this.setToken(null);\n  }\n\n  // OTP endpoints\n  async sendOTP(email) {\n    return this.request('/auth/send-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n  async verifyOTP(email, otp) {\n    return this.request('/auth/verify-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        otp\n      })\n    });\n  }\n  async resendOTP(email) {\n    return this.request('/auth/resend-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n\n  // Google OAuth endpoints\n  async getGoogleOAuthUrl() {\n    return this.request('/auth/google/url');\n  }\n  async googleOAuthCallback(code, redirectUri) {\n    const response = await this.request('/auth/google/callback', {\n      method: 'POST',\n      body: JSON.stringify({\n        code: code,\n        redirect_uri: redirectUri\n      })\n    });\n    if (response.access_token) {\n      this.setToken(response.access_token);\n    }\n    return response;\n  }\n  async disconnectGoogleAccount() {\n    return this.request('/auth/google/disconnect', {\n      method: 'DELETE'\n    });\n  }\n\n  // Facebook endpoints\n  async getFacebookStatus() {\n    return this.request('/social/facebook/status');\n  }\n  async connectFacebook(accessToken, userId, pages = []) {\n    return this.request('/social/facebook/connect', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken,\n        user_id: userId,\n        pages: pages\n      })\n    });\n  }\n  async refreshFacebookTokens() {\n    return this.request('/social/facebook/refresh-tokens', {\n      method: 'POST'\n    });\n  }\n  async logoutFacebook() {\n    return this.request('/social/facebook/logout', {\n      method: 'POST'\n    });\n  }\n\n  // (No scheduled post methods here anymore)\n\n  async getSocialPosts(platform = null, limit = 50, socialAccountId = null) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    params.append('limit', limit.toString());\n    if (socialAccountId) params.append('social_account_id', socialAccountId);\n    return this.request(`/api/social/posts?${params.toString()}`);\n  }\n  async connectInstagram(accessToken) {\n    return this.request('/social/instagram/connect', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken\n      })\n    });\n  }\n  async createInstagramPost(data) {\n    return this.request('/social/instagram/post', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Get Instagram media\n  async getInstagramMedia(instagramUserId, limit = 25) {\n    return this.request(`/social/instagram/media/${instagramUserId}?limit=${limit}`);\n  }\n\n  // Debug Instagram API\n  async debugInstagramApi(instagramUserId) {\n    return this.request(`/social/debug/instagram-api-test/${instagramUserId}`);\n  }\n\n  // Test Instagram post creation\n  async testInstagramPost(instagramUserId, testImageUrl, testCaption) {\n    return this.request(`/social/debug/instagram-test-post/${instagramUserId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        test_image_url: testImageUrl,\n        test_caption: testCaption\n      })\n    });\n  }\n\n  // Upload image to Cloudinary for Instagram\n  async uploadImageToCloudinary(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Use custom FormData upload method\n    const url = `${this.baseURL}/social/instagram/upload-image`;\n    const config = {\n      method: 'POST',\n      body: formData\n    };\n\n    // Add authorization header manually for FormData\n    if (this.token) {\n      config.headers = {\n        'Authorization': `Bearer ${this.token}`\n      };\n      console.log('🔍 DEBUG: Token found, adding Authorization header');\n    } else {\n      console.log('🔍 DEBUG: No token found!');\n      console.log('🔍 DEBUG: this.token:', this.token);\n      console.log('🔍 DEBUG: localStorage authToken:', localStorage.getItem('authToken'));\n    }\n    try {\n      console.log(`🔍 DEBUG: Uploading image to Cloudinary via ${url}`);\n      console.log(`🔍 DEBUG: Request config:`, config);\n      const response = await fetch(url, config);\n      console.log(`🔍 DEBUG: Response status:`, response.status);\n      console.log(`🔍 DEBUG: Response headers:`, Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        let errorData = {};\n        try {\n          errorData = await response.json();\n          console.log(`🔍 DEBUG: Error response data:`, errorData);\n        } catch (e) {\n          console.warn('Failed to parse error response as JSON');\n        }\n        let errorMessage = 'Unknown error occurred';\n        if (typeof errorData === 'string') {\n          errorMessage = errorData;\n        } else if (errorData.error) {\n          errorMessage = errorData.error;\n        } else if (errorData.detail) {\n          errorMessage = errorData.detail;\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        } else {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      const responseData = await response.json();\n      console.log(`FormData upload response:`, responseData);\n      return responseData;\n    } catch (error) {\n      console.error(`FormData upload error:`, error);\n      throw error;\n    }\n  }\n\n  // Upload thumbnail to Cloudinary for Instagram reels\n  async uploadThumbnailToCloudinary(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Use custom FormData upload method\n    const url = `${this.baseURL}/social/instagram/upload-thumbnail`;\n    const config = {\n      method: 'POST',\n      body: formData\n    };\n\n    // Add authorization header manually for FormData\n    if (this.token) {\n      config.headers = {\n        'Authorization': `Bearer ${this.token}`\n      };\n    }\n    try {\n      console.log(`🔍 DEBUG: Uploading thumbnail to Cloudinary via ${url}`);\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        let errorData = {};\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          console.warn('Failed to parse error response as JSON');\n        }\n        let errorMessage = 'Unknown error occurred';\n        if (typeof errorData === 'string') {\n          errorMessage = errorData;\n        } else if (errorData.error) {\n          errorMessage = errorData.error;\n        } else if (errorData.detail) {\n          errorMessage = errorData.detail;\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        } else {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      const responseData = await response.json();\n      console.log(`Thumbnail upload response:`, responseData);\n      return responseData;\n    } catch (error) {\n      console.error(`Thumbnail upload error:`, error);\n      throw error;\n    }\n  }\n\n  // Upload video to Cloudinary for Instagram\n  async uploadVideoToCloudinary(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Use custom FormData upload method\n    const url = `${this.baseURL}/social/instagram/upload-video`;\n    const config = {\n      method: 'POST',\n      body: formData\n    };\n\n    // Add authorization header manually for FormData\n    if (this.token) {\n      config.headers = {\n        'Authorization': `Bearer ${this.token}`\n      };\n    }\n    try {\n      console.log(`🔍 DEBUG: Uploading video to Cloudinary via ${url}`);\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        let errorData = {};\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          console.warn('Failed to parse error response as JSON');\n        }\n        let errorMessage = 'Unknown error occurred';\n        if (typeof errorData === 'string') {\n          errorMessage = errorData;\n        } else if (errorData.error) {\n          errorMessage = errorData.error;\n        } else if (errorData.detail) {\n          errorMessage = errorData.detail;\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        } else {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      const responseData = await response.json();\n      console.log(`Thumbnail upload response:`, responseData);\n      return responseData;\n    } catch (error) {\n      console.error(`Thumbnail upload error:`, error);\n      throw error;\n    }\n  }\n\n  // Google Drive integration for Instagram\n  async getGoogleDriveFiles(mimeType = null) {\n    const params = mimeType ? `?mime_type=${mimeType}` : '';\n    return this.request(`/api/google-drive/files${params}`);\n  }\n  async downloadGoogleDriveFile(fileId) {\n    return this.request(`/api/google-drive/download/${fileId}`);\n  }\n  async getGoogleDriveAuth() {\n    return this.request('/google-drive/auth');\n  }\n  async getGoogleDriveStatus() {\n    return this.request('/google-drive/status');\n  }\n  async getGoogleDriveAuthorizeUrl() {\n    return this.request('/google-drive/authorize');\n  }\n  async getGoogleDriveToken() {\n    const response = await this.request('/google-drive/token');\n    return response;\n  }\n  async debugGoogleDrive() {\n    return this.request('/google-drive/debug');\n  }\n  async testGoogleDriveImages() {\n    return this.request('/google-drive/test-images');\n  }\n  async disconnectGoogleDrive() {\n    return this.request('/google-drive/disconnect', {\n      method: 'POST'\n    });\n  }\n\n  // Generate Instagram image using Stability AI\n  async generateInstagramImage(imagePrompt, postType = 'feed') {\n    return this.request('/social/instagram/generate-image', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: imagePrompt,\n        post_type: postType\n      })\n    });\n  }\n\n  // Unified Instagram post creation endpoint\n  async createUnifiedInstagramPost(instagramUserId, options = {}) {\n    const payload = {\n      instagram_user_id: instagramUserId,\n      caption: options.caption,\n      post_type: options.post_type || 'feed',\n      media_type: options.media_type || 'image',\n      use_ai_text: options.use_ai_text || false,\n      use_ai_image: options.use_ai_image || false,\n      content_prompt: options.content_prompt,\n      image_prompt: options.image_prompt,\n      image_url: options.image_url,\n      video_url: options.video_url,\n      video_filename: options.video_filename,\n      media_file: options.media_file,\n      media_filename: options.media_filename,\n      is_reel: options.is_reel || false,\n      thumbnail_url: options.thumbnail_url,\n      thumbnail_filename: options.thumbnail_filename,\n      thumbnail_file: options.thumbnail_file,\n      location: options.location,\n      hashtags: options.hashtags\n    };\n\n    // Remove undefined and null values\n    const cleanPayload = Object.fromEntries(Object.entries(payload).filter(([key, value]) => value !== null && value !== undefined && value !== ''));\n    return this.request('/social/instagram/create-post', {\n      method: 'POST',\n      body: JSON.stringify(cleanPayload)\n    });\n  }\n\n  // REPLACE Make.com auto-reply webhook\n  async toggleAutoReply(pageId, enabled, responseTemplate = 'Thank you for your comment!', selectedPostIds = []) {\n    return this.request('/social/facebook/auto-reply', {\n      method: 'POST',\n      body: JSON.stringify({\n        page_id: pageId,\n        enabled: enabled,\n        response_template: responseTemplate,\n        selected_post_ids: selectedPostIds\n      })\n    });\n  }\n\n  // Get posts for auto-reply selection\n  async getPostsForAutoReply(pageId) {\n    return this.request(`/social/facebook/posts-for-auto-reply?page_id=${pageId}`);\n  }\n\n  // Instagram Auto-Reply Methods\n  async toggleInstagramAutoReply(instagramUserId, enabled, responseTemplate = 'Thank you for your comment!', selectedPostIds = []) {\n    return this.request('/social/instagram/auto-reply', {\n      method: 'POST',\n      body: JSON.stringify({\n        instagram_user_id: instagramUserId,\n        enabled: enabled,\n        response_template: responseTemplate,\n        selected_post_ids: selectedPostIds\n      })\n    });\n  }\n  async getInstagramPostsForAutoReply(instagramUserId) {\n    return this.request(`/social/instagram/posts-for-auto-reply?instagram_user_id=${instagramUserId}`);\n  }\n  async syncInstagramPosts(instagramUserId) {\n    return this.request('/social/instagram/sync-posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        instagram_user_id: instagramUserId\n      })\n    });\n  }\n\n  // Get connected social accounts\n  async getSocialAccounts() {\n    return this.request('/social/accounts');\n  }\n  async getInstagramAccounts() {\n    // This assumes your backend endpoint is /api/social/accounts and returns only Instagram accounts\n    try {\n      console.log('🔍 DEBUG: Fetching Instagram accounts from /social/accounts');\n      console.log('🔍 DEBUG: Current token:', this.token ? 'Token exists' : 'No token');\n      console.log('🔍 DEBUG: Base URL:', this.baseURL);\n      const response = await this.request('/social/accounts', {\n        method: 'GET'\n      });\n      console.log('🔍 DEBUG: Instagram accounts response:', response);\n      return response;\n    } catch (error) {\n      console.error('🔍 DEBUG: Failed to fetch Instagram accounts:', error);\n      console.error('🔍 DEBUG: Error type:', error.constructor.name);\n      console.error('🔍 DEBUG: Error message:', error.message);\n      if (error.message.includes('Failed to fetch')) {\n        console.error('🔍 DEBUG: This is likely a network, CORS, or SSL certificate issue.');\n        console.error('🔍 DEBUG: Please visit https://localhost:8000/health and https://localhost:8000/api/social/accounts in your browser to accept the SSL certificate.');\n        console.error('🔍 DEBUG: Also check if backend is running with HTTPS.');\n      }\n      if (error.message.includes('Could not validate credentials')) {\n        console.error('🔍 DEBUG: Authentication failed - token may be expired or invalid.');\n        console.error('🔍 DEBUG: Please try logging out and logging back in.');\n      }\n      throw error;\n    }\n  }\n\n  // Get posts\n  async getPosts(platform = null, status = null, limit = 50) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    if (status) params.append('status', status);\n    if (limit) params.append('limit', limit.toString());\n    const query = params.toString();\n    return this.request(`/api/social/posts${query ? `?${query}` : ''}`);\n  }\n\n  // Get automation rules\n  async getAutomationRules(platform = null, ruleType = null) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    if (ruleType) params.append('rule_type', ruleType);\n    const query = params.toString();\n    return this.request(`/social/automation-rules${query ? `?${query}` : ''}`);\n  }\n\n  // Generate content using Groq API\n  async generateContent(prompt) {\n    return this.request('/ai/generate-content', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: prompt\n      })\n    });\n  }\n  async generateInstagramCaption(prompt) {\n    try {\n      const response = await this.request('/social/instagram/generate-caption', {\n        method: 'POST',\n        body: JSON.stringify({\n          prompt: prompt\n        })\n      });\n      if (!response || !response.content) {\n        console.error('Invalid response format from caption generation:', response);\n        return {\n          success: false,\n          error: 'Invalid response format from server'\n        };\n      }\n      return {\n        success: true,\n        content: response.content,\n        ...response\n      };\n    } catch (error) {\n      var _error$response;\n      console.error('Error generating Instagram caption:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to generate caption',\n        details: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.toString()\n      };\n    }\n  }\n  async generateCaptionWithStrategy(customStrategy, context = \"\", maxLength = 2000) {\n    const response = await this.request('/social/generate-caption-with-strategy', {\n      method: 'POST',\n      body: JSON.stringify({\n        custom_strategy: customStrategy,\n        context: context,\n        max_length: maxLength\n      })\n    });\n    return response;\n  }\n  async generateFacebookCaptionWithStrategy(customStrategy, context = \"\", maxLength = 2000) {\n    const response = await this.request('/social/facebook/generate-caption-with-strategy', {\n      method: 'POST',\n      body: JSON.stringify({\n        custom_strategy: customStrategy,\n        context: context,\n        max_length: maxLength\n      })\n    });\n    return response;\n  }\n  async generateFacebookBulkCaptions(customStrategy, contexts, maxLength = 2000) {\n    const response = await this.request('/social/facebook/generate-bulk-captions', {\n      method: 'POST',\n      body: JSON.stringify({\n        custom_strategy: customStrategy,\n        contexts: contexts,\n        max_length: maxLength\n      })\n    });\n    return response;\n  }\n  async generateBulkCaptions(customStrategy, contexts, maxLength = 2000) {\n    const response = await this.request('/social/generate-bulk-captions', {\n      method: 'POST',\n      body: JSON.stringify({\n        custom_strategy: customStrategy,\n        contexts: contexts,\n        max_length: maxLength\n      })\n    });\n    return response;\n  }\n\n  // Generate Instagram carousel\n  async generateInstagramCarousel(prompt, count = 3) {\n    const response = await this.request('/social/instagram/generate-carousel', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: prompt,\n        count: count\n      })\n    });\n    return response;\n  }\n\n  // Post Instagram carousel\n  async postInstagramCarousel(instagramUserId, caption, imageUrls) {\n    const response = await this.request('/social/instagram/post-carousel', {\n      method: 'POST',\n      body: JSON.stringify({\n        instagram_user_id: instagramUserId,\n        caption: caption,\n        image_urls: imageUrls\n      })\n    });\n    return response;\n  }\n\n  // Unified Facebook post creation endpoint\n  async createFacebookPost(pageId, options = {}) {\n    return this.request('/social/facebook/create-post', {\n      method: 'POST',\n      body: JSON.stringify({\n        page_id: pageId,\n        message: options.message,\n        image_url: options.image_url,\n        post_type: options.post_type || 'feed',\n        use_ai: options.use_ai || false,\n        prompt: options.prompt,\n        scheduled_time: options.scheduled_time,\n        carousel_images: options.carousel_images || [],\n        video_url: options.video_url,\n        location: options.location,\n        hashtags: options.hashtags\n      })\n    });\n  }\n\n  // Stability AI Image Generation endpoint (standalone)\n  async generateFacebookImage(imagePrompt, postType = 'feed') {\n    return this.request('/social/facebook/generate-image', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: imagePrompt,\n        post_type: postType\n      })\n    });\n  }\n\n  // Get AI service status including Stability AI\n  async getAIServiceStatus() {\n    return this.request('/ai/status');\n  }\n\n  // Debug endpoint for Stability AI troubleshooting\n  async debugStabilityAI() {\n    return this.request('/social/debug/stability-ai-status');\n  }\n\n  // Debug endpoint for testing Facebook image posts\n  async debugFacebookImagePost(pageId, message = \"Test post from debug\") {\n    return this.request('/social/facebook/debug-image-post', {\n      method: 'POST',\n      body: JSON.stringify({\n        page_id: pageId,\n        message: message\n      })\n    });\n  }\n\n  // Bulk Composer - Schedule multiple posts\n  async bulkSchedulePosts(requestData) {\n    const response = await this.request('/social/bulk-composer/schedule', {\n      method: 'POST',\n      body: JSON.stringify(requestData)\n    });\n    return response;\n  }\n\n  // Notification endpoints\n  async getNotifications(limit = 50, offset = 0) {\n    const params = new URLSearchParams();\n    params.append('limit', limit.toString());\n    params.append('offset', offset.toString());\n    return this.request(`/notifications?${params.toString()}`);\n  }\n  async markNotificationRead(notificationId) {\n    return this.request(`/notifications/${notificationId}/mark-read`, {\n      method: 'POST'\n    });\n  }\n  async markAllNotificationsRead() {\n    return this.request('/notifications/mark-all-read', {\n      method: 'POST'\n    });\n  }\n  async getNotificationPreferences() {\n    return this.request('/notification-preferences');\n  }\n  async updateNotificationPreferences(preferences) {\n    return this.request('/notification-preferences', {\n      method: 'PUT',\n      body: JSON.stringify(preferences)\n    });\n  }\n  async testNotification() {\n    return this.request('/test-notification', {\n      method: 'POST'\n    });\n  }\n\n  // Bulk Composer - Schedule multiple posts for Instagram\n  async bulkScheduleInstagramPosts({\n    social_account_id,\n    posts\n  }) {\n    // Send social_account_id as a query param, posts as the body\n    return this.request(`/social/instagram/bulk-schedule?social_account_id=${encodeURIComponent(social_account_id)}`, {\n      method: 'POST',\n      body: JSON.stringify(posts)\n    });\n  }\n\n  // Bulk Composer - Get scheduled posts\n  async getBulkComposerContent(socialAccountId = null) {\n    let endpoint = '/social/bulk-composer/content';\n    if (socialAccountId) {\n      endpoint += `?social_account_id=${socialAccountId}`;\n    }\n    return this.request(endpoint);\n  }\n\n  // Bulk Composer - Update post caption\n  async updateBulkComposerPost(postId, caption) {\n    return this.request(`/social/bulk-composer/content/${postId}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        caption: caption\n      })\n    });\n  }\n\n  // Bulk Composer - Cancel/delete scheduled post\n  async cancelBulkComposerPost(postId) {\n    return this.request(`/social/bulk-composer/content/${postId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // LinkedIn endpoints\n  async getLinkedInStatus() {\n    return this.request('/social/linkedin/status');\n  }\n  async getLinkedInConfig() {\n    return this.request('/social/linkedin/config');\n  }\n  async connectLinkedIn(data) {\n    return this.request('/social/linkedin/connect', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async exchangeLinkedInCode(code) {\n    return this.request('/social/linkedin/exchange-code', {\n      method: 'POST',\n      body: JSON.stringify({\n        code\n      })\n    });\n  }\n  async disconnectLinkedIn() {\n    return this.request('/social/linkedin/disconnect', {\n      method: 'POST'\n    });\n  }\n  async refreshLinkedInTokens() {\n    return this.request('/social/linkedin/refresh-tokens', {\n      method: 'POST'\n    });\n  }\n\n  // Get Instagram DM auto-reply status\n  async getInstagramDmAutoReplyStatus(instagramUserId) {\n    return this.request(`/social/instagram/dm-auto-reply/status/${instagramUserId}`);\n  }\n\n  // Enable global Instagram auto-reply\n  async enableGlobalInstagramAutoReply(instagramUserId) {\n    return this.request(`/social/instagram/auto_reply/global/enable?instagram_user_id=${instagramUserId}`, {\n      method: 'POST'\n    });\n  }\n\n  // Disable global Instagram auto-reply\n  async disableGlobalInstagramAutoReply(instagramUserId) {\n    return this.request(`/social/instagram/auto_reply/global/disable?instagram_user_id=${instagramUserId}`, {\n      method: 'POST'\n    });\n  }\n\n  // Get global auto-reply status\n  async getGlobalInstagramAutoReplyStatus(instagramUserId) {\n    return this.request(`/social/instagram/auto_reply/global/status?instagram_user_id=${instagramUserId}`);\n  }\n\n  // Get global auto-reply progress\n  async getGlobalInstagramAutoReplyProgress(instagramUserId) {\n    return this.request(`/social/instagram/auto_reply/global/progress?instagram_user_id=${instagramUserId}`);\n  }\n  async getScheduledPosts() {\n    // Adjust the endpoint if your backend uses a different path\n    return this.request('/social/scheduled-posts');\n  }\n  async updateScheduledPost(postId, updatedData) {\n    return this.request(`/social/scheduled-posts/${postId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedData)\n    });\n  }\n  async deleteScheduledPost(postId) {\n    return this.request(`/social/scheduled-posts/${postId}`, {\n      method: 'DELETE'\n    });\n  }\n}\nconst apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["ApiClient","constructor","isLocalhost","window","location","hostname","defaultURL","protocol","isHttps","baseURL","process","env","REACT_APP_API_URL","refreshToken","requestQueue","activeRequests","maxConcurrentRequests","console","log","token","localStorage","getItem","setToken","setItem","removeItem","getHeaders","headers","currentToken","processQueue","length","resolve","reject","requestFn","shift","then","catch","finally","queueRequest","Promise","push","request","endpoint","options","url","config","timeoutMs","longRunningEndpoints","isAIGeneration","includes","isCarouselOperation","isUploadOperation","some","ep","controller","AbortController","timeoutId","setTimeout","error","abort","response","fetch","signal","clearTimeout","ok","errorData","json","e","warn","status","Error","retryResponse","retryData","detail","Array","isArray","validationErrors","map","err","loc","join","msg","errorMessage","message","statusText","responseData","name","testConnection","healthURL","register","userData","method","body","JSON","stringify","login","email","password","access_token","getCurrentUser","logout","sendOTP","verifyOTP","otp","resendOTP","getGoogleOAuthUrl","googleOAuthCallback","code","redirectUri","redirect_uri","disconnectGoogleAccount","getFacebookStatus","connectFacebook","accessToken","userId","pages","user_id","refreshFacebookTokens","logoutFacebook","getSocialPosts","platform","limit","socialAccountId","params","URLSearchParams","append","toString","connectInstagram","createInstagramPost","data","getInstagramMedia","instagramUserId","debugInstagramApi","testInstagramPost","testImageUrl","testCaption","test_image_url","test_caption","uploadImageToCloudinary","file","formData","FormData","Object","fromEntries","entries","uploadThumbnailToCloudinary","uploadVideoToCloudinary","getGoogleDriveFiles","mimeType","downloadGoogleDriveFile","fileId","getGoogleDriveAuth","getGoogleDriveStatus","getGoogleDriveAuthorizeUrl","getGoogleDriveToken","debugGoogleDrive","testGoogleDriveImages","disconnectGoogleDrive","generateInstagramImage","imagePrompt","postType","prompt","post_type","createUnifiedInstagramPost","payload","instagram_user_id","caption","media_type","use_ai_text","use_ai_image","content_prompt","image_prompt","image_url","video_url","video_filename","media_file","media_filename","is_reel","thumbnail_url","thumbnail_filename","thumbnail_file","hashtags","cleanPayload","filter","key","value","undefined","toggleAutoReply","pageId","enabled","responseTemplate","selectedPostIds","page_id","response_template","selected_post_ids","getPostsForAutoReply","toggleInstagramAutoReply","getInstagramPostsForAutoReply","syncInstagramPosts","getSocialAccounts","getInstagramAccounts","getPosts","query","getAutomationRules","ruleType","generateContent","generateInstagramCaption","content","success","_error$response","details","generateCaptionWithStrategy","customStrategy","context","maxLength","custom_strategy","max_length","generateFacebookCaptionWithStrategy","generateFacebookBulkCaptions","contexts","generateBulkCaptions","generateInstagramCarousel","count","postInstagramCarousel","imageUrls","image_urls","createFacebookPost","use_ai","scheduled_time","carousel_images","generateFacebookImage","getAIServiceStatus","debugStabilityAI","debugFacebookImagePost","bulkSchedulePosts","requestData","getNotifications","offset","markNotificationRead","notificationId","markAllNotificationsRead","getNotificationPreferences","updateNotificationPreferences","preferences","testNotification","bulkScheduleInstagramPosts","social_account_id","posts","encodeURIComponent","getBulkComposerContent","updateBulkComposerPost","postId","cancelBulkComposerPost","getLinkedInStatus","getLinkedInConfig","connectLinkedIn","exchangeLinkedInCode","disconnectLinkedIn","refreshLinkedInTokens","getInstagramDmAutoReplyStatus","enableGlobalInstagramAutoReply","disableGlobalInstagramAutoReply","getGlobalInstagramAutoReplyStatus","getGlobalInstagramAutoReplyProgress","getScheduledPosts","updateScheduledPost","updatedData","deleteScheduledPost","apiClient"],"sources":["C:/Users/THORSIGNIA/Projects/automation-dash/frontend/src/services/apiClient.js"],"sourcesContent":["// API Client for Backend Integration\r\nclass ApiClient {\r\n  constructor() {\r\n    // For localhost development, match the frontend protocol\r\n    // This ensures HTTPS frontend talks to HTTPS backend\r\n    const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n\r\n    let defaultURL;\r\n    if (isLocalhost) {\r\n      // Match the frontend protocol for localhost development\r\n      const protocol = window.location.protocol;\r\n      defaultURL = `${protocol}//localhost:8000/api`;\r\n    } else {\r\n      // For production, match the current protocol\r\n      const isHttps = window.location.protocol === 'https:';\r\n      const protocol = isHttps ? 'https:' : 'http:';\r\n      defaultURL = `${protocol}//localhost:8000/api`;\r\n    }\r\n\r\n    this.baseURL = process.env.REACT_APP_API_URL || defaultURL;\r\n    \r\n    // Always get fresh token from localStorage\r\n    this.refreshToken();\r\n\r\n    // Request queue to prevent overwhelming the server\r\n    this.requestQueue = [];\r\n    this.activeRequests = 0;\r\n    this.maxConcurrentRequests = 50; // Limit concurrent requests\r\n\r\n    console.log('🔍 DEBUG: API Client initialized with baseURL:', this.baseURL);\r\n    console.log('🔍 DEBUG: Frontend protocol:', window.location.protocol);\r\n    console.log('🔍 DEBUG: Backend will use same protocol for localhost');\r\n    console.log('🔍 DEBUG: Request queue initialized with max concurrent requests:', this.maxConcurrentRequests);\r\n  }\r\n\r\n  refreshToken() {\r\n    // Always get the latest token from localStorage\r\n    this.token = localStorage.getItem('authToken');\r\n    return this.token;\r\n  }\r\n\r\n  setToken(token) {\r\n    this.token = token;\r\n    if (token) {\r\n      localStorage.setItem('authToken', token);\r\n    } else {\r\n      localStorage.removeItem('authToken');\r\n    }\r\n  }\r\n\r\n  getHeaders() {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    // Always get fresh token before making request\r\n    const currentToken = this.refreshToken();\r\n    if (currentToken) {\r\n      headers['Authorization'] = `Bearer ${currentToken}`;\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  // Process the request queue\r\n  processQueue() {\r\n    if (this.requestQueue.length === 0 || this.activeRequests >= this.maxConcurrentRequests) {\r\n      return;\r\n    }\r\n\r\n    const { resolve, reject, requestFn } = this.requestQueue.shift();\r\n    this.activeRequests++;\r\n\r\n    requestFn()\r\n      .then(resolve)\r\n      .catch(reject)\r\n      .finally(() => {\r\n        this.activeRequests--;\r\n        this.processQueue(); // Process next request in queue\r\n      });\r\n  }\r\n\r\n  // Queue a request to prevent overwhelming the server\r\n  queueRequest(requestFn) {\r\n    return new Promise((resolve, reject) => {\r\n      this.requestQueue.push({ resolve, reject, requestFn });\r\n      this.processQueue();\r\n    });\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    // Queue the request to prevent overwhelming the server\r\n    return this.queueRequest(async () => {\r\n      const url = `${this.baseURL}${endpoint}`;\r\n\r\n      const config = {\r\n        headers: this.getHeaders(),\r\n        ...options,\r\n      };\r\n\r\n      try {\r\n        console.log(`Making API request to: ${url} (Active: ${this.activeRequests}, Queued: ${this.requestQueue.length})`);\r\n\r\n        // Dynamic timeout – longer for AI image endpoints which can take ~30-60 s\r\n        let timeoutMs = 300000; // default  s\r\n        const longRunningEndpoints = [\r\n          '/facebook/generate-image',\r\n          '/facebook/post-with-image',\r\n          '/facebook/ai-post-with-image',\r\n          '/facebook/post-with-pre-generated-image',\r\n          '/facebook/create-post',  // Add the unified Facebook post endpoint\r\n          '/instagram/post-carousel',  // Add Instagram carousel endpoint\r\n          '/social/instagram/upload-video',  // Add video upload endpoint\r\n          '/social/instagram/upload-image',  // Add image upload endpoint\r\n          '/social/instagram/upload-video',  // Alternative video upload path\r\n          '/social/instagram/upload-image',   // Alternative image upload path\r\n          '/social/instagram/generate-carousel',  // AI carousel generation\r\n          '/social/instagram/generate-image',     // AI image generation\r\n          '/social/instagram/generate-caption',   // AI caption generation\r\n          '/social/facebook/generate-image',      // Facebook AI image generation\r\n          '/social/facebook/generate-caption-with-strategy',  // Facebook AI caption generation\r\n          '/social/facebook/generate-bulk-captions',          // Facebook AI bulk caption generation\r\n          '/ai/generate-content',                 // General AI content generation\r\n          '/social/instagram/create-post',        // Instagram post creation\r\n          '/social/facebook/create-post',         // Facebook post creation\r\n          '/social/instagram/post-carousel',      // Instagram carousel posting\r\n          '/social/instagram/post',               // Instagram post endpoint\r\n          '/social/facebook/post',                // Facebook post endpoint\r\n          '/ai/',                                 // All AI endpoints\r\n          '/generate',                                // Any generation endpoint\r\n          '/carousel',                                // Carousel operations\r\n          '/upload'                                   // Upload operations\r\n        ];\r\n\r\n        // Check for specific high-load operations\r\n        const isAIGeneration = endpoint.includes('generate') || endpoint.includes('ai/');\r\n        const isCarouselOperation = endpoint.includes('carousel');\r\n        const isUploadOperation = endpoint.includes('upload');\r\n\r\n        if (longRunningEndpoints.some(ep => endpoint.includes(ep))) {\r\n          if (isAIGeneration || isCarouselOperation) {\r\n            timeoutMs = 300000; // 5 minutes for AI generation and carousel operations\r\n          } else if (isUploadOperation) {\r\n            timeoutMs = 180000; // 3 minutes for upload operations\r\n          } else {\r\n            timeoutMs = 120000; // 2 minutes for other long-running operations\r\n          }\r\n        }\r\n\r\n        console.log(`⏱ Using timeout ${timeoutMs / 1000}s for this request`);\r\n\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => {\r\n          console.error(`⏰ Timeout after ${timeoutMs / 1000}s for endpoint: ${endpoint}`);\r\n          controller.abort();\r\n        }, timeoutMs);\r\n\r\n        const response = await fetch(url, {\r\n          ...config,\r\n          signal: controller.signal\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n\r\n        if (!response.ok) {\r\n          let errorData = {};\r\n          try {\r\n            errorData = await response.json();\r\n          } catch (e) {\r\n            console.warn('Failed to parse error response as JSON');\r\n          }\r\n\r\n          // Handle 401 Unauthorized specifically\r\n          if (response.status === 401) {\r\n            console.warn('Authentication failed - token may be expired');\r\n            this.setToken(null); // Clear invalid token\r\n            throw new Error('Could not validate credentials - please log in again');\r\n          }\r\n\r\n          // Handle 503 Service Unavailable (concurrency limit exceeded)\r\n          if (response.status === 503) {\r\n            console.warn('Server temporarily unavailable - concurrency limit exceeded');\r\n            // Wait a bit and retry for non-critical requests\r\n            if (!endpoint.includes('generate') && !endpoint.includes('post') && !endpoint.includes('upload')) {\r\n              await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n              // Retry the request once\r\n              const retryResponse = await fetch(url, {\r\n                ...config,\r\n                signal: controller.signal\r\n              });\r\n              if (retryResponse.ok) {\r\n                const retryData = await retryResponse.json();\r\n                console.log(`✅ Retry successful for ${endpoint}`);\r\n                return retryData;\r\n              }\r\n            }\r\n            throw new Error('Server is temporarily busy. Please try again in a moment.');\r\n          }\r\n\r\n          // Handle validation errors (422)\r\n          if (response.status === 422 && errorData.detail) {\r\n            // Handle Pydantic validation errors\r\n            if (Array.isArray(errorData.detail)) {\r\n              const validationErrors = errorData.detail.map(err =>\r\n                `${err.loc.join('.')}: ${err.msg}`\r\n              ).join(', ');\r\n              throw new Error(`Validation Error: ${validationErrors}`);\r\n            } else {\r\n              throw new Error(errorData.detail);\r\n            }\r\n          }\r\n\r\n          // Extract error message properly\r\n          let errorMessage = 'Unknown error occurred';\r\n          if (typeof errorData === 'string') {\r\n            errorMessage = errorData;\r\n          } else if (errorData.error) {\r\n            errorMessage = errorData.error;\r\n          } else if (errorData.detail) {\r\n            errorMessage = errorData.detail;\r\n          } else if (errorData.message) {\r\n            errorMessage = errorData.message;\r\n          } else {\r\n            errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n          }\r\n\r\n          throw new Error(errorMessage);\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        console.log(`API response from ${endpoint}:`, responseData);\r\n        return responseData;\r\n      } catch (error) {\r\n        if (error.name === 'AbortError') {\r\n          console.error(`API request timeout for ${endpoint}`);\r\n          throw new Error('Request timed out - backend server may not be responding');\r\n        }\r\n        console.error(`API Error (${endpoint}):`, error);\r\n        throw error;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Test connection to backend\r\n  async testConnection() {\r\n    try {\r\n      // Use the same protocol as the frontend for localhost\r\n      const protocol = window.location.protocol;\r\n      const healthURL = `${protocol}//localhost:8000/health`;\r\n      console.log('Testing backend connection to:', healthURL);\r\n      const response = await fetch(healthURL);\r\n      console.log('Backend connection test result:', response.status, response.ok);\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Backend connection test failed:', error);\r\n      if (window.location.protocol === 'https:') {\r\n        console.error('This is likely due to SSL certificate issues. Please visit https://localhost:8000/health in your browser and accept the certificate.');\r\n      } else {\r\n        console.error('Make sure the backend server is running on the correct protocol.');\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Authentication endpoints\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  async login(email, password) {\r\n    console.log('🔍 DEBUG: Attempting login...');\r\n    console.log('🔍 DEBUG: Email:', email);\r\n    console.log('🔍 DEBUG: API Base URL:', this.baseURL);\r\n    console.log('🔍 DEBUG: Full login URL:', `${this.baseURL}/auth/login`);\r\n    \r\n    const response = await this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    console.log('🔍 DEBUG: Login response:', response);\r\n\r\n    if (response.access_token) {\r\n      this.setToken(response.access_token);\r\n      console.log('🔍 DEBUG: Token set successfully');\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  async logout() {\r\n    this.setToken(null);\r\n  }\r\n\r\n  // OTP endpoints\r\n  async sendOTP(email) {\r\n    return this.request('/auth/send-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  async verifyOTP(email, otp) {\r\n    return this.request('/auth/verify-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, otp }),\r\n    });\r\n  }\r\n\r\n  async resendOTP(email) {\r\n    return this.request('/auth/resend-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  // Google OAuth endpoints\r\n  async getGoogleOAuthUrl() {\r\n    return this.request('/auth/google/url');\r\n  }\r\n\r\n  async googleOAuthCallback(code, redirectUri) {\r\n    const response = await this.request('/auth/google/callback', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        code: code,\r\n        redirect_uri: redirectUri\r\n      }),\r\n    });\r\n\r\n    if (response.access_token) {\r\n      this.setToken(response.access_token);\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async disconnectGoogleAccount() {\r\n    return this.request('/auth/google/disconnect', {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  // Facebook endpoints\r\n  async getFacebookStatus() {\r\n    return this.request('/social/facebook/status');\r\n  }\r\n\r\n  async connectFacebook(accessToken, userId, pages = []) {\r\n    return this.request('/social/facebook/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        access_token: accessToken,\r\n        user_id: userId,\r\n        pages: pages\r\n      }),\r\n    });\r\n  }\r\n\r\n  async refreshFacebookTokens() {\r\n    return this.request('/social/facebook/refresh-tokens', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async logoutFacebook() {\r\n    return this.request('/social/facebook/logout', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // (No scheduled post methods here anymore)\r\n\r\n  async getSocialPosts(platform = null, limit = 50, socialAccountId = null) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    params.append('limit', limit.toString());\r\n    if (socialAccountId) params.append('social_account_id', socialAccountId);\r\n\r\n    return this.request(`/api/social/posts?${params.toString()}`);\r\n  }\r\n\r\n  async connectInstagram(accessToken) {\r\n    return this.request('/social/instagram/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        access_token: accessToken\r\n      }),\r\n    });\r\n  }\r\n\r\n  async createInstagramPost(data) {\r\n    return this.request('/social/instagram/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // Get Instagram media\r\n  async getInstagramMedia(instagramUserId, limit = 25) {\r\n    return this.request(`/social/instagram/media/${instagramUserId}?limit=${limit}`);\r\n  }\r\n\r\n  // Debug Instagram API\r\n  async debugInstagramApi(instagramUserId) {\r\n    return this.request(`/social/debug/instagram-api-test/${instagramUserId}`);\r\n  }\r\n\r\n  // Test Instagram post creation\r\n  async testInstagramPost(instagramUserId, testImageUrl, testCaption) {\r\n    return this.request(`/social/debug/instagram-test-post/${instagramUserId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        test_image_url: testImageUrl,\r\n        test_caption: testCaption\r\n      })\r\n    });\r\n  }\r\n\r\n  // Upload image to Cloudinary for Instagram\r\n  async uploadImageToCloudinary(file) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    // Use custom FormData upload method\r\n    const url = `${this.baseURL}/social/instagram/upload-image`;\r\n    const config = {\r\n      method: 'POST',\r\n      body: formData,\r\n    };\r\n\r\n    // Add authorization header manually for FormData\r\n    if (this.token) {\r\n      config.headers = {\r\n        'Authorization': `Bearer ${this.token}`\r\n      };\r\n      console.log('🔍 DEBUG: Token found, adding Authorization header');\r\n    } else {\r\n      console.log('🔍 DEBUG: No token found!');\r\n      console.log('🔍 DEBUG: this.token:', this.token);\r\n      console.log('🔍 DEBUG: localStorage authToken:', localStorage.getItem('authToken'));\r\n    }\r\n\r\n    try {\r\n      console.log(`🔍 DEBUG: Uploading image to Cloudinary via ${url}`);\r\n      console.log(`🔍 DEBUG: Request config:`, config);\r\n      const response = await fetch(url, config);\r\n\r\n      console.log(`🔍 DEBUG: Response status:`, response.status);\r\n      console.log(`🔍 DEBUG: Response headers:`, Object.fromEntries(response.headers.entries()));\r\n\r\n      if (!response.ok) {\r\n        let errorData = {};\r\n        try {\r\n          errorData = await response.json();\r\n          console.log(`🔍 DEBUG: Error response data:`, errorData);\r\n        } catch (e) {\r\n          console.warn('Failed to parse error response as JSON');\r\n        }\r\n\r\n        let errorMessage = 'Unknown error occurred';\r\n        if (typeof errorData === 'string') {\r\n          errorMessage = errorData;\r\n        } else if (errorData.error) {\r\n          errorMessage = errorData.error;\r\n        } else if (errorData.detail) {\r\n          errorMessage = errorData.detail;\r\n        } else if (errorData.message) {\r\n          errorMessage = errorData.message;\r\n        } else {\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      console.log(`FormData upload response:`, responseData);\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error(`FormData upload error:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Upload thumbnail to Cloudinary for Instagram reels\r\n  async uploadThumbnailToCloudinary(file) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    // Use custom FormData upload method\r\n    const url = `${this.baseURL}/social/instagram/upload-thumbnail`;\r\n    const config = {\r\n      method: 'POST',\r\n      body: formData,\r\n    };\r\n\r\n    // Add authorization header manually for FormData\r\n    if (this.token) {\r\n      config.headers = {\r\n        'Authorization': `Bearer ${this.token}`\r\n      };\r\n    }\r\n\r\n    try {\r\n      console.log(`🔍 DEBUG: Uploading thumbnail to Cloudinary via ${url}`);\r\n      const response = await fetch(url, config);\r\n\r\n      if (!response.ok) {\r\n        let errorData = {};\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          console.warn('Failed to parse error response as JSON');\r\n        }\r\n\r\n        let errorMessage = 'Unknown error occurred';\r\n        if (typeof errorData === 'string') {\r\n          errorMessage = errorData;\r\n        } else if (errorData.error) {\r\n          errorMessage = errorData.error;\r\n        } else if (errorData.detail) {\r\n          errorMessage = errorData.detail;\r\n        } else if (errorData.message) {\r\n          errorMessage = errorData.message;\r\n        } else {\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      console.log(`Thumbnail upload response:`, responseData);\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error(`Thumbnail upload error:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Upload video to Cloudinary for Instagram\r\n  async uploadVideoToCloudinary(file) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    // Use custom FormData upload method\r\n    const url = `${this.baseURL}/social/instagram/upload-video`;\r\n    const config = {\r\n      method: 'POST',\r\n      body: formData,\r\n    };\r\n\r\n    // Add authorization header manually for FormData\r\n    if (this.token) {\r\n      config.headers = {\r\n        'Authorization': `Bearer ${this.token}`\r\n      };\r\n    }\r\n\r\n    try {\r\n      console.log(`🔍 DEBUG: Uploading video to Cloudinary via ${url}`);\r\n      const response = await fetch(url, config);\r\n\r\n      if (!response.ok) {\r\n        let errorData = {};\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          console.warn('Failed to parse error response as JSON');\r\n        }\r\n\r\n        let errorMessage = 'Unknown error occurred';\r\n        if (typeof errorData === 'string') {\r\n          errorMessage = errorData;\r\n        } else if (errorData.error) {\r\n          errorMessage = errorData.error;\r\n        } else if (errorData.detail) {\r\n          errorMessage = errorData.detail;\r\n        } else if (errorData.message) {\r\n          errorMessage = errorData.message;\r\n        } else {\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      console.log(`Thumbnail upload response:`, responseData);\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error(`Thumbnail upload error:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Google Drive integration for Instagram\r\n  async getGoogleDriveFiles(mimeType = null) {\r\n    const params = mimeType ? `?mime_type=${mimeType}` : '';\r\n    return this.request(`/api/google-drive/files${params}`);\r\n  }\r\n\r\n  async downloadGoogleDriveFile(fileId) {\r\n    return this.request(`/api/google-drive/download/${fileId}`);\r\n  }\r\n\r\n  async getGoogleDriveAuth() {\r\n    return this.request('/google-drive/auth');\r\n  }\r\n\r\n  async getGoogleDriveStatus() {\r\n    return this.request('/google-drive/status');\r\n  }\r\n\r\n  async getGoogleDriveAuthorizeUrl() {\r\n    return this.request('/google-drive/authorize');\r\n  }\r\n\r\n  async getGoogleDriveToken() {\r\n    const response = await this.request('/google-drive/token');\r\n    return response;\r\n  }\r\n\r\n  async debugGoogleDrive() {\r\n    return this.request('/google-drive/debug');\r\n  }\r\n\r\n  async testGoogleDriveImages() {\r\n    return this.request('/google-drive/test-images');\r\n  }\r\n\r\n  async disconnectGoogleDrive() {\r\n    return this.request('/google-drive/disconnect', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // Generate Instagram image using Stability AI\r\n  async generateInstagramImage(imagePrompt, postType = 'feed') {\r\n    return this.request('/social/instagram/generate-image', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        prompt: imagePrompt,\r\n        post_type: postType\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Unified Instagram post creation endpoint\r\n  async createUnifiedInstagramPost(instagramUserId, options = {}) {\r\n    const payload = {\r\n      instagram_user_id: instagramUserId,\r\n      caption: options.caption,\r\n      post_type: options.post_type || 'feed',\r\n      media_type: options.media_type || 'image',\r\n      use_ai_text: options.use_ai_text || false,\r\n      use_ai_image: options.use_ai_image || false,\r\n      content_prompt: options.content_prompt,\r\n      image_prompt: options.image_prompt,\r\n      image_url: options.image_url,\r\n      video_url: options.video_url,\r\n      video_filename: options.video_filename,\r\n      media_file: options.media_file,\r\n      media_filename: options.media_filename,\r\n      is_reel: options.is_reel || false,\r\n      thumbnail_url: options.thumbnail_url,\r\n      thumbnail_filename: options.thumbnail_filename,\r\n      thumbnail_file: options.thumbnail_file,\r\n      location: options.location,\r\n      hashtags: options.hashtags\r\n    };\r\n\r\n    // Remove undefined and null values\r\n    const cleanPayload = Object.fromEntries(\r\n      Object.entries(payload).filter(([key, value]) =>\r\n        value !== null && value !== undefined && value !== ''\r\n      )\r\n    );\r\n\r\n    return this.request('/social/instagram/create-post', {\r\n      method: 'POST',\r\n      body: JSON.stringify(cleanPayload),\r\n    });\r\n  }\r\n\r\n  // REPLACE Make.com auto-reply webhook\r\n  async toggleAutoReply(pageId, enabled, responseTemplate = 'Thank you for your comment!', selectedPostIds = []) {\r\n    return this.request('/social/facebook/auto-reply', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        page_id: pageId,\r\n        enabled: enabled,\r\n        response_template: responseTemplate,\r\n        selected_post_ids: selectedPostIds\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Get posts for auto-reply selection\r\n  async getPostsForAutoReply(pageId) {\r\n    return this.request(`/social/facebook/posts-for-auto-reply?page_id=${pageId}`);\r\n  }\r\n\r\n  // Instagram Auto-Reply Methods\r\n  async toggleInstagramAutoReply(instagramUserId, enabled, responseTemplate = 'Thank you for your comment!', selectedPostIds = []) {\r\n    return this.request('/social/instagram/auto-reply', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        instagram_user_id: instagramUserId,\r\n        enabled: enabled,\r\n        response_template: responseTemplate,\r\n        selected_post_ids: selectedPostIds\r\n      }),\r\n    });\r\n  }\r\n\r\n  async getInstagramPostsForAutoReply(instagramUserId) {\r\n    return this.request(`/social/instagram/posts-for-auto-reply?instagram_user_id=${instagramUserId}`);\r\n  }\r\n\r\n  async syncInstagramPosts(instagramUserId) {\r\n    return this.request('/social/instagram/sync-posts', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        instagram_user_id: instagramUserId\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Get connected social accounts\r\n  async getSocialAccounts() {\r\n    return this.request('/social/accounts');\r\n  }\r\n\r\n  async getInstagramAccounts() {\r\n    // This assumes your backend endpoint is /api/social/accounts and returns only Instagram accounts\r\n    try {\r\n      console.log('🔍 DEBUG: Fetching Instagram accounts from /social/accounts');\r\n      console.log('🔍 DEBUG: Current token:', this.token ? 'Token exists' : 'No token');\r\n      console.log('🔍 DEBUG: Base URL:', this.baseURL);\r\n\r\n      const response = await this.request('/social/accounts', {\r\n        method: 'GET',\r\n      });\r\n      console.log('🔍 DEBUG: Instagram accounts response:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🔍 DEBUG: Failed to fetch Instagram accounts:', error);\r\n      console.error('🔍 DEBUG: Error type:', error.constructor.name);\r\n      console.error('🔍 DEBUG: Error message:', error.message);\r\n\r\n      if (error.message.includes('Failed to fetch')) {\r\n        console.error('🔍 DEBUG: This is likely a network, CORS, or SSL certificate issue.');\r\n        console.error('🔍 DEBUG: Please visit https://localhost:8000/health and https://localhost:8000/api/social/accounts in your browser to accept the SSL certificate.');\r\n        console.error('🔍 DEBUG: Also check if backend is running with HTTPS.');\r\n      }\r\n\r\n      if (error.message.includes('Could not validate credentials')) {\r\n        console.error('🔍 DEBUG: Authentication failed - token may be expired or invalid.');\r\n        console.error('🔍 DEBUG: Please try logging out and logging back in.');\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get posts\r\n  async getPosts(platform = null, status = null, limit = 50) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    if (status) params.append('status', status);\r\n    if (limit) params.append('limit', limit.toString());\r\n\r\n    const query = params.toString();\r\n    return this.request(`/api/social/posts${query ? `?${query}` : ''}`);\r\n  }\r\n\r\n  // Get automation rules\r\n  async getAutomationRules(platform = null, ruleType = null) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    if (ruleType) params.append('rule_type', ruleType);\r\n\r\n    const query = params.toString();\r\n    return this.request(`/social/automation-rules${query ? `?${query}` : ''}`);\r\n  }\r\n\r\n  // Generate content using Groq API\r\n  async generateContent(prompt) {\r\n    return this.request('/ai/generate-content', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        prompt: prompt\r\n      }),\r\n    });\r\n  }\r\n\r\n  async generateInstagramCaption(prompt) {\r\n    try {\r\n      const response = await this.request('/social/instagram/generate-caption', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          prompt: prompt\r\n        }),\r\n      });\r\n\r\n      if (!response || !response.content) {\r\n        console.error('Invalid response format from caption generation:', response);\r\n        return {\r\n          success: false,\r\n          error: 'Invalid response format from server'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        content: response.content,\r\n        ...response\r\n      };\r\n    } catch (error) {\r\n      console.error('Error generating Instagram caption:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Failed to generate caption',\r\n        details: error.response?.data || error.toString()\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateCaptionWithStrategy(customStrategy, context = \"\", maxLength = 2000) {\r\n    const response = await this.request('/social/generate-caption-with-strategy', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        custom_strategy: customStrategy,\r\n        context: context,\r\n        max_length: maxLength\r\n      }),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  async generateFacebookCaptionWithStrategy(customStrategy, context = \"\", maxLength = 2000) {\r\n    const response = await this.request('/social/facebook/generate-caption-with-strategy', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        custom_strategy: customStrategy,\r\n        context: context,\r\n        max_length: maxLength\r\n      }),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  async generateFacebookBulkCaptions(customStrategy, contexts, maxLength = 2000) {\r\n    const response = await this.request('/social/facebook/generate-bulk-captions', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        custom_strategy: customStrategy,\r\n        contexts: contexts,\r\n        max_length: maxLength\r\n      }),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  async generateBulkCaptions(customStrategy, contexts, maxLength = 2000) {\r\n    const response = await this.request('/social/generate-bulk-captions', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        custom_strategy: customStrategy,\r\n        contexts: contexts,\r\n        max_length: maxLength\r\n      }),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  // Generate Instagram carousel\r\n  async generateInstagramCarousel(prompt, count = 3) {\r\n    const response = await this.request('/social/instagram/generate-carousel', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        prompt: prompt,\r\n        count: count\r\n      }),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  // Post Instagram carousel\r\n  async postInstagramCarousel(instagramUserId, caption, imageUrls) {\r\n    const response = await this.request('/social/instagram/post-carousel', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        instagram_user_id: instagramUserId,\r\n        caption: caption,\r\n        image_urls: imageUrls\r\n      }),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  // Unified Facebook post creation endpoint\r\n  async createFacebookPost(pageId, options = {}) {\r\n    return this.request('/social/facebook/create-post', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        page_id: pageId,\r\n        message: options.message,\r\n        image_url: options.image_url,\r\n        post_type: options.post_type || 'feed',\r\n        use_ai: options.use_ai || false,\r\n        prompt: options.prompt,\r\n        scheduled_time: options.scheduled_time,\r\n        carousel_images: options.carousel_images || [],\r\n        video_url: options.video_url,\r\n        location: options.location,\r\n        hashtags: options.hashtags\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Stability AI Image Generation endpoint (standalone)\r\n  async generateFacebookImage(imagePrompt, postType = 'feed') {\r\n    return this.request('/social/facebook/generate-image', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        prompt: imagePrompt,\r\n        post_type: postType\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Get AI service status including Stability AI\r\n  async getAIServiceStatus() {\r\n    return this.request('/ai/status');\r\n  }\r\n\r\n  // Debug endpoint for Stability AI troubleshooting\r\n  async debugStabilityAI() {\r\n    return this.request('/social/debug/stability-ai-status');\r\n  }\r\n\r\n  // Debug endpoint for testing Facebook image posts\r\n  async debugFacebookImagePost(pageId, message = \"Test post from debug\") {\r\n    return this.request('/social/facebook/debug-image-post', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        page_id: pageId,\r\n        message: message\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Bulk Composer - Schedule multiple posts\r\n  async bulkSchedulePosts(requestData) {\r\n    const response = await this.request('/social/bulk-composer/schedule', {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestData),\r\n    });\r\n    return response;\r\n  }\r\n\r\n  // Notification endpoints\r\n  async getNotifications(limit = 50, offset = 0) {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', limit.toString());\r\n    params.append('offset', offset.toString());\r\n    \r\n    return this.request(`/notifications?${params.toString()}`);\r\n  }\r\n\r\n  async markNotificationRead(notificationId) {\r\n    return this.request(`/notifications/${notificationId}/mark-read`, {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async markAllNotificationsRead() {\r\n    return this.request('/notifications/mark-all-read', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async getNotificationPreferences() {\r\n    return this.request('/notification-preferences');\r\n  }\r\n\r\n  async updateNotificationPreferences(preferences) {\r\n    return this.request('/notification-preferences', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(preferences),\r\n    });\r\n  }\r\n\r\n  async testNotification() {\r\n    return this.request('/test-notification', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // Bulk Composer - Schedule multiple posts for Instagram\r\n  async bulkScheduleInstagramPosts({ social_account_id, posts }) {\r\n    // Send social_account_id as a query param, posts as the body\r\n    return this.request(`/social/instagram/bulk-schedule?social_account_id=${encodeURIComponent(social_account_id)}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(posts),\r\n    });\r\n  }\r\n\r\n  // Bulk Composer - Get scheduled posts\r\n  async getBulkComposerContent(socialAccountId = null) {\r\n    let endpoint = '/social/bulk-composer/content';\r\n    if (socialAccountId) {\r\n      endpoint += `?social_account_id=${socialAccountId}`;\r\n    }\r\n    return this.request(endpoint);\r\n  }\r\n\r\n  // Bulk Composer - Update post caption\r\n  async updateBulkComposerPost(postId, caption) {\r\n    return this.request(`/social/bulk-composer/content/${postId}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        caption: caption\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Bulk Composer - Cancel/delete scheduled post\r\n  async cancelBulkComposerPost(postId) {\r\n    return this.request(`/social/bulk-composer/content/${postId}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  // LinkedIn endpoints\r\n  async getLinkedInStatus() {\r\n    return this.request('/social/linkedin/status');\r\n  }\r\n\r\n  async getLinkedInConfig() {\r\n    return this.request('/social/linkedin/config');\r\n  }\r\n\r\n  async connectLinkedIn(data) {\r\n    return this.request('/social/linkedin/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  async exchangeLinkedInCode(code) {\r\n    return this.request('/social/linkedin/exchange-code', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ code }),\r\n    });\r\n  }\r\n\r\n  async disconnectLinkedIn() {\r\n    return this.request('/social/linkedin/disconnect', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async refreshLinkedInTokens() {\r\n    return this.request('/social/linkedin/refresh-tokens', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // Get Instagram DM auto-reply status\r\n  async getInstagramDmAutoReplyStatus(instagramUserId) {\r\n    return this.request(`/social/instagram/dm-auto-reply/status/${instagramUserId}`);\r\n  }\r\n\r\n  // Enable global Instagram auto-reply\r\n  async enableGlobalInstagramAutoReply(instagramUserId) {\r\n    return this.request(`/social/instagram/auto_reply/global/enable?instagram_user_id=${instagramUserId}`, {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  // Disable global Instagram auto-reply\r\n  async disableGlobalInstagramAutoReply(instagramUserId) {\r\n    return this.request(`/social/instagram/auto_reply/global/disable?instagram_user_id=${instagramUserId}`, {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  // Get global auto-reply status\r\n  async getGlobalInstagramAutoReplyStatus(instagramUserId) {\r\n    return this.request(`/social/instagram/auto_reply/global/status?instagram_user_id=${instagramUserId}`);\r\n  }\r\n\r\n  // Get global auto-reply progress\r\n  async getGlobalInstagramAutoReplyProgress(instagramUserId) {\r\n    return this.request(`/social/instagram/auto_reply/global/progress?instagram_user_id=${instagramUserId}`);\r\n  }\r\n\r\n  async getScheduledPosts() {\r\n    // Adjust the endpoint if your backend uses a different path\r\n    return this.request('/social/scheduled-posts');\r\n  }\r\n\r\n  async updateScheduledPost(postId, updatedData) {\r\n    return this.request(`/social/scheduled-posts/${postId}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updatedData)\r\n    });\r\n  }\r\n\r\n  async deleteScheduledPost(postId) {\r\n    return this.request(`/social/scheduled-posts/${postId}`, {\r\n      method: 'DELETE'\r\n    });\r\n  }\r\n}\r\n\r\nconst apiClient = new ApiClient();\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}