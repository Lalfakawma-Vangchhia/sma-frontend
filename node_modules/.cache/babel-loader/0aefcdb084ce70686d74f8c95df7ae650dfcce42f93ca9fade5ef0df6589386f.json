{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THORSIGNIA\\\\Projects\\\\automation-dash\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const [permissions, setPermissions] = useState({\n    granted: false,\n    prePosting: true,\n    success: true,\n    failure: true\n  });\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [websocket, setWebsocket] = useState(null);\n\n  // Load preferences from localStorage on mount\n  useEffect(() => {\n    const savedPermissions = localStorage.getItem('notificationPermissions');\n    if (savedPermissions) {\n      setPermissions(JSON.parse(savedPermissions));\n    }\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsed = JSON.parse(savedNotifications);\n      setNotifications(parsed);\n      setUnreadCount(parsed.filter(n => !n.isRead).length);\n    }\n  }, []);\n\n  // Save permissions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notificationPermissions', JSON.stringify(permissions));\n  }, [permissions]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request browser notification permissions\n  const requestPermissions = useCallback(async () => {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n    try {\n      const permission = await Notification.requestPermission();\n      const granted = permission === 'granted';\n      setPermissions(prev => ({\n        ...prev,\n        granted\n      }));\n      if (granted) {\n        // Test notification\n        new Notification('Notifications Enabled!', {\n          body: 'You will now receive alerts about your scheduled posts.',\n          icon: '/favicon.ico'\n        });\n      }\n      return granted;\n    } catch (error) {\n      console.error('Error requesting notification permissions:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new notification\n  const addNotification = useCallback(notification => {\n    console.log('üîî Adding notification:', notification);\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Keep only last 100 notifications\n      const result = updated.slice(0, 100);\n      console.log(`üìä Updated notifications: ${result.length} total`);\n      return result;\n    });\n    setUnreadCount(prev => {\n      const newCount = prev + 1;\n      console.log(`üìà Updated unread count: ${newCount}`);\n      return newCount;\n    });\n\n    // Show browser notification if permissions granted and enabled\n    if (permissions.granted && shouldShowBrowserNotification(notification.type)) {\n      showBrowserNotification(newNotification);\n    }\n    return newNotification;\n  }, [permissions]);\n\n  // Check if browser notification should be shown based on user preferences\n  const shouldShowBrowserNotification = useCallback(type => {\n    switch (type) {\n      case 'pre_posting':\n        return permissions.prePosting;\n      case 'success':\n        return permissions.success;\n      case 'failure':\n        return permissions.failure;\n      default:\n        return true;\n    }\n  }, [permissions]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback(notification => {\n    if (!permissions.granted) return;\n    const options = {\n      body: notification.message,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: notification.id,\n      requireInteraction: notification.type === 'failure',\n      actions: notification.type === 'pre_posting' ? [{\n        action: 'edit',\n        title: 'Edit Post'\n      }, {\n        action: 'dismiss',\n        title: 'Dismiss'\n      }] : []\n    };\n    const browserNotification = new Notification(`${notification.platform.toUpperCase()} - ${notification.strategyName}`, options);\n    browserNotification.onclick = () => {\n      handleNotificationClick(notification);\n      browserNotification.close();\n    };\n\n    // Auto-close after 10 seconds for non-failure notifications\n    if (notification.type !== 'failure') {\n      setTimeout(() => browserNotification.close(), 10000);\n    }\n  }, [permissions]);\n\n  // Handle notification click\n  const handleNotificationClick = useCallback(notification => {\n    // Mark as read\n    markAsRead(notification.id);\n\n    // Navigate based on notification type\n    switch (notification.type) {\n      case 'pre_posting':\n      case 'failure':\n        // Navigate to bulk composer\n        if (notification.platform === 'facebook') {\n          window.location.href = '/facebook';\n        } else if (notification.platform === 'instagram') {\n          window.location.href = '/instagram';\n        }\n        break;\n      case 'success':\n        // Navigate to social media dashboard or specific post\n        window.location.href = `/${notification.platform}`;\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // Mark notification as read\n  const markAsRead = useCallback(notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      isRead: true\n    } : notification));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      isRead: true\n    })));\n    setUnreadCount(0);\n  }, []);\n\n  // Update notification preferences\n  const updatePreferences = useCallback(async newPreferences => {\n    setPermissions(prev => ({\n      ...prev,\n      ...newPreferences\n    }));\n\n    // Save to backend if user is authenticated\n    try {\n      await apiClient.updateNotificationPreferences(newPreferences);\n    } catch (error) {\n      console.error('Failed to save notification preferences:', error);\n    }\n  }, []);\n\n  // Setup WebSocket connection for real-time notifications\n  const setupWebSocket = useCallback(() => {\n    if (websocket) return;\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('No auth token found, skipping WebSocket setup');\n      return;\n    }\n\n    // Determine the correct WebSocket protocol based on the current page protocol\n    const isSecure = window.location.protocol === 'https:';\n    const wsProtocol = isSecure ? 'wss:' : 'ws:';\n    const wsUrl = process.env.REACT_APP_WS_URL || `${wsProtocol}//localhost:8000`;\n    const fullWsUrl = `${wsUrl}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('üîå Current page protocol:', window.location.protocol);\n    console.log('üîå Using WebSocket protocol:', wsProtocol);\n    console.log('üîå Attempting WebSocket connection to:', fullWsUrl);\n    console.log('üîå Token length:', token.length);\n    console.log('üîå Token preview:', token.substring(0, 50) + '...');\n    const ws = new WebSocket(fullWsUrl);\n    ws.onopen = () => {\n      console.log('‚úÖ WebSocket connected for notifications');\n      setWebsocket(ws);\n\n      // Send periodic ping messages to keep connection alive\n      const pingInterval = setInterval(() => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: 'ping',\n            timestamp: new Date().toISOString()\n          }));\n        } else {\n          clearInterval(pingInterval);\n        }\n      }, 30000); // Ping every 30 seconds\n\n      // Store interval ID for cleanup\n      ws.pingInterval = pingInterval;\n    };\n    ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® WebSocket message received:', data);\n        if (data.type === 'connection_established') {\n          console.log('‚úÖ WebSocket connection confirmed by server');\n        } else if (data.type === 'pong') {\n          console.debug('üèì Received pong from server');\n        } else if (data.type === 'notification' && data.notification) {\n          // Transform WebSocket notification to frontend format\n          const transformedNotification = {\n            id: data.notification.id,\n            type: data.notification.type,\n            platform: data.notification.platform,\n            strategyName: data.notification.strategyName,\n            message: data.notification.message,\n            isRead: data.notification.isRead,\n            timestamp: data.notification.timestamp,\n            scheduledTime: data.notification.scheduledTime,\n            error: data.notification.error,\n            postId: data.notification.postId\n          };\n          addNotification(transformedNotification);\n        } else {\n          console.warn('‚ö†Ô∏è WebSocket message with unknown type:', data);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n        console.error('Raw event data:', event.data);\n      }\n    };\n    ws.onclose = event => {\n      console.warn('‚ùå WebSocket closed:', event.code, event.reason);\n      console.warn('‚ùå WebSocket close details:', {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean,\n        type: event.type\n      });\n\n      // Clear ping interval\n      if (ws.pingInterval) {\n        clearInterval(ws.pingInterval);\n      }\n      setWebsocket(null);\n      // Reconnect after 5 seconds\n      setTimeout(() => {\n        console.log('üîÑ Attempting WebSocket reconnection...');\n        setupWebSocket();\n      }, 5000);\n    };\n    ws.onerror = error => {\n      console.error('‚ùå WebSocket error:', error);\n      if (error && error.target && error.target.url) {\n        console.error('‚ùå WebSocket URL:', error.target.url);\n      }\n      if (error.message) {\n        console.error('‚ùå WebSocket error message:', error.message);\n      }\n      console.error('‚ùå WebSocket error details:', {\n        type: error.type,\n        target: error.target,\n        currentTarget: error.currentTarget,\n        eventPhase: error.eventPhase,\n        bubbles: error.bubbles,\n        cancelable: error.cancelable,\n        defaultPrevented: error.defaultPrevented,\n        isTrusted: error.isTrusted,\n        timeStamp: error.timeStamp\n      });\n      // Don't close immediately, let the onclose handler deal with reconnection\n    };\n  }, [websocket, addNotification]);\n\n  // Cleanup WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [websocket]);\n\n  // Load notifications from backend\n  const loadNotifications = useCallback(async () => {\n    try {\n      console.log('üîÑ Loading notifications from backend...');\n      const response = await apiClient.getNotifications();\n      console.log('üì® Notifications response:', response);\n      if (response && response.success && Array.isArray(response.data)) {\n        console.log('üìä Raw notifications data:', response.data);\n\n        // Transform backend data to frontend format\n        const transformedNotifications = response.data.map(notification => {\n          const transformed = {\n            id: notification.id,\n            type: notification.type,\n            platform: notification.platform,\n            strategyName: notification.strategy_name,\n            message: notification.message,\n            isRead: notification.is_read,\n            timestamp: notification.created_at,\n            scheduledTime: notification.scheduled_time,\n            error: notification.error_message,\n            postId: notification.post_id\n          };\n          console.log('üîÑ Transformed notification:', transformed);\n          return transformed;\n        });\n        console.log('üìã Final transformed notifications:', transformedNotifications);\n        setNotifications(transformedNotifications);\n        const unreadCount = transformedNotifications.filter(n => !n.isRead).length;\n        setUnreadCount(unreadCount);\n        console.log(`‚úÖ Loaded ${transformedNotifications.length} notifications, ${unreadCount} unread`);\n      } else {\n        console.error('‚ùå Failed to load notifications: Invalid or missing data', response);\n        setNotifications([]);\n        setUnreadCount(0);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to load notifications:', error);\n      if (error.response) {\n        console.error('‚ùå Backend error response:', error.response);\n      }\n      if (error.stack) {\n        console.error('‚ùå Error stack:', error.stack);\n      }\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  }, []);\n\n  // Initialize notifications and WebSocket when user is authenticated\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      loadNotifications();\n      setupWebSocket();\n    }\n  }, [loadNotifications, setupWebSocket]);\n\n  // Check if user should see permission modal\n  const checkPermissionModal = useCallback(() => {\n    const hasSeenModal = localStorage.getItem('hasSeenNotificationModal');\n    const token = localStorage.getItem('authToken');\n    if (token && !hasSeenModal && !permissions.granted) {\n      setShowPermissionModal(true);\n    }\n  }, [permissions.granted]);\n\n  // Listen for login events\n  useEffect(() => {\n    const handleUserLogin = () => {\n      setTimeout(() => {\n        checkPermissionModal();\n      }, 500);\n    };\n    window.addEventListener('userLoggedIn', handleUserLogin);\n    return () => window.removeEventListener('userLoggedIn', handleUserLogin);\n  }, [checkPermissionModal]);\n\n  // Handle permission modal response\n  const handlePermissionAllow = useCallback(async () => {\n    const granted = await requestPermissions();\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    if (granted) {\n      // Load user preferences from backend\n      try {\n        const response = await apiClient.getNotificationPreferences();\n        if (response.success) {\n          setPermissions(prev => ({\n            ...prev,\n            ...response.data\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to load notification preferences:', error);\n      }\n    }\n  }, [requestPermissions]);\n  const handlePermissionBlock = useCallback(() => {\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    setPermissions(prev => ({\n      ...prev,\n      granted: false\n    }));\n  }, []);\n\n  // Test notification function for debugging\n  const testNotification = useCallback(() => {\n    addNotification({\n      type: 'success',\n      platform: 'instagram',\n      strategyName: 'Test Notification',\n      message: 'This is a test notification to verify the system is working!',\n      timestamp: new Date().toISOString()\n    });\n  }, [addNotification]);\n\n  // Test WebSocket connection function\n  const testWebSocketConnection = useCallback(() => {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('‚ùå No auth token found for WebSocket test');\n      return;\n    }\n\n    // Use the same protocol logic as setupWebSocket\n    const isSecure = window.location.protocol === 'https:';\n    const wsProtocol = isSecure ? 'wss:' : 'ws:';\n    const wsUrl = process.env.REACT_APP_WS_URL || `${wsProtocol}//localhost:8000`;\n    const fullWsUrl = `${wsUrl}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('üß™ Testing WebSocket connection to:', fullWsUrl);\n    const testWs = new WebSocket(fullWsUrl);\n    testWs.onopen = () => {\n      console.log('‚úÖ Test WebSocket connection successful');\n      testWs.close();\n    };\n    testWs.onerror = error => {\n      console.error('‚ùå Test WebSocket connection failed:', error);\n    };\n    testWs.onclose = event => {\n      console.log('üîå Test WebSocket connection closed:', event.code, event.reason);\n    };\n  }, []);\n\n  // Test API connection function\n  const testApiConnection = useCallback(async () => {\n    try {\n      console.log('üß™ Testing API connection...');\n      const response = await apiClient.getNotifications();\n      console.log('‚úÖ API test response:', response);\n      if (response && response.success) {\n        console.log(`‚úÖ API test successful: ${response.data.length} notifications found`);\n      } else {\n        console.error('‚ùå API test failed:', (response === null || response === void 0 ? void 0 : response.error) || 'Unknown error');\n      }\n    } catch (error) {\n      console.error('‚ùå API test error:', error);\n    }\n  }, []);\n\n  // Test simple WebSocket connection function\n  const testSimpleWebSocket = useCallback(() => {\n    console.log('üß™ Testing simple WebSocket connection...');\n    // Use the same protocol logic as setupWebSocket\n    const isSecure = window.location.protocol === 'https:';\n    const wsProtocol = isSecure ? 'wss:' : 'ws:';\n    const wsUrl = process.env.REACT_APP_WS_URL || `${wsProtocol}//localhost:8000`;\n    const fullWsUrl = `${wsUrl}/api/ws/test`;\n    console.log('üîå Simple WebSocket URL:', fullWsUrl);\n    const testWs = new WebSocket(fullWsUrl);\n    testWs.onopen = () => {\n      console.log('‚úÖ Simple WebSocket connection successful');\n      testWs.send('Hello from frontend!');\n    };\n    testWs.onmessage = event => {\n      console.log('üì® Simple WebSocket message received:', event.data);\n    };\n    testWs.onerror = error => {\n      console.error('‚ùå Simple WebSocket connection failed:', error);\n    };\n    testWs.onclose = event => {\n      console.log('üîå Simple WebSocket connection closed:', event.code, event.reason);\n    };\n  }, []);\n  const value = {\n    notifications,\n    unreadCount,\n    permissions,\n    isNotificationCenterOpen,\n    showPermissionModal,\n    setIsNotificationCenterOpen,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    updatePreferences,\n    requestPermissions,\n    handleNotificationClick,\n    checkPermissionModal,\n    handlePermissionAllow,\n    handlePermissionBlock,\n    loadNotifications,\n    testNotification,\n    testWebSocketConnection,\n    testApiConnection,\n    testSimpleWebSocket,\n    refreshNotifications: loadNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 564,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"aAPYzwE6SFgL8brYSRGdsb53SgI=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","apiClient","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","isNotificationCenterOpen","setIsNotificationCenterOpen","permissions","setPermissions","granted","prePosting","success","failure","showPermissionModal","setShowPermissionModal","websocket","setWebsocket","savedPermissions","localStorage","getItem","JSON","parse","savedNotifications","parsed","filter","n","isRead","length","setItem","stringify","requestPermissions","window","console","warn","permission","Notification","requestPermission","prev","body","icon","error","addNotification","notification","log","newNotification","id","Date","now","toString","timestamp","updated","result","slice","newCount","shouldShowBrowserNotification","type","showBrowserNotification","options","message","badge","tag","requireInteraction","actions","action","title","browserNotification","platform","toUpperCase","strategyName","onclick","handleNotificationClick","close","setTimeout","markAsRead","location","href","notificationId","map","Math","max","markAllAsRead","updatePreferences","newPreferences","updateNotificationPreferences","setupWebSocket","token","isSecure","protocol","wsProtocol","wsUrl","process","env","REACT_APP_WS_URL","fullWsUrl","encodeURIComponent","substring","ws","WebSocket","onopen","pingInterval","setInterval","readyState","OPEN","send","toISOString","clearInterval","onmessage","event","data","debug","transformedNotification","scheduledTime","postId","onclose","code","reason","wasClean","onerror","target","url","currentTarget","eventPhase","bubbles","cancelable","defaultPrevented","isTrusted","timeStamp","loadNotifications","response","getNotifications","Array","isArray","transformedNotifications","transformed","strategy_name","is_read","created_at","scheduled_time","error_message","post_id","stack","checkPermissionModal","hasSeenModal","handleUserLogin","addEventListener","removeEventListener","handlePermissionAllow","getNotificationPreferences","handlePermissionBlock","testNotification","testWebSocketConnection","testWs","testApiConnection","testSimpleWebSocket","value","refreshNotifications","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/THORSIGNIA/Projects/automation-dash/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const [permissions, setPermissions] = useState({\n    granted: false,\n    prePosting: true,\n    success: true,\n    failure: true\n  });\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [websocket, setWebsocket] = useState(null);\n\n  // Load preferences from localStorage on mount\n  useEffect(() => {\n    const savedPermissions = localStorage.getItem('notificationPermissions');\n    if (savedPermissions) {\n      setPermissions(JSON.parse(savedPermissions));\n    }\n\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsed = JSON.parse(savedNotifications);\n      setNotifications(parsed);\n      setUnreadCount(parsed.filter(n => !n.isRead).length);\n    }\n  }, []);\n\n  // Save permissions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notificationPermissions', JSON.stringify(permissions));\n  }, [permissions]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request browser notification permissions\n  const requestPermissions = useCallback(async () => {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      const granted = permission === 'granted';\n      \n      setPermissions(prev => ({ ...prev, granted }));\n      \n      if (granted) {\n        // Test notification\n        new Notification('Notifications Enabled!', {\n          body: 'You will now receive alerts about your scheduled posts.',\n          icon: '/favicon.ico'\n        });\n      }\n      \n      return granted;\n    } catch (error) {\n      console.error('Error requesting notification permissions:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new notification\n  const addNotification = useCallback((notification) => {\n    console.log('üîî Adding notification:', notification);\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Keep only last 100 notifications\n      const result = updated.slice(0, 100);\n      console.log(`üìä Updated notifications: ${result.length} total`);\n      return result;\n    });\n\n    setUnreadCount(prev => {\n      const newCount = prev + 1;\n      console.log(`üìà Updated unread count: ${newCount}`);\n      return newCount;\n    });\n\n    // Show browser notification if permissions granted and enabled\n    if (permissions.granted && shouldShowBrowserNotification(notification.type)) {\n      showBrowserNotification(newNotification);\n    }\n\n    return newNotification;\n  }, [permissions]);\n\n  // Check if browser notification should be shown based on user preferences\n  const shouldShowBrowserNotification = useCallback((type) => {\n    switch (type) {\n      case 'pre_posting':\n        return permissions.prePosting;\n      case 'success':\n        return permissions.success;\n      case 'failure':\n        return permissions.failure;\n      default:\n        return true;\n    }\n  }, [permissions]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback((notification) => {\n    if (!permissions.granted) return;\n\n    const options = {\n      body: notification.message,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: notification.id,\n      requireInteraction: notification.type === 'failure',\n      actions: notification.type === 'pre_posting' ? [\n        { action: 'edit', title: 'Edit Post' },\n        { action: 'dismiss', title: 'Dismiss' }\n      ] : []\n    };\n\n    const browserNotification = new Notification(\n      `${notification.platform.toUpperCase()} - ${notification.strategyName}`,\n      options\n    );\n\n    browserNotification.onclick = () => {\n      handleNotificationClick(notification);\n      browserNotification.close();\n    };\n\n    // Auto-close after 10 seconds for non-failure notifications\n    if (notification.type !== 'failure') {\n      setTimeout(() => browserNotification.close(), 10000);\n    }\n  }, [permissions]);\n\n  // Handle notification click\n  const handleNotificationClick = useCallback((notification) => {\n    // Mark as read\n    markAsRead(notification.id);\n    \n    // Navigate based on notification type\n    switch (notification.type) {\n      case 'pre_posting':\n      case 'failure':\n        // Navigate to bulk composer\n        if (notification.platform === 'facebook') {\n          window.location.href = '/facebook';\n        } else if (notification.platform === 'instagram') {\n          window.location.href = '/instagram';\n        }\n        break;\n      case 'success':\n        // Navigate to social media dashboard or specific post\n        window.location.href = `/${notification.platform}`;\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // Mark notification as read\n  const markAsRead = useCallback((notificationId) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, isRead: true }\n          : notification\n      )\n    );\n    \n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, isRead: true }))\n    );\n    setUnreadCount(0);\n  }, []);\n\n  // Update notification preferences\n  const updatePreferences = useCallback(async (newPreferences) => {\n    setPermissions(prev => ({ ...prev, ...newPreferences }));\n    \n    // Save to backend if user is authenticated\n    try {\n      await apiClient.updateNotificationPreferences(newPreferences);\n    } catch (error) {\n      console.error('Failed to save notification preferences:', error);\n    }\n  }, []);\n\n  // Setup WebSocket connection for real-time notifications\n  const setupWebSocket = useCallback(() => {\n    if (websocket) return;\n\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('No auth token found, skipping WebSocket setup');\n      return;\n    }\n\n    // Determine the correct WebSocket protocol based on the current page protocol\n    const isSecure = window.location.protocol === 'https:';\n    const wsProtocol = isSecure ? 'wss:' : 'ws:';\n    const wsUrl = process.env.REACT_APP_WS_URL || `${wsProtocol}//localhost:8000`;\n    const fullWsUrl = `${wsUrl}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    \n    console.log('üîå Current page protocol:', window.location.protocol);\n    console.log('üîå Using WebSocket protocol:', wsProtocol);\n    console.log('üîå Attempting WebSocket connection to:', fullWsUrl);\n    console.log('üîå Token length:', token.length);\n    console.log('üîå Token preview:', token.substring(0, 50) + '...');\n    \n    const ws = new WebSocket(fullWsUrl);\n\n    ws.onopen = () => {\n      console.log('‚úÖ WebSocket connected for notifications');\n      setWebsocket(ws);\n      \n      // Send periodic ping messages to keep connection alive\n      const pingInterval = setInterval(() => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({ type: 'ping', timestamp: new Date().toISOString() }));\n        } else {\n          clearInterval(pingInterval);\n        }\n      }, 30000); // Ping every 30 seconds\n      \n      // Store interval ID for cleanup\n      ws.pingInterval = pingInterval;\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® WebSocket message received:', data);\n        \n        if (data.type === 'connection_established') {\n          console.log('‚úÖ WebSocket connection confirmed by server');\n        } else if (data.type === 'pong') {\n          console.debug('üèì Received pong from server');\n        } else if (data.type === 'notification' && data.notification) {\n          // Transform WebSocket notification to frontend format\n          const transformedNotification = {\n            id: data.notification.id,\n            type: data.notification.type,\n            platform: data.notification.platform,\n            strategyName: data.notification.strategyName,\n            message: data.notification.message,\n            isRead: data.notification.isRead,\n            timestamp: data.notification.timestamp,\n            scheduledTime: data.notification.scheduledTime,\n            error: data.notification.error,\n            postId: data.notification.postId\n          };\n          addNotification(transformedNotification);\n        } else {\n          console.warn('‚ö†Ô∏è WebSocket message with unknown type:', data);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n        console.error('Raw event data:', event.data);\n      }\n    };\n\n    ws.onclose = (event) => {\n      console.warn('‚ùå WebSocket closed:', event.code, event.reason);\n      console.warn('‚ùå WebSocket close details:', {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean,\n        type: event.type\n      });\n      \n      // Clear ping interval\n      if (ws.pingInterval) {\n        clearInterval(ws.pingInterval);\n      }\n      \n      setWebsocket(null);\n      // Reconnect after 5 seconds\n      setTimeout(() => {\n        console.log('üîÑ Attempting WebSocket reconnection...');\n        setupWebSocket();\n      }, 5000);\n    };\n\n    ws.onerror = (error) => {\n      console.error('‚ùå WebSocket error:', error);\n      if (error && error.target && error.target.url) {\n        console.error('‚ùå WebSocket URL:', error.target.url);\n      }\n      if (error.message) {\n        console.error('‚ùå WebSocket error message:', error.message);\n      }\n      console.error('‚ùå WebSocket error details:', {\n        type: error.type,\n        target: error.target,\n        currentTarget: error.currentTarget,\n        eventPhase: error.eventPhase,\n        bubbles: error.bubbles,\n        cancelable: error.cancelable,\n        defaultPrevented: error.defaultPrevented,\n        isTrusted: error.isTrusted,\n        timeStamp: error.timeStamp\n      });\n      // Don't close immediately, let the onclose handler deal with reconnection\n    };\n  }, [websocket, addNotification]);\n\n  // Cleanup WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [websocket]);\n\n  // Load notifications from backend\n  const loadNotifications = useCallback(async () => {\n    try {\n      console.log('üîÑ Loading notifications from backend...');\n      const response = await apiClient.getNotifications();\n      console.log('üì® Notifications response:', response);\n      \n      if (response && response.success && Array.isArray(response.data)) {\n        console.log('üìä Raw notifications data:', response.data);\n        \n        // Transform backend data to frontend format\n        const transformedNotifications = response.data.map(notification => {\n          const transformed = {\n            id: notification.id,\n            type: notification.type,\n            platform: notification.platform,\n            strategyName: notification.strategy_name,\n            message: notification.message,\n            isRead: notification.is_read,\n            timestamp: notification.created_at,\n            scheduledTime: notification.scheduled_time,\n            error: notification.error_message,\n            postId: notification.post_id\n          };\n          console.log('üîÑ Transformed notification:', transformed);\n          return transformed;\n        });\n        \n        console.log('üìã Final transformed notifications:', transformedNotifications);\n        setNotifications(transformedNotifications);\n        const unreadCount = transformedNotifications.filter(n => !n.isRead).length;\n        setUnreadCount(unreadCount);\n        console.log(`‚úÖ Loaded ${transformedNotifications.length} notifications, ${unreadCount} unread`);\n      } else {\n        console.error('‚ùå Failed to load notifications: Invalid or missing data', response);\n        setNotifications([]);\n        setUnreadCount(0);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to load notifications:', error);\n      if (error.response) {\n        console.error('‚ùå Backend error response:', error.response);\n      }\n      if (error.stack) {\n        console.error('‚ùå Error stack:', error.stack);\n      }\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  }, []);\n\n  // Initialize notifications and WebSocket when user is authenticated\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      loadNotifications();\n      setupWebSocket();\n    }\n  }, [loadNotifications, setupWebSocket]);\n\n  // Check if user should see permission modal\n  const checkPermissionModal = useCallback(() => {\n    const hasSeenModal = localStorage.getItem('hasSeenNotificationModal');\n    const token = localStorage.getItem('authToken');\n    \n    if (token && !hasSeenModal && !permissions.granted) {\n      setShowPermissionModal(true);\n    }\n  }, [permissions.granted]);\n\n  // Listen for login events\n  useEffect(() => {\n    const handleUserLogin = () => {\n      setTimeout(() => {\n        checkPermissionModal();\n      }, 500);\n    };\n\n    window.addEventListener('userLoggedIn', handleUserLogin);\n    return () => window.removeEventListener('userLoggedIn', handleUserLogin);\n  }, [checkPermissionModal]);\n\n  // Handle permission modal response\n  const handlePermissionAllow = useCallback(async () => {\n    const granted = await requestPermissions();\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    \n    if (granted) {\n      // Load user preferences from backend\n      try {\n        const response = await apiClient.getNotificationPreferences();\n        if (response.success) {\n          setPermissions(prev => ({ ...prev, ...response.data }));\n        }\n      } catch (error) {\n        console.error('Failed to load notification preferences:', error);\n      }\n    }\n  }, [requestPermissions]);\n\n  const handlePermissionBlock = useCallback(() => {\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    setPermissions(prev => ({ ...prev, granted: false }));\n  }, []);\n\n  // Test notification function for debugging\n  const testNotification = useCallback(() => {\n    addNotification({\n      type: 'success',\n      platform: 'instagram',\n      strategyName: 'Test Notification',\n      message: 'This is a test notification to verify the system is working!',\n      timestamp: new Date().toISOString()\n    });\n  }, [addNotification]);\n\n  // Test WebSocket connection function\n  const testWebSocketConnection = useCallback(() => {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('‚ùå No auth token found for WebSocket test');\n      return;\n    }\n\n    // Use the same protocol logic as setupWebSocket\n    const isSecure = window.location.protocol === 'https:';\n    const wsProtocol = isSecure ? 'wss:' : 'ws:';\n    const wsUrl = process.env.REACT_APP_WS_URL || `${wsProtocol}//localhost:8000`;\n    const fullWsUrl = `${wsUrl}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('üß™ Testing WebSocket connection to:', fullWsUrl);\n    \n    const testWs = new WebSocket(fullWsUrl);\n    \n    testWs.onopen = () => {\n      console.log('‚úÖ Test WebSocket connection successful');\n      testWs.close();\n    };\n    \n    testWs.onerror = (error) => {\n      console.error('‚ùå Test WebSocket connection failed:', error);\n    };\n    \n    testWs.onclose = (event) => {\n      console.log('üîå Test WebSocket connection closed:', event.code, event.reason);\n    };\n  }, []);\n\n  // Test API connection function\n  const testApiConnection = useCallback(async () => {\n    try {\n      console.log('üß™ Testing API connection...');\n      const response = await apiClient.getNotifications();\n      console.log('‚úÖ API test response:', response);\n      if (response && response.success) {\n        console.log(`‚úÖ API test successful: ${response.data.length} notifications found`);\n      } else {\n        console.error('‚ùå API test failed:', response?.error || 'Unknown error');\n      }\n    } catch (error) {\n      console.error('‚ùå API test error:', error);\n    }\n  }, []);\n\n  // Test simple WebSocket connection function\n  const testSimpleWebSocket = useCallback(() => {\n    console.log('üß™ Testing simple WebSocket connection...');\n    // Use the same protocol logic as setupWebSocket\n    const isSecure = window.location.protocol === 'https:';\n    const wsProtocol = isSecure ? 'wss:' : 'ws:';\n    const wsUrl = process.env.REACT_APP_WS_URL || `${wsProtocol}//localhost:8000`;\n    const fullWsUrl = `${wsUrl}/api/ws/test`;\n    console.log('üîå Simple WebSocket URL:', fullWsUrl);\n    \n    const testWs = new WebSocket(fullWsUrl);\n    \n    testWs.onopen = () => {\n      console.log('‚úÖ Simple WebSocket connection successful');\n      testWs.send('Hello from frontend!');\n    };\n    \n    testWs.onmessage = (event) => {\n      console.log('üì® Simple WebSocket message received:', event.data);\n    };\n    \n    testWs.onerror = (error) => {\n      console.error('‚ùå Simple WebSocket connection failed:', error);\n    };\n    \n    testWs.onclose = (event) => {\n      console.log('üîå Simple WebSocket connection closed:', event.code, event.reason);\n    };\n  }, []);\n\n  const value = {\n    notifications,\n    unreadCount,\n    permissions,\n    isNotificationCenterOpen,\n    showPermissionModal,\n    setIsNotificationCenterOpen,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    updatePreferences,\n    requestPermissions,\n    handleNotificationClick,\n    checkPermissionModal,\n    handlePermissionAllow,\n    handlePermissionBlock,\n    loadNotifications,\n    testNotification,\n    testWebSocketConnection,\n    testApiConnection,\n    testSimpleWebSocket,\n    refreshNotifications: loadNotifications\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}