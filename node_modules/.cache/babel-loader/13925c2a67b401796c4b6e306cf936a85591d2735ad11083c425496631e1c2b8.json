{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THORSIGNIA\\\\Projects\\\\automation-dash\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/apiClient';\nimport { useNotifications } from './NotificationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          // Always set token in API client first\n          apiClient.setToken(token);\n\n          // Verify token is still valid\n          const userData = await apiClient.getCurrentUser();\n          setUser(userData);\n          setIsAuthenticated(true);\n          console.log('‚úÖ Auth restored from localStorage');\n        } else {\n          console.log('‚ùå No auth token found in localStorage');\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        // Clear invalid token and reset state\n        localStorage.removeItem('authToken');\n        apiClient.setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n\n    // Listen for storage changes (token updates from other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'authToken') {\n        if (e.newValue) {\n          // Token was set in another tab\n          apiClient.setToken(e.newValue);\n          checkAuth();\n        } else {\n          // Token was removed in another tab\n          setUser(null);\n          setIsAuthenticated(false);\n          apiClient.setToken(null);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await apiClient.login(email, password);\n      setUser(response.user);\n      setIsAuthenticated(true);\n\n      // Trigger notification permission check after successful login\n      setTimeout(() => {\n        const event = new CustomEvent('userLoggedIn');\n        window.dispatchEvent(event);\n      }, 1000);\n      return response;\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await apiClient.register(userData);\n      return response;\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  };\n  const sendOTP = async email => {\n    try {\n      const response = await apiClient.sendOTP(email);\n      return response;\n    } catch (error) {\n      console.error('Send OTP failed:', error);\n      throw error;\n    }\n  };\n  const verifyOTP = async (email, otp) => {\n    try {\n      const response = await apiClient.verifyOTP(email, otp);\n      return response;\n    } catch (error) {\n      console.error('OTP verification failed:', error);\n      throw error;\n    }\n  };\n  const resendOTP = async email => {\n    try {\n      const response = await apiClient.resendOTP(email);\n      return response;\n    } catch (error) {\n      console.error('Resend OTP failed:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await apiClient.logout();\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n  const loginWithGoogle = async () => {\n    try {\n      // Get Google OAuth URL from backend\n      const response = await apiClient.getGoogleOAuthUrl();\n      const {\n        auth_url\n      } = response;\n      return new Promise((resolve, reject) => {\n        let isResolved = false;\n        let checkClosedInterval;\n        let timeoutId;\n        let popup;\n\n        // Listen for messages from the popup (sent by backend callback)\n        const messageListener = event => {\n          console.log('üîç Received message:', event.data, 'from origin:', event.origin);\n\n          // Accept messages from our backend origin (both HTTP and HTTPS), and wildcard '*' for dev\n          const allowedOrigins = ['http://localhost:8000', 'https://localhost:8000', window.location.origin];\n\n          // For development, also accept messages from any origin if they have the right structure\n          const isValidMessage = event.data && (event.data.success || event.data.error);\n          const isFromAllowedOrigin = allowedOrigins.includes(event.origin) || event.origin === 'null';\n          if (!isFromAllowedOrigin && !isValidMessage) {\n            console.log('üîç Ignoring message from unexpected origin:', event.origin);\n            return;\n          }\n          if (isResolved) {\n            console.log('üîç Message received but already resolved, ignoring');\n            return; // Prevent multiple resolutions\n          }\n\n          // Check if this is an OAuth success message\n          if (event.data && event.data.success && event.data.access_token) {\n            console.log('‚úÖ OAuth success received:', event.data);\n            isResolved = true;\n\n            // Clear intervals and timeouts\n            if (checkClosedInterval) {\n              clearInterval(checkClosedInterval);\n              checkClosedInterval = null;\n            }\n            if (timeoutId) {\n              clearTimeout(timeoutId);\n              timeoutId = null;\n            }\n\n            // Backend successfully processed OAuth and sent us the token\n            apiClient.setToken(event.data.access_token);\n            setUser(event.data.user);\n            setIsAuthenticated(true);\n\n            // Trigger notification permission check after successful Google login\n            setTimeout(() => {\n              const loginEvent = new CustomEvent('userLoggedIn');\n              window.dispatchEvent(loginEvent);\n            }, 1000);\n            window.removeEventListener('message', messageListener);\n\n            // Close popup with delay to ensure message processing\n            setTimeout(() => {\n              try {\n                if (popup && !popup.closed) popup.close();\n              } catch (e) {\n                console.warn('Could not close popup:', e);\n              }\n            }, 500);\n            resolve(event.data);\n          } else if (event.data && event.data.error) {\n            console.log('‚ùå OAuth error received:', event.data.error);\n            isResolved = true;\n\n            // Clear intervals and timeouts\n            if (checkClosedInterval) {\n              clearInterval(checkClosedInterval);\n              checkClosedInterval = null;\n            }\n            if (timeoutId) {\n              clearTimeout(timeoutId);\n              timeoutId = null;\n            }\n            window.removeEventListener('message', messageListener);\n            setTimeout(() => {\n              try {\n                if (popup && !popup.closed) popup.close();\n              } catch (e) {\n                console.warn('Could not close popup:', e);\n              }\n            }, 500);\n            reject(new Error(event.data.error));\n          } else {\n            console.log('üîç Received message with unexpected format:', event.data);\n          }\n        };\n\n        // Set up message listener BEFORE opening popup\n        window.addEventListener('message', messageListener);\n        console.log('üîç Message listener set up');\n\n        // Open popup window for Google OAuth\n        popup = window.open(auth_url, 'google-oauth', 'width=500,height=600,scrollbars=yes,resizable=yes');\n        if (!popup) {\n          window.removeEventListener('message', messageListener);\n          reject(new Error('Failed to open OAuth popup. Please allow popups for this site.'));\n          return;\n        }\n        console.log('üîç Popup opened successfully');\n\n        // Cleanup function\n        const cleanup = () => {\n          window.removeEventListener('message', messageListener);\n          if (checkClosedInterval) {\n            clearInterval(checkClosedInterval);\n            checkClosedInterval = null;\n          }\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n          }\n        };\n\n        // Handle popup closure detection - use longer delay to allow message processing\n        const checkClosed = () => {\n          try {\n            if (popup && popup.closed) {\n              if (!isResolved) {\n                console.log('üîç Popup was closed by user');\n\n                // Check localStorage for OAuth result as fallback\n                try {\n                  const oauthResult = localStorage.getItem('oauth_result');\n                  if (oauthResult) {\n                    console.log('üîç Found OAuth result in localStorage');\n                    const result = JSON.parse(oauthResult);\n                    localStorage.removeItem('oauth_result');\n                    if (result.success && result.access_token) {\n                      console.log('‚úÖ OAuth success from localStorage');\n                      isResolved = true;\n                      cleanup();\n                      apiClient.setToken(result.access_token);\n                      setUser(result.user);\n                      setIsAuthenticated(true);\n                      resolve(result);\n                      return;\n                    } else if (result.error) {\n                      console.log('‚ùå OAuth error from localStorage');\n                      isResolved = true;\n                      cleanup();\n                      reject(new Error(result.error));\n                      return;\n                    }\n                  }\n                } catch (e) {\n                  console.log('üîç No valid OAuth result in localStorage');\n                }\n\n                // Wait longer before rejecting to allow any pending message events\n                setTimeout(() => {\n                  if (!isResolved) {\n                    isResolved = true;\n                    cleanup();\n                    reject(new Error('OAuth popup was closed by user'));\n                  }\n                }, 3000); // Increased delay to 3 seconds\n              }\n              return;\n            }\n          } catch (error) {\n            // COOP policy blocks access - this is expected in secure contexts\n            console.log('üîç COOP policy active - relying on message listener for popup status');\n          }\n        };\n\n        // Check popup status less frequently to reduce COOP errors and allow more time for messages\n        checkClosedInterval = setInterval(checkClosed, 5000); // Check every 5 seconds\n\n        // Set a reasonable timeout for OAuth process\n        timeoutId = setTimeout(() => {\n          if (!isResolved) {\n            console.log('üîç OAuth timeout reached');\n            isResolved = true;\n            cleanup();\n            try {\n              if (popup && !popup.closed) popup.close();\n            } catch (e) {\n              console.warn('Could not close popup on timeout:', e);\n            }\n            reject(new Error('OAuth timeout - please ensure you accept the SSL certificate and try again'));\n          }\n        }, 300000); // 5 minutes to allow for certificate acceptance and debugging\n      });\n    } catch (error) {\n      console.error('Google OAuth failed:', error);\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    loginWithGoogle,\n    sendOTP,\n    verifyOTP,\n    resendOTP\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiClient","useNotifications","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuth","token","localStorage","getItem","setToken","userData","getCurrentUser","console","log","error","removeItem","handleStorageChange","e","key","newValue","window","addEventListener","removeEventListener","login","email","password","response","setTimeout","event","CustomEvent","dispatchEvent","register","sendOTP","verifyOTP","otp","resendOTP","logout","loginWithGoogle","getGoogleOAuthUrl","auth_url","Promise","resolve","reject","isResolved","checkClosedInterval","timeoutId","popup","messageListener","data","origin","allowedOrigins","location","isValidMessage","success","isFromAllowedOrigin","includes","access_token","clearInterval","clearTimeout","loginEvent","closed","close","warn","open","cleanup","checkClosed","oauthResult","result","JSON","parse","setInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/THORSIGNIA/Projects/automation-dash/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport apiClient from '../services/apiClient';\r\nimport { useNotifications } from './NotificationContext';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          // Always set token in API client first\r\n          apiClient.setToken(token);\r\n          \r\n          // Verify token is still valid\r\n          const userData = await apiClient.getCurrentUser();\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n          \r\n          console.log('‚úÖ Auth restored from localStorage');\r\n        } else {\r\n          console.log('‚ùå No auth token found in localStorage');\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check failed:', error);\r\n        // Clear invalid token and reset state\r\n        localStorage.removeItem('authToken');\r\n        apiClient.setToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n    \r\n    // Listen for storage changes (token updates from other tabs)\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === 'authToken') {\r\n        if (e.newValue) {\r\n          // Token was set in another tab\r\n          apiClient.setToken(e.newValue);\r\n          checkAuth();\r\n        } else {\r\n          // Token was removed in another tab\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          apiClient.setToken(null);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await apiClient.login(email, password);\r\n      setUser(response.user);\r\n      setIsAuthenticated(true);\r\n      \r\n      // Trigger notification permission check after successful login\r\n      setTimeout(() => {\r\n        const event = new CustomEvent('userLoggedIn');\r\n        window.dispatchEvent(event);\r\n      }, 1000);\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await apiClient.register(userData);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const sendOTP = async (email) => {\r\n    try {\r\n      const response = await apiClient.sendOTP(email);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Send OTP failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const verifyOTP = async (email, otp) => {\r\n    try {\r\n      const response = await apiClient.verifyOTP(email, otp);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('OTP verification failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resendOTP = async (email) => {\r\n    try {\r\n      const response = await apiClient.resendOTP(email);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Resend OTP failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await apiClient.logout();\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n    }\r\n  };\r\n\r\n  const loginWithGoogle = async () => {\r\n    try {\r\n      // Get Google OAuth URL from backend\r\n      const response = await apiClient.getGoogleOAuthUrl();\r\n      const { auth_url } = response;\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let isResolved = false;\r\n        let checkClosedInterval;\r\n        let timeoutId;\r\n        let popup;\r\n\r\n        // Listen for messages from the popup (sent by backend callback)\r\n        const messageListener = (event) => {\r\n          console.log('üîç Received message:', event.data, 'from origin:', event.origin);\r\n\r\n          // Accept messages from our backend origin (both HTTP and HTTPS), and wildcard '*' for dev\r\n          const allowedOrigins = ['http://localhost:8000', 'https://localhost:8000', window.location.origin];\r\n\r\n          // For development, also accept messages from any origin if they have the right structure\r\n          const isValidMessage = event.data && (event.data.success || event.data.error);\r\n          const isFromAllowedOrigin = allowedOrigins.includes(event.origin) || event.origin === 'null';\r\n\r\n          if (!isFromAllowedOrigin && !isValidMessage) {\r\n            console.log('üîç Ignoring message from unexpected origin:', event.origin);\r\n            return;\r\n          }\r\n\r\n          if (isResolved) {\r\n            console.log('üîç Message received but already resolved, ignoring');\r\n            return; // Prevent multiple resolutions\r\n          }\r\n\r\n          // Check if this is an OAuth success message\r\n          if (event.data && event.data.success && event.data.access_token) {\r\n            console.log('‚úÖ OAuth success received:', event.data);\r\n            isResolved = true;\r\n\r\n            // Clear intervals and timeouts\r\n            if (checkClosedInterval) {\r\n              clearInterval(checkClosedInterval);\r\n              checkClosedInterval = null;\r\n            }\r\n            if (timeoutId) {\r\n              clearTimeout(timeoutId);\r\n              timeoutId = null;\r\n            }\r\n\r\n            // Backend successfully processed OAuth and sent us the token\r\n            apiClient.setToken(event.data.access_token);\r\n            setUser(event.data.user);\r\n            setIsAuthenticated(true);\r\n            \r\n            // Trigger notification permission check after successful Google login\r\n            setTimeout(() => {\r\n              const loginEvent = new CustomEvent('userLoggedIn');\r\n              window.dispatchEvent(loginEvent);\r\n            }, 1000);\r\n\r\n            window.removeEventListener('message', messageListener);\r\n\r\n            // Close popup with delay to ensure message processing\r\n            setTimeout(() => {\r\n              try {\r\n                if (popup && !popup.closed) popup.close();\r\n              } catch (e) {\r\n                console.warn('Could not close popup:', e);\r\n              }\r\n            }, 500);\r\n\r\n            resolve(event.data);\r\n          } else if (event.data && event.data.error) {\r\n            console.log('‚ùå OAuth error received:', event.data.error);\r\n            isResolved = true;\r\n\r\n            // Clear intervals and timeouts\r\n            if (checkClosedInterval) {\r\n              clearInterval(checkClosedInterval);\r\n              checkClosedInterval = null;\r\n            }\r\n            if (timeoutId) {\r\n              clearTimeout(timeoutId);\r\n              timeoutId = null;\r\n            }\r\n\r\n            window.removeEventListener('message', messageListener);\r\n\r\n            setTimeout(() => {\r\n              try {\r\n                if (popup && !popup.closed) popup.close();\r\n              } catch (e) {\r\n                console.warn('Could not close popup:', e);\r\n              }\r\n            }, 500);\r\n\r\n            reject(new Error(event.data.error));\r\n          } else {\r\n            console.log('üîç Received message with unexpected format:', event.data);\r\n          }\r\n        };\r\n\r\n        // Set up message listener BEFORE opening popup\r\n        window.addEventListener('message', messageListener);\r\n        console.log('üîç Message listener set up');\r\n\r\n        // Open popup window for Google OAuth\r\n        popup = window.open(\r\n          auth_url,\r\n          'google-oauth',\r\n          'width=500,height=600,scrollbars=yes,resizable=yes'\r\n        );\r\n\r\n        if (!popup) {\r\n          window.removeEventListener('message', messageListener);\r\n          reject(new Error('Failed to open OAuth popup. Please allow popups for this site.'));\r\n          return;\r\n        }\r\n\r\n        console.log('üîç Popup opened successfully');\r\n\r\n        // Cleanup function\r\n        const cleanup = () => {\r\n          window.removeEventListener('message', messageListener);\r\n          if (checkClosedInterval) {\r\n            clearInterval(checkClosedInterval);\r\n            checkClosedInterval = null;\r\n          }\r\n          if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n            timeoutId = null;\r\n          }\r\n        };\r\n\r\n        // Handle popup closure detection - use longer delay to allow message processing\r\n        const checkClosed = () => {\r\n          try {\r\n            if (popup && popup.closed) {\r\n              if (!isResolved) {\r\n                console.log('üîç Popup was closed by user');\r\n\r\n                // Check localStorage for OAuth result as fallback\r\n                try {\r\n                  const oauthResult = localStorage.getItem('oauth_result');\r\n                  if (oauthResult) {\r\n                    console.log('üîç Found OAuth result in localStorage');\r\n                    const result = JSON.parse(oauthResult);\r\n                    localStorage.removeItem('oauth_result');\r\n\r\n                    if (result.success && result.access_token) {\r\n                      console.log('‚úÖ OAuth success from localStorage');\r\n                      isResolved = true;\r\n                      cleanup();\r\n\r\n                      apiClient.setToken(result.access_token);\r\n                      setUser(result.user);\r\n                      setIsAuthenticated(true);\r\n\r\n                      resolve(result);\r\n                      return;\r\n                    } else if (result.error) {\r\n                      console.log('‚ùå OAuth error from localStorage');\r\n                      isResolved = true;\r\n                      cleanup();\r\n                      reject(new Error(result.error));\r\n                      return;\r\n                    }\r\n                  }\r\n                } catch (e) {\r\n                  console.log('üîç No valid OAuth result in localStorage');\r\n                }\r\n\r\n                // Wait longer before rejecting to allow any pending message events\r\n                setTimeout(() => {\r\n                  if (!isResolved) {\r\n                    isResolved = true;\r\n                    cleanup();\r\n                    reject(new Error('OAuth popup was closed by user'));\r\n                  }\r\n                }, 3000); // Increased delay to 3 seconds\r\n              }\r\n              return;\r\n            }\r\n          } catch (error) {\r\n            // COOP policy blocks access - this is expected in secure contexts\r\n            console.log('üîç COOP policy active - relying on message listener for popup status');\r\n          }\r\n        };\r\n\r\n        // Check popup status less frequently to reduce COOP errors and allow more time for messages\r\n        checkClosedInterval = setInterval(checkClosed, 5000); // Check every 5 seconds\r\n\r\n        // Set a reasonable timeout for OAuth process\r\n        timeoutId = setTimeout(() => {\r\n          if (!isResolved) {\r\n            console.log('üîç OAuth timeout reached');\r\n            isResolved = true;\r\n            cleanup();\r\n            try {\r\n              if (popup && !popup.closed) popup.close();\r\n            } catch (e) {\r\n              console.warn('Could not close popup on timeout:', e);\r\n            }\r\n            reject(new Error('OAuth timeout - please ensure you accept the SSL certificate and try again'));\r\n          }\r\n        }, 300000); // 5 minutes to allow for certificate acceptance and debugging\r\n      });\r\n    } catch (error) {\r\n      console.error('Google OAuth failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    loginWithGoogle,\r\n    sendOTP,\r\n    verifyOTP,\r\n    resendOTP,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}