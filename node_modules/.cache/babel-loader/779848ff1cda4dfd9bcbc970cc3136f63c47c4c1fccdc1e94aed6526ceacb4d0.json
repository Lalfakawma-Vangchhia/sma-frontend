{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THORSIGNIA\\\\Projects\\\\automation-dash\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const [permissions, setPermissions] = useState({\n    granted: false,\n    prePosting: true,\n    success: true,\n    failure: true\n  });\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [websocket, setWebsocket] = useState(null);\n\n  // Load preferences from localStorage on mount\n  useEffect(() => {\n    const savedPermissions = localStorage.getItem('notificationPermissions');\n    if (savedPermissions) {\n      setPermissions(JSON.parse(savedPermissions));\n    }\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsed = JSON.parse(savedNotifications);\n      setNotifications(parsed);\n      setUnreadCount(parsed.filter(n => !n.isRead).length);\n    }\n  }, []);\n\n  // Save permissions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notificationPermissions', JSON.stringify(permissions));\n  }, [permissions]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request browser notification permissions\n  const requestPermissions = useCallback(async () => {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n    try {\n      const permission = await Notification.requestPermission();\n      const granted = permission === 'granted';\n      setPermissions(prev => ({\n        ...prev,\n        granted\n      }));\n      if (granted) {\n        // Test notification\n        new Notification('Notifications Enabled!', {\n          body: 'You will now receive alerts about your scheduled posts.',\n          icon: '/favicon.ico'\n        });\n      }\n      return granted;\n    } catch (error) {\n      console.error('Error requesting notification permissions:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new notification\n  const addNotification = useCallback(notification => {\n    console.log('🔔 Adding notification:', notification);\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Keep only last 100 notifications\n      const result = updated.slice(0, 100);\n      console.log(`📊 Updated notifications: ${result.length} total`);\n      return result;\n    });\n    setUnreadCount(prev => {\n      const newCount = prev + 1;\n      console.log(`📈 Updated unread count: ${newCount}`);\n      return newCount;\n    });\n\n    // Show browser notification if permissions granted and enabled\n    if (permissions.granted && shouldShowBrowserNotification(notification.type)) {\n      showBrowserNotification(newNotification);\n    }\n    return newNotification;\n  }, [permissions]);\n\n  // Check if browser notification should be shown based on user preferences\n  const shouldShowBrowserNotification = useCallback(type => {\n    switch (type) {\n      case 'pre_posting':\n        return permissions.prePosting;\n      case 'success':\n        return permissions.success;\n      case 'failure':\n        return permissions.failure;\n      default:\n        return true;\n    }\n  }, [permissions]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback(notification => {\n    if (!permissions.granted) return;\n    const options = {\n      body: notification.message,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: notification.id,\n      requireInteraction: notification.type === 'failure',\n      actions: notification.type === 'pre_posting' ? [{\n        action: 'edit',\n        title: 'Edit Post'\n      }, {\n        action: 'dismiss',\n        title: 'Dismiss'\n      }] : []\n    };\n    const browserNotification = new Notification(`${notification.platform.toUpperCase()} - ${notification.strategyName}`, options);\n    browserNotification.onclick = () => {\n      handleNotificationClick(notification);\n      browserNotification.close();\n    };\n\n    // Auto-close after 10 seconds for non-failure notifications\n    if (notification.type !== 'failure') {\n      setTimeout(() => browserNotification.close(), 10000);\n    }\n  }, [permissions]);\n\n  // Handle notification click\n  const handleNotificationClick = useCallback(notification => {\n    // Mark as read\n    markAsRead(notification.id);\n\n    // Navigate based on notification type\n    switch (notification.type) {\n      case 'pre_posting':\n      case 'failure':\n        // Navigate to bulk composer\n        if (notification.platform === 'facebook') {\n          window.location.href = '/facebook';\n        } else if (notification.platform === 'instagram') {\n          window.location.href = '/instagram';\n        }\n        break;\n      case 'success':\n        // Navigate to social media dashboard or specific post\n        window.location.href = `/${notification.platform}`;\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // Mark notification as read\n  const markAsRead = useCallback(notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      isRead: true\n    } : notification));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      isRead: true\n    })));\n    setUnreadCount(0);\n  }, []);\n\n  // Update notification preferences\n  const updatePreferences = useCallback(async newPreferences => {\n    setPermissions(prev => ({\n      ...prev,\n      ...newPreferences\n    }));\n\n    // Save to backend if user is authenticated\n    try {\n      await apiClient.updateNotificationPreferences(newPreferences);\n    } catch (error) {\n      console.error('Failed to save notification preferences:', error);\n    }\n  }, []);\n\n  // Setup WebSocket connection for real-time notifications\n  const setupWebSocket = useCallback(() => {\n    if (websocket) return;\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('No auth token found, skipping WebSocket setup');\n      return;\n    }\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('🔌 Attempting WebSocket connection to:', wsUrl);\n    const ws = new WebSocket(wsUrl);\n    ws.onopen = () => {\n      console.log('✅ WebSocket connected for notifications');\n      setWebsocket(ws);\n    };\n    ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('📨 WebSocket message received:', data);\n        if (data.type === 'notification') {\n          // Transform WebSocket notification to frontend format\n          const transformedNotification = {\n            id: data.notification.id,\n            type: data.notification.type,\n            platform: data.notification.platform,\n            strategyName: data.notification.strategyName,\n            message: data.notification.message,\n            isRead: data.notification.isRead,\n            timestamp: data.notification.timestamp,\n            scheduledTime: data.notification.scheduledTime,\n            error: data.notification.error,\n            postId: data.notification.postId\n          };\n          addNotification(transformedNotification);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    ws.onclose = event => {\n      console.warn('❌ WebSocket closed:', event.code, event.reason);\n      setWebsocket(null);\n      // Reconnect after 5 seconds\n      setTimeout(() => {\n        console.log('🔄 Attempting WebSocket reconnection...');\n        setupWebSocket();\n      }, 5000);\n    };\n    ws.onerror = error => {\n      console.error('❌ WebSocket error:', error);\n      // Don't close immediately, let the onclose handler deal with reconnection\n    };\n  }, [websocket, addNotification]);\n\n  // Cleanup WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [websocket]);\n\n  // Load notifications from backend\n  const loadNotifications = useCallback(async () => {\n    try {\n      console.log('🔄 Loading notifications from backend...');\n      const response = await apiClient.getNotifications();\n      console.log('📨 Notifications response:', response);\n      if (response.success) {\n        // Transform backend data to frontend format\n        const transformedNotifications = response.data.map(notification => ({\n          id: notification.id,\n          type: notification.type,\n          platform: notification.platform,\n          strategyName: notification.strategy_name,\n          message: notification.message,\n          isRead: notification.is_read,\n          timestamp: notification.created_at,\n          scheduledTime: notification.scheduled_time,\n          error: notification.error_message,\n          postId: notification.post_id\n        }));\n        setNotifications(transformedNotifications);\n        const unreadCount = transformedNotifications.filter(n => !n.isRead).length;\n        setUnreadCount(unreadCount);\n        console.log(`✅ Loaded ${transformedNotifications.length} notifications, ${unreadCount} unread`);\n      } else {\n        console.error('❌ Failed to load notifications:', response.error);\n      }\n    } catch (error) {\n      console.error('❌ Failed to load notifications:', error);\n    }\n  }, []);\n\n  // Initialize notifications and WebSocket when user is authenticated\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      loadNotifications();\n      setupWebSocket();\n    }\n  }, [loadNotifications, setupWebSocket]);\n\n  // Check if user should see permission modal\n  const checkPermissionModal = useCallback(() => {\n    const hasSeenModal = localStorage.getItem('hasSeenNotificationModal');\n    const token = localStorage.getItem('authToken');\n    if (token && !hasSeenModal && !permissions.granted) {\n      setShowPermissionModal(true);\n    }\n  }, [permissions.granted]);\n\n  // Listen for login events\n  useEffect(() => {\n    const handleUserLogin = () => {\n      setTimeout(() => {\n        checkPermissionModal();\n      }, 500);\n    };\n    window.addEventListener('userLoggedIn', handleUserLogin);\n    return () => window.removeEventListener('userLoggedIn', handleUserLogin);\n  }, [checkPermissionModal]);\n\n  // Handle permission modal response\n  const handlePermissionAllow = useCallback(async () => {\n    const granted = await requestPermissions();\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    if (granted) {\n      // Load user preferences from backend\n      try {\n        const response = await apiClient.getNotificationPreferences();\n        if (response.success) {\n          setPermissions(prev => ({\n            ...prev,\n            ...response.data\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to load notification preferences:', error);\n      }\n    }\n  }, [requestPermissions]);\n  const handlePermissionBlock = useCallback(() => {\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    setPermissions(prev => ({\n      ...prev,\n      granted: false\n    }));\n  }, []);\n\n  // Test notification function for debugging\n  const testNotification = useCallback(() => {\n    addNotification({\n      type: 'success',\n      platform: 'instagram',\n      strategyName: 'Test Notification',\n      message: 'This is a test notification to verify the system is working!',\n      timestamp: new Date().toISOString()\n    });\n  }, [addNotification]);\n\n  // Test WebSocket connection function\n  const testWebSocketConnection = useCallback(() => {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('❌ No auth token found for WebSocket test');\n      return;\n    }\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('🧪 Testing WebSocket connection to:', wsUrl);\n    const testWs = new WebSocket(wsUrl);\n    testWs.onopen = () => {\n      console.log('✅ Test WebSocket connection successful');\n      testWs.close();\n    };\n    testWs.onerror = error => {\n      console.error('❌ Test WebSocket connection failed:', error);\n    };\n    testWs.onclose = event => {\n      console.log('🔌 Test WebSocket connection closed:', event.code, event.reason);\n    };\n  }, []);\n  const value = {\n    notifications,\n    unreadCount,\n    permissions,\n    isNotificationCenterOpen,\n    showPermissionModal,\n    setIsNotificationCenterOpen,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    updatePreferences,\n    requestPermissions,\n    handleNotificationClick,\n    checkPermissionModal,\n    handlePermissionAllow,\n    handlePermissionBlock,\n    loadNotifications,\n    testNotification,\n    testWebSocketConnection,\n    refreshNotifications: loadNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"bhJZ3cBBb5Djgx1jZKL+axU7Fgc=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","apiClient","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","isNotificationCenterOpen","setIsNotificationCenterOpen","permissions","setPermissions","granted","prePosting","success","failure","showPermissionModal","setShowPermissionModal","websocket","setWebsocket","savedPermissions","localStorage","getItem","JSON","parse","savedNotifications","parsed","filter","n","isRead","length","setItem","stringify","requestPermissions","window","console","warn","permission","Notification","requestPermission","prev","body","icon","error","addNotification","notification","log","newNotification","id","Date","now","toString","timestamp","updated","result","slice","newCount","shouldShowBrowserNotification","type","showBrowserNotification","options","message","badge","tag","requireInteraction","actions","action","title","browserNotification","platform","toUpperCase","strategyName","onclick","handleNotificationClick","close","setTimeout","markAsRead","location","href","notificationId","map","Math","max","markAllAsRead","updatePreferences","newPreferences","updateNotificationPreferences","setupWebSocket","token","wsUrl","process","env","REACT_APP_WS_URL","encodeURIComponent","ws","WebSocket","onopen","onmessage","event","data","transformedNotification","scheduledTime","postId","onclose","code","reason","onerror","loadNotifications","response","getNotifications","transformedNotifications","strategy_name","is_read","created_at","scheduled_time","error_message","post_id","checkPermissionModal","hasSeenModal","handleUserLogin","addEventListener","removeEventListener","handlePermissionAllow","getNotificationPreferences","handlePermissionBlock","testNotification","toISOString","testWebSocketConnection","testWs","value","refreshNotifications","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/THORSIGNIA/Projects/automation-dash/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const [permissions, setPermissions] = useState({\n    granted: false,\n    prePosting: true,\n    success: true,\n    failure: true\n  });\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [websocket, setWebsocket] = useState(null);\n\n  // Load preferences from localStorage on mount\n  useEffect(() => {\n    const savedPermissions = localStorage.getItem('notificationPermissions');\n    if (savedPermissions) {\n      setPermissions(JSON.parse(savedPermissions));\n    }\n\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsed = JSON.parse(savedNotifications);\n      setNotifications(parsed);\n      setUnreadCount(parsed.filter(n => !n.isRead).length);\n    }\n  }, []);\n\n  // Save permissions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notificationPermissions', JSON.stringify(permissions));\n  }, [permissions]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request browser notification permissions\n  const requestPermissions = useCallback(async () => {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      const granted = permission === 'granted';\n      \n      setPermissions(prev => ({ ...prev, granted }));\n      \n      if (granted) {\n        // Test notification\n        new Notification('Notifications Enabled!', {\n          body: 'You will now receive alerts about your scheduled posts.',\n          icon: '/favicon.ico'\n        });\n      }\n      \n      return granted;\n    } catch (error) {\n      console.error('Error requesting notification permissions:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new notification\n  const addNotification = useCallback((notification) => {\n    console.log('🔔 Adding notification:', notification);\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Keep only last 100 notifications\n      const result = updated.slice(0, 100);\n      console.log(`📊 Updated notifications: ${result.length} total`);\n      return result;\n    });\n\n    setUnreadCount(prev => {\n      const newCount = prev + 1;\n      console.log(`📈 Updated unread count: ${newCount}`);\n      return newCount;\n    });\n\n    // Show browser notification if permissions granted and enabled\n    if (permissions.granted && shouldShowBrowserNotification(notification.type)) {\n      showBrowserNotification(newNotification);\n    }\n\n    return newNotification;\n  }, [permissions]);\n\n  // Check if browser notification should be shown based on user preferences\n  const shouldShowBrowserNotification = useCallback((type) => {\n    switch (type) {\n      case 'pre_posting':\n        return permissions.prePosting;\n      case 'success':\n        return permissions.success;\n      case 'failure':\n        return permissions.failure;\n      default:\n        return true;\n    }\n  }, [permissions]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback((notification) => {\n    if (!permissions.granted) return;\n\n    const options = {\n      body: notification.message,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: notification.id,\n      requireInteraction: notification.type === 'failure',\n      actions: notification.type === 'pre_posting' ? [\n        { action: 'edit', title: 'Edit Post' },\n        { action: 'dismiss', title: 'Dismiss' }\n      ] : []\n    };\n\n    const browserNotification = new Notification(\n      `${notification.platform.toUpperCase()} - ${notification.strategyName}`,\n      options\n    );\n\n    browserNotification.onclick = () => {\n      handleNotificationClick(notification);\n      browserNotification.close();\n    };\n\n    // Auto-close after 10 seconds for non-failure notifications\n    if (notification.type !== 'failure') {\n      setTimeout(() => browserNotification.close(), 10000);\n    }\n  }, [permissions]);\n\n  // Handle notification click\n  const handleNotificationClick = useCallback((notification) => {\n    // Mark as read\n    markAsRead(notification.id);\n    \n    // Navigate based on notification type\n    switch (notification.type) {\n      case 'pre_posting':\n      case 'failure':\n        // Navigate to bulk composer\n        if (notification.platform === 'facebook') {\n          window.location.href = '/facebook';\n        } else if (notification.platform === 'instagram') {\n          window.location.href = '/instagram';\n        }\n        break;\n      case 'success':\n        // Navigate to social media dashboard or specific post\n        window.location.href = `/${notification.platform}`;\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // Mark notification as read\n  const markAsRead = useCallback((notificationId) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, isRead: true }\n          : notification\n      )\n    );\n    \n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, isRead: true }))\n    );\n    setUnreadCount(0);\n  }, []);\n\n  // Update notification preferences\n  const updatePreferences = useCallback(async (newPreferences) => {\n    setPermissions(prev => ({ ...prev, ...newPreferences }));\n    \n    // Save to backend if user is authenticated\n    try {\n      await apiClient.updateNotificationPreferences(newPreferences);\n    } catch (error) {\n      console.error('Failed to save notification preferences:', error);\n    }\n  }, []);\n\n  // Setup WebSocket connection for real-time notifications\n  const setupWebSocket = useCallback(() => {\n    if (websocket) return;\n\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('No auth token found, skipping WebSocket setup');\n      return;\n    }\n\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('🔌 Attempting WebSocket connection to:', wsUrl);\n    \n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      console.log('✅ WebSocket connected for notifications');\n      setWebsocket(ws);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('📨 WebSocket message received:', data);\n        if (data.type === 'notification') {\n          // Transform WebSocket notification to frontend format\n          const transformedNotification = {\n            id: data.notification.id,\n            type: data.notification.type,\n            platform: data.notification.platform,\n            strategyName: data.notification.strategyName,\n            message: data.notification.message,\n            isRead: data.notification.isRead,\n            timestamp: data.notification.timestamp,\n            scheduledTime: data.notification.scheduledTime,\n            error: data.notification.error,\n            postId: data.notification.postId\n          };\n          addNotification(transformedNotification);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = (event) => {\n      console.warn('❌ WebSocket closed:', event.code, event.reason);\n      setWebsocket(null);\n      // Reconnect after 5 seconds\n      setTimeout(() => {\n        console.log('🔄 Attempting WebSocket reconnection...');\n        setupWebSocket();\n      }, 5000);\n    };\n\n    ws.onerror = (error) => {\n      console.error('❌ WebSocket error:', error);\n      // Don't close immediately, let the onclose handler deal with reconnection\n    };\n  }, [websocket, addNotification]);\n\n  // Cleanup WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [websocket]);\n\n  // Load notifications from backend\n  const loadNotifications = useCallback(async () => {\n    try {\n      console.log('🔄 Loading notifications from backend...');\n      const response = await apiClient.getNotifications();\n      console.log('📨 Notifications response:', response);\n      if (response.success) {\n        // Transform backend data to frontend format\n        const transformedNotifications = response.data.map(notification => ({\n          id: notification.id,\n          type: notification.type,\n          platform: notification.platform,\n          strategyName: notification.strategy_name,\n          message: notification.message,\n          isRead: notification.is_read,\n          timestamp: notification.created_at,\n          scheduledTime: notification.scheduled_time,\n          error: notification.error_message,\n          postId: notification.post_id\n        }));\n        \n        setNotifications(transformedNotifications);\n        const unreadCount = transformedNotifications.filter(n => !n.isRead).length;\n        setUnreadCount(unreadCount);\n        console.log(`✅ Loaded ${transformedNotifications.length} notifications, ${unreadCount} unread`);\n      } else {\n        console.error('❌ Failed to load notifications:', response.error);\n      }\n    } catch (error) {\n      console.error('❌ Failed to load notifications:', error);\n    }\n  }, []);\n\n  // Initialize notifications and WebSocket when user is authenticated\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      loadNotifications();\n      setupWebSocket();\n    }\n  }, [loadNotifications, setupWebSocket]);\n\n  // Check if user should see permission modal\n  const checkPermissionModal = useCallback(() => {\n    const hasSeenModal = localStorage.getItem('hasSeenNotificationModal');\n    const token = localStorage.getItem('authToken');\n    \n    if (token && !hasSeenModal && !permissions.granted) {\n      setShowPermissionModal(true);\n    }\n  }, [permissions.granted]);\n\n  // Listen for login events\n  useEffect(() => {\n    const handleUserLogin = () => {\n      setTimeout(() => {\n        checkPermissionModal();\n      }, 500);\n    };\n\n    window.addEventListener('userLoggedIn', handleUserLogin);\n    return () => window.removeEventListener('userLoggedIn', handleUserLogin);\n  }, [checkPermissionModal]);\n\n  // Handle permission modal response\n  const handlePermissionAllow = useCallback(async () => {\n    const granted = await requestPermissions();\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    \n    if (granted) {\n      // Load user preferences from backend\n      try {\n        const response = await apiClient.getNotificationPreferences();\n        if (response.success) {\n          setPermissions(prev => ({ ...prev, ...response.data }));\n        }\n      } catch (error) {\n        console.error('Failed to load notification preferences:', error);\n      }\n    }\n  }, [requestPermissions]);\n\n  const handlePermissionBlock = useCallback(() => {\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    setPermissions(prev => ({ ...prev, granted: false }));\n  }, []);\n\n  // Test notification function for debugging\n  const testNotification = useCallback(() => {\n    addNotification({\n      type: 'success',\n      platform: 'instagram',\n      strategyName: 'Test Notification',\n      message: 'This is a test notification to verify the system is working!',\n      timestamp: new Date().toISOString()\n    });\n  }, [addNotification]);\n\n  // Test WebSocket connection function\n  const testWebSocketConnection = useCallback(() => {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      console.log('❌ No auth token found for WebSocket test');\n      return;\n    }\n\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/api/ws/notifications?token=${encodeURIComponent(token)}`;\n    console.log('🧪 Testing WebSocket connection to:', wsUrl);\n    \n    const testWs = new WebSocket(wsUrl);\n    \n    testWs.onopen = () => {\n      console.log('✅ Test WebSocket connection successful');\n      testWs.close();\n    };\n    \n    testWs.onerror = (error) => {\n      console.error('❌ Test WebSocket connection failed:', error);\n    };\n    \n    testWs.onclose = (event) => {\n      console.log('🔌 Test WebSocket connection closed:', event.code, event.reason);\n    };\n  }, []);\n\n  const value = {\n    notifications,\n    unreadCount,\n    permissions,\n    isNotificationCenterOpen,\n    showPermissionModal,\n    setIsNotificationCenterOpen,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    updatePreferences,\n    requestPermissions,\n    handleNotificationClick,\n    checkPermissionModal,\n    handlePermissionAllow,\n    handlePermissionBlock,\n    loadNotifications,\n    testNotification,\n    testWebSocketConnection,\n    refreshNotifications: loadNotifications\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}