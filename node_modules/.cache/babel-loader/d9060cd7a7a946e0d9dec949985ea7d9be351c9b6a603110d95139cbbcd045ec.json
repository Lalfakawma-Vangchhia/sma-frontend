{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THORSIGNIA\\\\Projects\\\\automation-dash\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const [permissions, setPermissions] = useState({\n    granted: false,\n    prePosting: true,\n    success: true,\n    failure: true\n  });\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [websocket, setWebsocket] = useState(null);\n\n  // Load preferences from localStorage on mount\n  useEffect(() => {\n    const savedPermissions = localStorage.getItem('notificationPermissions');\n    if (savedPermissions) {\n      setPermissions(JSON.parse(savedPermissions));\n    }\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsed = JSON.parse(savedNotifications);\n      setNotifications(parsed);\n      setUnreadCount(parsed.filter(n => !n.isRead).length);\n    }\n  }, []);\n\n  // Save permissions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notificationPermissions', JSON.stringify(permissions));\n  }, [permissions]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request browser notification permissions\n  const requestPermissions = useCallback(async () => {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n    try {\n      const permission = await Notification.requestPermission();\n      const granted = permission === 'granted';\n      setPermissions(prev => ({\n        ...prev,\n        granted\n      }));\n      if (granted) {\n        // Test notification\n        new Notification('Notifications Enabled!', {\n          body: 'You will now receive alerts about your scheduled posts.',\n          icon: '/favicon.ico'\n        });\n      }\n      return granted;\n    } catch (error) {\n      console.error('Error requesting notification permissions:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new notification\n  const addNotification = useCallback(notification => {\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Keep only last 100 notifications\n      return updated.slice(0, 100);\n    });\n    setUnreadCount(prev => prev + 1);\n\n    // Show browser notification if permissions granted and enabled\n    if (permissions.granted && shouldShowBrowserNotification(notification.type)) {\n      showBrowserNotification(newNotification);\n    }\n    return newNotification;\n  }, [permissions]);\n\n  // Check if browser notification should be shown based on user preferences\n  const shouldShowBrowserNotification = useCallback(type => {\n    switch (type) {\n      case 'pre_posting':\n        return permissions.prePosting;\n      case 'success':\n        return permissions.success;\n      case 'failure':\n        return permissions.failure;\n      default:\n        return true;\n    }\n  }, [permissions]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback(notification => {\n    if (!permissions.granted) return;\n    const options = {\n      body: notification.message,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: notification.id,\n      requireInteraction: notification.type === 'failure',\n      actions: notification.type === 'pre_posting' ? [{\n        action: 'edit',\n        title: 'Edit Post'\n      }, {\n        action: 'dismiss',\n        title: 'Dismiss'\n      }] : []\n    };\n    const browserNotification = new Notification(`${notification.platform.toUpperCase()} - ${notification.strategyName}`, options);\n    browserNotification.onclick = () => {\n      handleNotificationClick(notification);\n      browserNotification.close();\n    };\n\n    // Auto-close after 10 seconds for non-failure notifications\n    if (notification.type !== 'failure') {\n      setTimeout(() => browserNotification.close(), 10000);\n    }\n  }, [permissions]);\n\n  // Handle notification click\n  const handleNotificationClick = useCallback(notification => {\n    // Mark as read\n    markAsRead(notification.id);\n\n    // Navigate based on notification type\n    switch (notification.type) {\n      case 'pre_posting':\n      case 'failure':\n        // Navigate to bulk composer\n        if (notification.platform === 'facebook') {\n          window.location.href = '/facebook';\n        } else if (notification.platform === 'instagram') {\n          window.location.href = '/instagram';\n        }\n        break;\n      case 'success':\n        // Navigate to social media dashboard or specific post\n        window.location.href = `/${notification.platform}`;\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // Mark notification as read\n  const markAsRead = useCallback(notificationId => {\n    setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n      ...notification,\n      isRead: true\n    } : notification));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(notification => ({\n      ...notification,\n      isRead: true\n    })));\n    setUnreadCount(0);\n  }, []);\n\n  // Update notification preferences\n  const updatePreferences = useCallback(async newPreferences => {\n    setPermissions(prev => ({\n      ...prev,\n      ...newPreferences\n    }));\n\n    // Save to backend if user is authenticated\n    try {\n      await apiClient.updateNotificationPreferences(newPreferences);\n    } catch (error) {\n      console.error('Failed to save notification preferences:', error);\n    }\n  }, []);\n\n  // Setup WebSocket connection for real-time notifications\n  const setupWebSocket = useCallback(() => {\n    if (websocket) return;\n    const token = localStorage.getItem('authToken');\n    if (!token) return;\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/ws/notifications?token=${encodeURIComponent(token)}`;\n    const ws = new WebSocket(wsUrl);\n    ws.onopen = () => {\n      console.log('WebSocket connected for notifications');\n      setWebsocket(ws);\n    };\n    ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'notification') {\n          addNotification(data.notification);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    ws.onclose = event => {\n      console.warn('WebSocket closed:', event);\n      setWebsocket(null);\n      // Reconnect after 5 seconds\n      setTimeout(() => {\n        setupWebSocket();\n      }, 5000);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n      // Don't close immediately, let the onclose handler deal with reconnection\n    };\n  }, [websocket, addNotification]);\n\n  // Cleanup WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [websocket]);\n\n  // Load notifications from backend\n  const loadNotifications = useCallback(async () => {\n    try {\n      const response = await apiClient.getNotifications();\n      if (response.success) {\n        setNotifications(response.data);\n        setUnreadCount(response.data.filter(n => !n.isRead).length);\n      }\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    }\n  }, []);\n\n  // Initialize notifications and WebSocket when user is authenticated\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      loadNotifications();\n      setupWebSocket();\n    }\n  }, [loadNotifications, setupWebSocket]);\n\n  // Check if user should see permission modal\n  const checkPermissionModal = useCallback(() => {\n    const hasSeenModal = localStorage.getItem('hasSeenNotificationModal');\n    const token = localStorage.getItem('authToken');\n    if (token && !hasSeenModal && !permissions.granted) {\n      setShowPermissionModal(true);\n    }\n  }, [permissions.granted]);\n\n  // Listen for login events\n  useEffect(() => {\n    const handleUserLogin = () => {\n      setTimeout(() => {\n        checkPermissionModal();\n      }, 500);\n    };\n    window.addEventListener('userLoggedIn', handleUserLogin);\n    return () => window.removeEventListener('userLoggedIn', handleUserLogin);\n  }, [checkPermissionModal]);\n\n  // Handle permission modal response\n  const handlePermissionAllow = useCallback(async () => {\n    const granted = await requestPermissions();\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    if (granted) {\n      // Load user preferences from backend\n      try {\n        const response = await apiClient.getNotificationPreferences();\n        if (response.success) {\n          setPermissions(prev => ({\n            ...prev,\n            ...response.data\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to load notification preferences:', error);\n      }\n    }\n  }, [requestPermissions]);\n  const handlePermissionBlock = useCallback(() => {\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    setPermissions(prev => ({\n      ...prev,\n      granted: false\n    }));\n  }, []);\n  const value = {\n    notifications,\n    unreadCount,\n    permissions,\n    isNotificationCenterOpen,\n    showPermissionModal,\n    setIsNotificationCenterOpen,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    updatePreferences,\n    requestPermissions,\n    handleNotificationClick,\n    checkPermissionModal,\n    handlePermissionAllow,\n    handlePermissionBlock,\n    loadNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"Tf97JUZByrAIPgdQo0hDU6ekE/o=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","apiClient","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","isNotificationCenterOpen","setIsNotificationCenterOpen","permissions","setPermissions","granted","prePosting","success","failure","showPermissionModal","setShowPermissionModal","websocket","setWebsocket","savedPermissions","localStorage","getItem","JSON","parse","savedNotifications","parsed","filter","n","isRead","length","setItem","stringify","requestPermissions","window","console","warn","permission","Notification","requestPermission","prev","body","icon","error","addNotification","notification","newNotification","id","Date","now","toString","timestamp","updated","slice","shouldShowBrowserNotification","type","showBrowserNotification","options","message","badge","tag","requireInteraction","actions","action","title","browserNotification","platform","toUpperCase","strategyName","onclick","handleNotificationClick","close","setTimeout","markAsRead","location","href","notificationId","map","Math","max","markAllAsRead","updatePreferences","newPreferences","updateNotificationPreferences","setupWebSocket","token","wsUrl","process","env","REACT_APP_WS_URL","encodeURIComponent","ws","WebSocket","onopen","log","onmessage","event","data","onclose","onerror","loadNotifications","response","getNotifications","checkPermissionModal","hasSeenModal","handleUserLogin","addEventListener","removeEventListener","handlePermissionAllow","getNotificationPreferences","handlePermissionBlock","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/THORSIGNIA/Projects/automation-dash/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const [permissions, setPermissions] = useState({\n    granted: false,\n    prePosting: true,\n    success: true,\n    failure: true\n  });\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [websocket, setWebsocket] = useState(null);\n\n  // Load preferences from localStorage on mount\n  useEffect(() => {\n    const savedPermissions = localStorage.getItem('notificationPermissions');\n    if (savedPermissions) {\n      setPermissions(JSON.parse(savedPermissions));\n    }\n\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      const parsed = JSON.parse(savedNotifications);\n      setNotifications(parsed);\n      setUnreadCount(parsed.filter(n => !n.isRead).length);\n    }\n  }, []);\n\n  // Save permissions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notificationPermissions', JSON.stringify(permissions));\n  }, [permissions]);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request browser notification permissions\n  const requestPermissions = useCallback(async () => {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      const granted = permission === 'granted';\n      \n      setPermissions(prev => ({ ...prev, granted }));\n      \n      if (granted) {\n        // Test notification\n        new Notification('Notifications Enabled!', {\n          body: 'You will now receive alerts about your scheduled posts.',\n          icon: '/favicon.ico'\n        });\n      }\n      \n      return granted;\n    } catch (error) {\n      console.error('Error requesting notification permissions:', error);\n      return false;\n    }\n  }, []);\n\n  // Add new notification\n  const addNotification = useCallback((notification) => {\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Keep only last 100 notifications\n      return updated.slice(0, 100);\n    });\n\n    setUnreadCount(prev => prev + 1);\n\n    // Show browser notification if permissions granted and enabled\n    if (permissions.granted && shouldShowBrowserNotification(notification.type)) {\n      showBrowserNotification(newNotification);\n    }\n\n    return newNotification;\n  }, [permissions]);\n\n  // Check if browser notification should be shown based on user preferences\n  const shouldShowBrowserNotification = useCallback((type) => {\n    switch (type) {\n      case 'pre_posting':\n        return permissions.prePosting;\n      case 'success':\n        return permissions.success;\n      case 'failure':\n        return permissions.failure;\n      default:\n        return true;\n    }\n  }, [permissions]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback((notification) => {\n    if (!permissions.granted) return;\n\n    const options = {\n      body: notification.message,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: notification.id,\n      requireInteraction: notification.type === 'failure',\n      actions: notification.type === 'pre_posting' ? [\n        { action: 'edit', title: 'Edit Post' },\n        { action: 'dismiss', title: 'Dismiss' }\n      ] : []\n    };\n\n    const browserNotification = new Notification(\n      `${notification.platform.toUpperCase()} - ${notification.strategyName}`,\n      options\n    );\n\n    browserNotification.onclick = () => {\n      handleNotificationClick(notification);\n      browserNotification.close();\n    };\n\n    // Auto-close after 10 seconds for non-failure notifications\n    if (notification.type !== 'failure') {\n      setTimeout(() => browserNotification.close(), 10000);\n    }\n  }, [permissions]);\n\n  // Handle notification click\n  const handleNotificationClick = useCallback((notification) => {\n    // Mark as read\n    markAsRead(notification.id);\n    \n    // Navigate based on notification type\n    switch (notification.type) {\n      case 'pre_posting':\n      case 'failure':\n        // Navigate to bulk composer\n        if (notification.platform === 'facebook') {\n          window.location.href = '/facebook';\n        } else if (notification.platform === 'instagram') {\n          window.location.href = '/instagram';\n        }\n        break;\n      case 'success':\n        // Navigate to social media dashboard or specific post\n        window.location.href = `/${notification.platform}`;\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  // Mark notification as read\n  const markAsRead = useCallback((notificationId) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, isRead: true }\n          : notification\n      )\n    );\n    \n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, isRead: true }))\n    );\n    setUnreadCount(0);\n  }, []);\n\n  // Update notification preferences\n  const updatePreferences = useCallback(async (newPreferences) => {\n    setPermissions(prev => ({ ...prev, ...newPreferences }));\n    \n    // Save to backend if user is authenticated\n    try {\n      await apiClient.updateNotificationPreferences(newPreferences);\n    } catch (error) {\n      console.error('Failed to save notification preferences:', error);\n    }\n  }, []);\n\n  // Setup WebSocket connection for real-time notifications\n  const setupWebSocket = useCallback(() => {\n    if (websocket) return;\n\n    const token = localStorage.getItem('authToken');\n    if (!token) return;\n\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/ws/notifications?token=${encodeURIComponent(token)}`;\n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      console.log('WebSocket connected for notifications');\n      setWebsocket(ws);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'notification') {\n          addNotification(data.notification);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = (event) => {\n      console.warn('WebSocket closed:', event);\n      setWebsocket(null);\n      // Reconnect after 5 seconds\n      setTimeout(() => {\n        setupWebSocket();\n      }, 5000);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      // Don't close immediately, let the onclose handler deal with reconnection\n    };\n  }, [websocket, addNotification]);\n\n  // Cleanup WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [websocket]);\n\n  // Load notifications from backend\n  const loadNotifications = useCallback(async () => {\n    try {\n      const response = await apiClient.getNotifications();\n      if (response.success) {\n        setNotifications(response.data);\n        setUnreadCount(response.data.filter(n => !n.isRead).length);\n      }\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    }\n  }, []);\n\n  // Initialize notifications and WebSocket when user is authenticated\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      loadNotifications();\n      setupWebSocket();\n    }\n  }, [loadNotifications, setupWebSocket]);\n\n  // Check if user should see permission modal\n  const checkPermissionModal = useCallback(() => {\n    const hasSeenModal = localStorage.getItem('hasSeenNotificationModal');\n    const token = localStorage.getItem('authToken');\n    \n    if (token && !hasSeenModal && !permissions.granted) {\n      setShowPermissionModal(true);\n    }\n  }, [permissions.granted]);\n\n  // Listen for login events\n  useEffect(() => {\n    const handleUserLogin = () => {\n      setTimeout(() => {\n        checkPermissionModal();\n      }, 500);\n    };\n\n    window.addEventListener('userLoggedIn', handleUserLogin);\n    return () => window.removeEventListener('userLoggedIn', handleUserLogin);\n  }, [checkPermissionModal]);\n\n  // Handle permission modal response\n  const handlePermissionAllow = useCallback(async () => {\n    const granted = await requestPermissions();\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    \n    if (granted) {\n      // Load user preferences from backend\n      try {\n        const response = await apiClient.getNotificationPreferences();\n        if (response.success) {\n          setPermissions(prev => ({ ...prev, ...response.data }));\n        }\n      } catch (error) {\n        console.error('Failed to load notification preferences:', error);\n      }\n    }\n  }, [requestPermissions]);\n\n  const handlePermissionBlock = useCallback(() => {\n    setShowPermissionModal(false);\n    localStorage.setItem('hasSeenNotificationModal', 'true');\n    setPermissions(prev => ({ ...prev, granted: false }));\n  }, []);\n\n  const value = {\n    notifications,\n    unreadCount,\n    permissions,\n    isNotificationCenterOpen,\n    showPermissionModal,\n    setIsNotificationCenterOpen,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    updatePreferences,\n    requestPermissions,\n    handleNotificationClick,\n    checkPermissionModal,\n    handlePermissionAllow,\n    handlePermissionBlock,\n    loadNotifications\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}