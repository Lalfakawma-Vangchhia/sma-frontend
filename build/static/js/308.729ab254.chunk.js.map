{"version":3,"file":"static/js/308.729ab254.chunk.js","mappings":"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","sources":["components/LinkedInPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport apiClient from '../services/apiClient';\r\nimport './LinkedInPage.css';\r\n\r\nconst LinkedInPage = () => {\r\n  const navigate = useNavigate();\r\n  const { isAuthenticated, logout } = useAuth();\r\n  \r\n  // State management\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [linkedInConnected, setLinkedInConnected] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('Ready to connect LinkedIn');\r\n  const [linkedInAccounts, setLinkedInAccounts] = useState([]);\r\n  const [linkedInConfig, setLinkedInConfig] = useState(null);\r\n\r\n  // LinkedIn configuration - will be fetched from backend\r\n  const LINKEDIN_REDIRECT_URI = process.env.REACT_APP_LINKEDIN_REDIRECT_URI || 'http://localhost:3000/linkedin';\r\n\r\n  // Check authentication on component mount\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    \r\n    checkLinkedInStatus();\r\n    handleOAuthCallback();\r\n    fetchLinkedInConfig();\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  // Fetch LinkedIn configuration from backend\r\n  const fetchLinkedInConfig = async () => {\r\n    try {\r\n      const response = await apiClient.getLinkedInConfig();\r\n      setLinkedInConfig(response);\r\n    } catch (error) {\r\n      console.error('Error fetching LinkedIn config:', error);\r\n      setMessage('Failed to load LinkedIn configuration');\r\n    }\r\n  };\r\n\r\n  // Handle OAuth callback from LinkedIn\r\n  const handleOAuthCallback = () => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const code = urlParams.get('code');\r\n    const state = urlParams.get('state');\r\n    const error = urlParams.get('error');\r\n    \r\n    if (error) {\r\n      setMessage(`LinkedIn authorization failed: ${error}`);\r\n      return;\r\n    }\r\n    \r\n    if (code && state) {\r\n      const storedState = localStorage.getItem('linkedin_oauth_state');\r\n      if (state === storedState) {\r\n        setLoading(true);\r\n        setMessage('Processing LinkedIn authorization...');\r\n        \r\n        // Exchange code for access token via backend\r\n        exchangeCodeForToken(code);\r\n        \r\n        // Clean up URL\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n        localStorage.removeItem('linkedin_oauth_state');\r\n      } else {\r\n        setMessage('LinkedIn authorization state mismatch');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Exchange authorization code for access token\r\n  const exchangeCodeForToken = async (code) => {\r\n    try {\r\n      const response = await apiClient.exchangeLinkedInCode(code);\r\n      if (response.success) {\r\n        setLinkedInConnected(true);\r\n        setLinkedInAccounts([{\r\n          id: response.profile.id,\r\n          name: `${response.profile.firstName} ${response.profile.lastName}`,\r\n          profilePicture: response.profile.profilePicture\r\n        }]);\r\n        setConnectionStatus('LinkedIn account connected successfully!');\r\n        setMessage('LinkedIn account connected successfully!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error exchanging code for token:', error);\r\n      setMessage(`Failed to connect LinkedIn: ${error.message}`);\r\n      setConnectionStatus('Connection failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check LinkedIn connection status\r\n  const checkLinkedInStatus = async () => {\r\n    try {\r\n      const response = await apiClient.getLinkedInStatus();\r\n      if (response.connected) {\r\n        setLinkedInConnected(true);\r\n        setLinkedInAccounts(response.accounts || []);\r\n        setConnectionStatus('LinkedIn account already connected');\r\n      }\r\n    } catch (error) {\r\n      console.log('LinkedIn not connected yet:', error.message);\r\n    }\r\n  };\r\n\r\n  // Handle LinkedIn login\r\n  const handleLinkedInLogin = () => {\r\n    if (!linkedInConfig || !linkedInConfig.client_id) {\r\n      setMessage('LinkedIn Client ID not configured');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setMessage('Redirecting to LinkedIn...');\r\n    \r\n    try {\r\n      // Use direct OAuth 2.0 flow instead of SDK\r\n      const state = Math.random().toString(36).substring(7);\r\n      const scope = 'r_liteprofile r_emailaddress w_member_social';\r\n      \r\n      const authUrl = `https://www.linkedin.com/oauth/v2/authorization?` +\r\n        `response_type=code&` +\r\n        `client_id=${linkedInConfig.client_id}&` +\r\n        `redirect_uri=${encodeURIComponent(LINKEDIN_REDIRECT_URI)}&` +\r\n        `state=${state}&` +\r\n        `scope=${encodeURIComponent(scope)}`;\r\n      \r\n      // Store state for verification\r\n      localStorage.setItem('linkedin_oauth_state', state);\r\n      \r\n      // Redirect to LinkedIn\r\n      window.location.href = authUrl;\r\n    } catch (error) {\r\n      console.error('Error in LinkedIn login:', error);\r\n      setMessage('LinkedIn login error occurred');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Connect LinkedIn account to backend\r\n  const handleConnectLinkedIn = async () => {\r\n    try {\r\n      setConnectionStatus('Connecting to backend...');\r\n      \r\n      const response = await apiClient.connectLinkedIn({\r\n        access_token: null, // No access token in this simplified flow\r\n        user_id: null, // No user_id in this simplified flow\r\n        profile: null // No profile in this simplified flow\r\n      });\r\n\r\n      if (response.success) {\r\n        setLinkedInConnected(true);\r\n        setLinkedInAccounts([{\r\n          id: null, // No user_id in this simplified flow\r\n          name: null, // No profile name in this simplified flow\r\n          profilePicture: null // No profile picture in this simplified flow\r\n        }]);\r\n        setConnectionStatus('LinkedIn account connected successfully!');\r\n        setMessage('LinkedIn account connected successfully!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Backend connection error:', error);\r\n      setMessage(`Failed to connect LinkedIn account: ${error.message}`);\r\n      setConnectionStatus('Connection failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Disconnect LinkedIn account\r\n  const disconnectLinkedIn = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await apiClient.disconnectLinkedIn();\r\n      setLinkedInConnected(false);\r\n      setLinkedInAccounts([]);\r\n      setConnectionStatus('LinkedIn account disconnected');\r\n      setMessage('LinkedIn account disconnected successfully!');\r\n      \r\n      // Logout from LinkedIn SDK\r\n      // No SDK logout in this simplified flow\r\n    } catch (error) {\r\n      console.error('Error disconnecting LinkedIn:', error);\r\n      setMessage(`Failed to disconnect LinkedIn: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get status card class based on connection status\r\n  const getStatusCardClass = () => {\r\n    if (connectionStatus.includes('Failed') || connectionStatus.includes('error') || connectionStatus.includes('Error')) {\r\n      return 'status-card error';\r\n    } else if (connectionStatus.includes('successful') || connectionStatus.includes('Connected') || connectionStatus.includes('completed')) {\r\n      return 'status-card success';\r\n    } else {\r\n      return 'status-card info';\r\n    }\r\n  };\r\n\r\n  // Show login form if not authenticated with our system\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"page-container\">\r\n        <div className=\"auth-required\">\r\n          <h1>Please login to continue</h1>\r\n          <p>You need to be logged in to use LinkedIn automation features.</p>\r\n          <button onClick={() => navigate('/')} className=\"btn primary\">\r\n            Go to Login\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"linkedin-page\">\r\n      <div className=\"page-header\">\r\n        <div className=\"header-content\">\r\n          <div className=\"platform-info\">\r\n            <div className=\"platform-icon linkedin\">\r\n              <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"platform-details\">\r\n              <h1>LinkedIn Integration</h1>\r\n              <p>Connect your LinkedIn account to automate posts and engagement</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"page-content\">\r\n        <div className=\"connection-section\">\r\n          <div className={getStatusCardClass()}>\r\n            <div className=\"status-content\">\r\n              <div className=\"status-icon\">\r\n                {linkedInConnected ? (\r\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\r\n                  </svg>\r\n                ) : (\r\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n                  </svg>\r\n                )}\r\n              </div>\r\n              <div className=\"status-text\">\r\n                <h3>{linkedInConnected ? 'LinkedIn Connected' : 'LinkedIn Not Connected'}</h3>\r\n                <p>{connectionStatus}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {!linkedInConnected ? (\r\n            <div className=\"connection-actions\">\r\n              <button\r\n                onClick={handleLinkedInLogin}\r\n                disabled={loading || !linkedInConfig}\r\n                className=\"btn primary linkedin-btn\"\r\n              >\r\n                {loading ? (\r\n                  <>\r\n                    <div className=\"spinner\"></div>\r\n                    Connecting...\r\n                  </>\r\n                ) : !linkedInConfig ? (\r\n                  <>\r\n                    <div className=\"spinner\"></div>\r\n                    Loading...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                      <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\r\n                    </svg>\r\n                    Connect LinkedIn\r\n                  </>\r\n                )}\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"connected-accounts\">\r\n              <h3>Connected Accounts</h3>\r\n              {linkedInAccounts.map((account) => (\r\n                <div key={account.id} className=\"account-card\">\r\n                  <div className=\"account-info\">\r\n                    {account.profilePicture && (\r\n                      <img \r\n                        src={account.profilePicture} \r\n                        alt={account.name}\r\n                        className=\"profile-picture\"\r\n                      />\r\n                    )}\r\n                    <div className=\"account-details\">\r\n                      <h4>{account.name}</h4>\r\n                      <p>LinkedIn Profile</p>\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    onClick={disconnectLinkedIn}\r\n                    disabled={loading}\r\n                    className=\"btn secondary disconnect-btn\"\r\n                  >\r\n                    {loading ? 'Disconnecting...' : 'Disconnect'}\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {message && (\r\n            <div className={`message ${message.includes('Error') || message.includes('Failed') ? 'error' : 'success'}`}>\r\n              {message}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"features-section\">\r\n          <h3>LinkedIn Features</h3>\r\n          <div className=\"features-grid\">\r\n            <div className=\"feature-card\">\r\n              <div className=\"feature-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                  <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n                </svg>\r\n              </div>\r\n              <h4>Auto-Posting</h4>\r\n              <p>Schedule and automate LinkedIn posts</p>\r\n            </div>\r\n            <div className=\"feature-card\">\r\n              <div className=\"feature-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                  <path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"/>\r\n                </svg>\r\n              </div>\r\n              <h4>Comment Management</h4>\r\n              <p>Automatically respond to comments</p>\r\n            </div>\r\n            <div className=\"feature-card\">\r\n              <div className=\"feature-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                  <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n                </svg>\r\n              </div>\r\n              <h4>Analytics</h4>\r\n              <p>Track post performance and engagement</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LinkedInPage; "],"names":["LinkedInPage","navigate","useNavigate","isAuthenticated","logout","useAuth","loading","setLoading","useState","message","setMessage","linkedInConnected","setLinkedInConnected","connectionStatus","setConnectionStatus","linkedInAccounts","setLinkedInAccounts","linkedInConfig","setLinkedInConfig","LINKEDIN_REDIRECT_URI","process","REACT_APP_LINKEDIN_REDIRECT_URI","useEffect","checkLinkedInStatus","handleOAuthCallback","fetchLinkedInConfig","async","response","apiClient","getLinkedInConfig","error","console","urlParams","URLSearchParams","window","location","search","code","get","state","localStorage","getItem","exchangeCodeForToken","history","replaceState","document","title","pathname","removeItem","exchangeLinkedInCode","success","id","profile","name","firstName","lastName","profilePicture","getLinkedInStatus","connected","accounts","log","disconnectLinkedIn","_jsxs","className","children","_jsx","width","height","viewBox","fill","d","includes","map","account","src","alt","onClick","disabled","handleLinkedInLogin","client_id","Math","random","toString","substring","scope","authUrl","encodeURIComponent","setItem","href","_Fragment"],"sourceRoot":""}