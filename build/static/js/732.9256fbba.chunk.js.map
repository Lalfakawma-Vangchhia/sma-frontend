{"version":3,"file":"static/js/732.9256fbba.chunk.js","mappings":"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","sources":["components/igBulkComposer.js","components/ScheduledPostHistory.js","components/InstagramPage.js","components/FacebookUtils.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNotifications } from '../contexts/NotificationContext';\r\nimport apiClient from '../services/apiClient';\r\nimport { fileToBase64 } from './FacebookUtils';\r\nimport './igBulkComposer.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction IgBulkComposer({ selectedAccount, onClose }) {\r\n  const { addNotification } = useNotifications();\r\n\r\n  // Strategy step state\r\n  const [strategyData, setStrategyData] = useState({\r\n    promptTemplate: '',\r\n    customStrategyTemplate: '',\r\n    brandName: '',\r\n    hookIdea: '',\r\n    features: '',\r\n    location: '',\r\n    phone: '',\r\n    website: '',\r\n    callToAction: '',\r\n    imagePrompt: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    frequency: 'daily',\r\n    customCron: '',\r\n    timeSlot: '09:00'\r\n  });\r\n\r\n  // Composer grid state\r\n  const [composerRows, setComposerRows] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  // const [editingCell, setEditingCell] = useState(null);\r\n  const [dragStartRow, setDragStartRow] = useState(null);\r\n\r\n  // Post type state\r\n  const [postType, setPostType] = useState('photo'); // photo, carousel, reel\r\n  const [carouselImageCount, setCarouselImageCount] = useState(2);\r\n\r\n  // Calendar preview state\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n\r\n  // Queue state\r\n  const [isScheduling, setIsScheduling] = useState(false);\r\n  const [scheduleProgress, setScheduleProgress] = useState(0);\r\n\r\n  // Expanded view state\r\n  const [expandedCaption, setExpandedCaption] = useState(null);\r\n  const [mediaPreviewModal, setMediaPreviewModal] = useState(null);\r\n  const [carouselReorderModal, setCarouselReorderModal] = useState(null);\r\n  const [thumbnailPreviewModal, setThumbnailPreviewModal] = useState(null);\r\n  const [setScheduledGridRows] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  // Prompt templates for Instagram\r\n  const [promptTemplates] = useState([\r\n    { id: 1, name: 'Daily Inspiration', prompt: 'Share an inspiring quote or motivational message for your Instagram audience' },\r\n    { id: 2, name: 'Product Showcase', prompt: 'Highlight your best products with engaging descriptions and hashtags' },\r\n    { id: 3, name: 'Behind the Scenes', prompt: 'Share behind-the-scenes content about your business or team' },\r\n    { id: 4, name: 'Customer Spotlight', prompt: 'Feature customer testimonials or success stories' },\r\n    { id: 5, name: 'Industry Tips', prompt: 'Share valuable tips and insights related to your industry' },\r\n    { id: 6, name: 'Lifestyle Content', prompt: 'Share lifestyle content that resonates with your audience' },\r\n    { id: 7, name: 'User Generated Content', prompt: 'Repost and credit amazing content from your community' },\r\n    { id: 8, name: 'Custom', prompt: 'custom' }\r\n  ]);\r\n\r\n  const gridRef = useRef(null);\r\n  const carouselInputRefs = useRef({});\r\n\r\n  // Initialize composer with default rows\r\n  useEffect(() => {\r\n    if (strategyData.startDate && strategyData.frequency) {\r\n      generateInitialRows();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [strategyData.startDate, strategyData.endDate, strategyData.frequency, strategyData.timeSlot]);\r\n\r\n  const generateInitialRows = () => {\r\n    if (!strategyData.startDate) return;\r\n\r\n    const startDateParts = strategyData.startDate.split('-');\r\n    const startDate = new Date(parseInt(startDateParts[0]), parseInt(startDateParts[1]) - 1, parseInt(startDateParts[2]));\r\n\r\n    let endDate = null;\r\n    if (strategyData.endDate) {\r\n      const endDateParts = strategyData.endDate.split('-');\r\n      endDate = new Date(parseInt(endDateParts[0]), parseInt(endDateParts[1]) - 1, parseInt(endDateParts[2]));\r\n    }\r\n\r\n    const rows = [];\r\n    const maxDays = 30; // Instagram's 30-day limit\r\n    let currentDate = new Date(startDate);\r\n    let dayCount = 0;\r\n    let rowCount = 0;\r\n\r\n    if (!endDate) {\r\n      // Format as YYYY-MM-DD using local date parts (same as multi-day logic)\r\n      const yyyy = startDate.getFullYear();\r\n      const mm = String(startDate.getMonth() + 1).padStart(2, '0');\r\n      const dd = String(startDate.getDate()).padStart(2, '0');\r\n      const formattedDate = `${yyyy}-${mm}-${dd}`;\r\n      rows.push({\r\n        id: `row-0`,\r\n        caption: '',\r\n        mediaFile: null,\r\n        mediaPreview: null,\r\n        thumbnailFile: null,\r\n        thumbnailPreview: null,\r\n        postType: postType.toLowerCase(),\r\n        carouselImageCount: carouselImageCount,\r\n        carouselImages: [],\r\n        scheduledDate: formattedDate,\r\n        scheduledTime: strategyData.timeSlot,\r\n        status: 'draft',\r\n        isSelected: false,\r\n        carouselUploading: false\r\n      });\r\n    } else {\r\n      // Fix: include the end date by using <= in the comparison\r\n      while (dayCount < maxDays && rowCount < 30) {\r\n        if (endDate && currentDate > endDate) break;\r\n        const maxAllowedDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\r\n        if (currentDate > maxAllowedDate) break;\r\n\r\n        let shouldInclude = false;\r\n        switch (strategyData.frequency) {\r\n          case 'daily':\r\n            shouldInclude = true;\r\n            break;\r\n          case 'weekly':\r\n            shouldInclude = currentDate.getDay() === startDate.getDay();\r\n            break;\r\n          case 'monthly':\r\n            shouldInclude = currentDate.getDate() === startDate.getDate();\r\n            break;\r\n          case 'custom':\r\n            shouldInclude = true;\r\n            break;\r\n          default:\r\n            shouldInclude = true;\r\n        }\r\n\r\n        if (shouldInclude) {\r\n          // Format as YYYY-MM-DD using local date parts\r\n          const yyyy = currentDate.getFullYear();\r\n          const mm = String(currentDate.getMonth() + 1).padStart(2, '0');\r\n          const dd = String(currentDate.getDate()).padStart(2, '0');\r\n          const formattedDate = `${yyyy}-${mm}-${dd}`;\r\n          rows.push({\r\n            id: `row-${rowCount}`,\r\n            caption: '',\r\n            mediaFile: null,\r\n            mediaPreview: null,\r\n            thumbnailFile: null,\r\n            thumbnailPreview: null,\r\n            postType: postType.toLowerCase(),\r\n            carouselImageCount: carouselImageCount,\r\n            carouselImages: [],\r\n            scheduledDate: formattedDate,\r\n            scheduledTime: strategyData.timeSlot,\r\n            status: 'draft',\r\n            isSelected: false,\r\n            carouselUploading: false\r\n          });\r\n          rowCount++;\r\n        }\r\n        // Fix: increment date at the end, and break if we've reached the end date\r\n        if (endDate && currentDate.getTime() === endDate.getTime()) break;\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n        dayCount++;\r\n      }\r\n    }\r\n    setComposerRows(rows);\r\n  };\r\n\r\n  const handleStrategyChange = (field, value) => {\r\n    setStrategyData(prev => {\r\n      const newData = { ...prev, [field]: value };\r\n      // If start date is changed and end date is before it, clear end date\r\n      if (field === 'startDate' && prev.endDate && value > prev.endDate) {\r\n        newData.endDate = '';\r\n      }\r\n      return newData;\r\n    });\r\n\r\n    // If prompt template is selected, apply it to all rows\r\n    if (field === 'promptTemplate' && value && value !== 'custom') {\r\n      setComposerRows(prev =>\r\n        prev.map(row => ({\r\n          ...row,\r\n          caption: value\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  // Update post type for all rows\r\n  const handlePostTypeChange = (newPostType) => {\r\n    setPostType(newPostType);\r\n    setComposerRows(prev =>\r\n      prev.map(row => ({\r\n        ...row,\r\n        postType: newPostType.toLowerCase(),\r\n        carouselImageCount: newPostType === 'carousel' ? carouselImageCount : null,\r\n        carouselImages: newPostType === 'carousel' ? (row.carouselImages || []) : [],\r\n        // Clear media for photo/reel when switching to carousel\r\n        mediaFile: newPostType === 'carousel' ? null : row.mediaFile,\r\n        mediaPreview: newPostType === 'carousel' ? null : row.mediaPreview,\r\n        // Clear thumbnail when switching away from reel\r\n        thumbnailFile: newPostType === 'reel' ? row.thumbnailFile : null,\r\n        thumbnailPreview: newPostType === 'reel' ? row.thumbnailPreview : null\r\n      }))\r\n    );\r\n  };\r\n\r\n  // Update carousel image count for all rows\r\n  const handleCarouselImageCountChange = (newCount) => {\r\n    setCarouselImageCount(newCount);\r\n    setComposerRows(prev =>\r\n      prev.map(row => ({\r\n        ...row,\r\n        carouselImageCount: row.postType === 'carousel' ? newCount : row.carouselImageCount\r\n      }))\r\n    );\r\n  };\r\n\r\n  const handleRowSelect = (rowId) => {\r\n    setSelectedRows(prev => prev.includes(rowId) ? prev.filter(id => id !== rowId) : [...prev, rowId]);\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedRows.length === composerRows.length) {\r\n      setSelectedRows([]);\r\n    } else {\r\n      setSelectedRows(composerRows.map(row => row.id));\r\n    }\r\n  };\r\n\r\n  const handleCellEdit = (rowId, field, value) => {\r\n    setComposerRows(prev =>\r\n      prev.map(row =>\r\n        row.id === rowId\r\n          ? {\r\n            ...row,\r\n            [field]: field === 'postType' ? value.toLowerCase() : value,\r\n            status: (() => {\r\n              // For carousel posts, check if we have enough images\r\n              if (field === 'postType' && value.toLowerCase() === 'carousel') {\r\n                return 'draft'; // Reset status when switching to carousel\r\n              }\r\n\r\n              // For carousel posts, validate image count\r\n              if (row.postType === 'carousel') {\r\n                const hasCaption = (row.caption || '').trim();\r\n                const hasEnoughImages = (row.carouselImages || []).length >= 2;\r\n                return hasCaption && hasEnoughImages ? 'ready' : 'draft';\r\n              }\r\n\r\n              // For other post types, use existing logic\r\n              if (field === 'caption' || field === 'mediaFile' || field === 'mediaPreview') {\r\n                const hasCaption = field === 'caption' ? value.trim() : (row.caption || '').trim();\r\n                const hasMedia = field === 'mediaFile' ? value : (row.mediaFile || row.mediaPreview);\r\n                return hasCaption && hasMedia ? 'ready' : 'draft';\r\n              }\r\n\r\n              return row.status;\r\n            })()\r\n          }\r\n          : row\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleMediaUpload = async (rowId, event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    // Find the row to determine post type\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (!row) return;\r\n\r\n    // --- REELS VIDEO UPLOAD LOGIC ---\r\n    if (row.postType === 'reel') {\r\n      alert('Your video is converted to: 1080x1920 as instagram policy.');\r\n      // Proceed to upload to backend as before...\r\n    }\r\n\r\n    // --- PHOTO/CAROUSEL LOGIC (unchanged) ---\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      setComposerRows(prev =>\r\n        prev.map(row =>\r\n          row.id === rowId\r\n            ? {\r\n              ...row,\r\n              mediaFile: file,\r\n              mediaPreview: e.target.result,\r\n              status: (row.caption || '').trim() ? 'ready' : 'draft'\r\n            }\r\n            : row\r\n        )\r\n      );\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const handleGenerateMedia = async (rowId) => {\r\n    try {\r\n      const row = composerRows.find(r => r.id === rowId);\r\n      if (!row || !(row.caption || '').trim()) {\r\n        alert('Please add a caption first to generate an image.');\r\n        return;\r\n      }\r\n\r\n      console.log(`Generating image for row ${rowId} with caption: ${row.caption.substring(0, 50)}...`);\r\n\r\n      // Truncate caption to 500 characters for image generation\r\n      const imagePrompt = row.caption.trim().substring(0, 500);\r\n      console.log(`Using image prompt (truncated): ${imagePrompt.substring(0, 100)}...`);\r\n\r\n      const response = await apiClient.generateInstagramImage(imagePrompt, 'feed');\r\n\r\n      if (response.success && response.data && response.data.image_url) {\r\n        console.log(`Successfully generated image for row ${rowId}:`, response.data.image_url);\r\n        setComposerRows(prev =>\r\n          prev.map(r =>\r\n            r.id === rowId\r\n              ? {\r\n                ...r,\r\n                mediaFile: null,\r\n                mediaPreview: response.data.image_url,\r\n                status: (r.caption || '').trim() ? 'ready' : 'draft'\r\n              }\r\n              : r\r\n          )\r\n        );\r\n      } else {\r\n        console.log(`Failed to generate image for row ${rowId}:`, response);\r\n        alert('Failed to generate image. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error generating image for row ${rowId}:`, error);\r\n      alert('Failed to generate image. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleGenerateAllCaptions = async () => {\r\n    if (selectedRows.length === 0) {\r\n      alert('Please select at least one row to generate captions for.');\r\n      return;\r\n    }\r\n\r\n    if (!strategyData.promptTemplate) {\r\n      alert('Please select a strategy template first.');\r\n      return;\r\n    }\r\n\r\n    setIsScheduling(true);\r\n    setScheduleProgress(0);\r\n\r\n    try {\r\n      const selectedComposerRows = composerRows.filter(row => selectedRows.includes(row.id));\r\n      const captions = [];\r\n\r\n      // Create the base prompt based on the selected template type\r\n      let prompt = '';\r\n\r\n      if (strategyData.promptTemplate === 'custom') {\r\n        // Build a detailed prompt for custom templates\r\n        prompt = `\r\n          Brand Name: ${strategyData.brandName || 'Not specified'}\r\n          Hook Idea: ${strategyData.hookIdea || 'Not specified'}\r\n          Key Features: ${strategyData.features || 'Not specified'}\r\n          Location: ${strategyData.location || 'Not specified'}\r\n          Phone: ${strategyData.phone || 'Not specified'}\r\n          Website: ${strategyData.website || 'Not specified'}\r\n          Call to Action: ${strategyData.callToAction || 'Not specified'}\r\n          Image Prompt: ${strategyData.imagePrompt || 'Not specified'}\r\n          \r\n          Custom Template:\r\n          ${strategyData.customStrategyTemplate || ''}\r\n        `;\r\n      } else {\r\n        // Use the selected predefined template\r\n        const selectedTemplate = promptTemplates.find(t => t.prompt === strategyData.promptTemplate);\r\n        if (!selectedTemplate) {\r\n          alert('Invalid strategy template selected.');\r\n          setIsScheduling(false);\r\n          return;\r\n        }\r\n        prompt = selectedTemplate.prompt;\r\n      }\r\n\r\n      // Generate captions for each selected row\r\n      for (let i = 0; i < selectedComposerRows.length; i++) {\r\n        try {\r\n          const row = selectedComposerRows[i];\r\n          const context = {\r\n            scheduledDate: row.scheduledDate,\r\n            // Add any other context you want to include\r\n          };\r\n\r\n          // Add context to the prompt\r\n          const fullPrompt = `${prompt}\\n\\nContext: ${JSON.stringify(context, null, 2)}`;\r\n\r\n          const captionResponse = await apiClient.generateInstagramCaption(fullPrompt);\r\n\r\n          if (captionResponse.success) {\r\n            captions.push({\r\n              content: captionResponse.content || captionResponse.generated_text || 'No content generated',\r\n              context: context.scheduledDate,\r\n              success: true\r\n            });\r\n          } else {\r\n            console.error('Caption generation failed:', captionResponse.error);\r\n            captions.push({\r\n              content: `Failed to generate caption for: ${context.scheduledDate}`,\r\n              context: context.scheduledDate,\r\n              success: false,\r\n              error: captionResponse.error || 'Unknown error'\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error generating caption:', error);\r\n          captions.push({\r\n            content: `Error generating caption for: ${selectedComposerRows[i].scheduledDate}`,\r\n            context: selectedComposerRows[i].scheduledDate,\r\n            success: false,\r\n            error: error.message\r\n          });\r\n        }\r\n\r\n        // Update progress\r\n        setScheduleProgress(Math.round(((i + 1) / selectedComposerRows.length) * 100));\r\n      }\r\n\r\n      // Update the rows with generated captions\r\n      setComposerRows(prev =>\r\n        prev.map(row => {\r\n          if (!selectedRows.includes(row.id)) return row;\r\n\r\n          const caption = captions.find(c => c.context === row.scheduledDate);\r\n          if (caption && caption.success) {\r\n            return {\r\n              ...row,\r\n              caption: caption.content,\r\n              status: 'ready'\r\n            };\r\n          }\r\n          return row;\r\n        })\r\n      );\r\n\r\n      // Show success/failure summary\r\n      const successCount = captions.filter(c => c.success).length;\r\n      const failedCount = captions.length - successCount;\r\n\r\n      let message = '';\r\n      if (successCount > 0 && failedCount === 0) {\r\n        message = `Successfully generated captions for ${successCount} ${successCount === 1 ? 'post' : 'posts'}.`;\r\n      } else if (successCount > 0) {\r\n        message = `Generated ${successCount} captions successfully, but failed to generate ${failedCount}.`;\r\n      } else {\r\n        message = 'Failed to generate any captions. Please try again.';\r\n      }\r\n\r\n      alert(message);\r\n    } catch (error) {\r\n      console.error('Unexpected error in handleGenerateAllCaptions:', error);\r\n      alert('An unexpected error occurred while generating captions. Please try again.');\r\n    } finally {\r\n      setIsScheduling(false);\r\n      setScheduleProgress(0);\r\n    }\r\n  };\r\n\r\n  const handleGenerateAllImages = async () => {\r\n    if (selectedRows.length === 0) {\r\n      alert('Please select at least one row to generate images.');\r\n      return;\r\n    }\r\n    setIsScheduling(true);\r\n    setScheduleProgress(0);\r\n    try {\r\n      const selectedComposerRows = composerRows.filter(row => selectedRows.includes(row.id));\r\n      let successCount = 0;\r\n      let errorCount = 0;\r\n\r\n      for (let i = 0; i < selectedComposerRows.length; i++) {\r\n        const row = selectedComposerRows[i];\r\n\r\n        if (!row.caption || !(row.caption || '').trim()) {\r\n          console.log(`Skipping image generation for row ${row.id} - no caption available`);\r\n          continue;\r\n        }\r\n\r\n        try {\r\n          console.log(`Generating image for row ${row.id} with caption: ${row.caption.substring(0, 50)}...`);\r\n\r\n          // Truncate caption to 500 characters for image generation\r\n          const imagePrompt = row.caption.trim().substring(0, 500);\r\n          console.log(`Using image prompt (truncated): ${imagePrompt.substring(0, 100)}...`);\r\n\r\n          // Generate image using Stability AI with the caption as prompt\r\n          const response = await apiClient.generateInstagramImage(imagePrompt, 'feed');\r\n\r\n          if (response.success && response.data && response.data.image_url) {\r\n            console.log(`Successfully generated image for row ${row.id}:`, response.data.image_url);\r\n            setComposerRows(prev =>\r\n              prev.map(r =>\r\n                r.id === row.id\r\n                  ? {\r\n                    ...r,\r\n                    mediaFile: null,\r\n                    mediaPreview: response.data.image_url,\r\n                    status: (r.caption || '').trim() ? 'ready' : 'draft'\r\n                  }\r\n                  : r\r\n              )\r\n            );\r\n            successCount++;\r\n          } else {\r\n            console.log(`Failed to generate image for row ${row.id}:`, response);\r\n            errorCount++;\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error generating image for row ${row.id}:`, error);\r\n          errorCount++;\r\n        }\r\n      }\r\n\r\n      if (successCount > 0) {\r\n        alert(`Image generation completed! Successfully generated ${successCount} images${errorCount > 0 ? `, ${errorCount} failed` : ''}`);\r\n      } else {\r\n        alert('Failed to generate any images. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in bulk image generation:', error);\r\n      alert('Failed to generate images. Please try again.');\r\n    } finally {\r\n      setIsScheduling(false);\r\n      setScheduleProgress(0);\r\n    }\r\n  };\r\n\r\n  const handleExpandCaption = (rowId) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row) setExpandedCaption(row);\r\n  };\r\n\r\n  const handleViewMedia = (rowId) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row && (row.mediaPreview || row.mediaFile)) setMediaPreviewModal(row);\r\n  };\r\n\r\n  const handleSaveExpandedCaption = (rowId, newCaption) => {\r\n    setComposerRows(prev =>\r\n      prev.map(row =>\r\n        row.id === rowId\r\n          ? { ...row, caption: newCaption, status: ((newCaption || '').trim() && (row.mediaFile || row.mediaPreview)) ? 'ready' : 'draft' }\r\n          : row\r\n      )\r\n    );\r\n    setExpandedCaption(null);\r\n  };\r\n\r\n  const handleThumbnailUpload = async (rowId, event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    // Validate file type\r\n    if (!file.type.startsWith('image/')) {\r\n      alert('Please select an image file for the thumbnail.');\r\n      return;\r\n    }\r\n\r\n    // Show loading state\r\n    setComposerRows(prev =>\r\n      prev.map(row =>\r\n        row.id === rowId\r\n          ? {\r\n            ...row,\r\n            thumbnailUploading: true\r\n          }\r\n          : row\r\n      )\r\n    );\r\n\r\n    try {\r\n      console.log(`📤 Uploading thumbnail for row ${rowId}: ${file.name}`);\r\n\r\n      // Upload thumbnail to Cloudinary via backend\r\n      const uploadResponse = await apiClient.uploadThumbnailToCloudinary(file);\r\n\r\n      if (uploadResponse && uploadResponse.success && uploadResponse.data && uploadResponse.data.url) {\r\n        console.log(`✅ Thumbnail uploaded successfully: ${uploadResponse.data.url}`);\r\n\r\n        // Update row with Cloudinary URL\r\n        setComposerRows(prev =>\r\n          prev.map(row =>\r\n            row.id === rowId\r\n              ? {\r\n                ...row,\r\n                thumbnailFile: null, // Clear file since we have URL now\r\n                thumbnailPreview: uploadResponse.data.url, // Use Cloudinary URL\r\n                thumbnailUrl: uploadResponse.data.url, // Store Cloudinary URL\r\n                thumbnailUploading: false\r\n              }\r\n              : row\r\n          )\r\n        );\r\n\r\n        alert('Thumbnail uploaded successfully! It will be optimized for Instagram reel cover image requirements.');\r\n      } else {\r\n        console.error(`❌ Failed to upload thumbnail:`, uploadResponse);\r\n        alert('Failed to upload thumbnail. Please try again.');\r\n\r\n        // Clear loading state\r\n        setComposerRows(prev =>\r\n          prev.map(row =>\r\n            row.id === rowId\r\n              ? {\r\n                ...row,\r\n                thumbnailUploading: false\r\n              }\r\n              : row\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading thumbnail:', error);\r\n      alert(`Failed to upload thumbnail: ${error.message}`);\r\n\r\n      // Clear loading state\r\n      setComposerRows(prev =>\r\n        prev.map(row =>\r\n          row.id === rowId\r\n            ? {\r\n              ...row,\r\n              thumbnailUploading: false\r\n            }\r\n            : row\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleRemoveThumbnail = (rowId) => {\r\n    setComposerRows(prev =>\r\n      prev.map(row =>\r\n        row.id === rowId ? {\r\n          ...row,\r\n          thumbnailFile: null,\r\n          thumbnailPreview: null,\r\n          thumbnailUrl: null // Clear Cloudinary URL as well\r\n        } : row\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleRemoveMedia = (rowId) => {\r\n    setComposerRows(prev =>\r\n      prev.map(row =>\r\n        row.id === rowId ? {\r\n          ...row,\r\n          mediaFile: null,\r\n          mediaPreview: null,\r\n          thumbnailFile: null,\r\n          thumbnailPreview: null,\r\n          carouselImages: row.postType === 'carousel' ? [] : null,\r\n          status: (row.caption || '').trim() ? 'draft' : 'draft'\r\n        } : row\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleGenerateCarousel = async (rowId) => {\r\n    try {\r\n      const row = composerRows.find(r => r.id === rowId);\r\n      if (!row || !(row.caption || '').trim()) {\r\n        alert('Please add a caption first to generate carousel images.');\r\n        return;\r\n      }\r\n\r\n      console.log(`Generating carousel for row ${rowId} with caption: ${row.caption.substring(0, 50)}...`);\r\n\r\n      const imagePrompt = row.caption.trim().substring(0, 500);\r\n      const imageCount = row.carouselImageCount || 3;\r\n\r\n      if (imageCount < 2 || imageCount > 7) {\r\n        alert('Carousel must have between 2 and 7 images.');\r\n        return;\r\n      }\r\n\r\n      console.log(`🎨 Generating ${imageCount} carousel images with prompt: ${imagePrompt}`);\r\n\r\n      const response = await apiClient.generateInstagramCarousel(imagePrompt, imageCount);\r\n\r\n      if (response.success && response.image_urls && response.image_urls.length >= 2) {\r\n        console.log(`Successfully generated carousel for row ${rowId}:`, response.image_urls);\r\n        setComposerRows(prev =>\r\n          prev.map(r =>\r\n            r.id === rowId\r\n              ? {\r\n                ...r,\r\n                carouselImages: response.image_urls,\r\n                status: (() => {\r\n                  const hasCaption = (r.caption || '').trim();\r\n                  const hasEnoughImages = response.image_urls.length >= 2;\r\n                  return hasCaption && hasEnoughImages ? 'ready' : 'draft';\r\n                })()\r\n              }\r\n              : r\r\n          )\r\n        );\r\n      } else {\r\n        console.log(`Failed to generate carousel for row ${rowId}:`, response);\r\n        const errorMsg = response.error || 'Failed to generate enough carousel images. Please try again.';\r\n        alert(`Failed to generate carousel: ${errorMsg}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error generating carousel for row ${rowId}:`, error);\r\n      alert('Error generating carousel images. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleCarouselUpload = async (rowId, event) => {\r\n    const files = Array.from(event.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    const maxImages = row.carouselImageCount || 2;\r\n    const minImages = 2;\r\n\r\n    if (files.length < minImages) {\r\n      alert(`Please select at least ${minImages} images for a carousel post.`);\r\n      return;\r\n    }\r\n\r\n    if (files.length > maxImages) {\r\n      alert(`Please select only ${maxImages} images for this carousel.`);\r\n      return;\r\n    }\r\n\r\n    // Set loading state\r\n    setComposerRows(prev => prev.map(r => r.id === rowId ? { ...r, carouselUploading: true } : r));\r\n\r\n    try {\r\n      const imageUrls = [];\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        if (!file.type.startsWith('image/')) {\r\n          alert(`File ${file.name} is not an image. Please select only image files.`);\r\n          continue;\r\n        }\r\n        const uploadResponse = await apiClient.uploadImageToCloudinary(file);\r\n        if (uploadResponse && uploadResponse.success && uploadResponse.data && uploadResponse.data.url) {\r\n          imageUrls.push(uploadResponse.data.url);\r\n        } else {\r\n          alert(`Failed to upload image ${file.name}. Please try again.`);\r\n          setComposerRows(prev => prev.map(r => r.id === rowId ? { ...r, carouselUploading: false } : r));\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (imageUrls.length >= minImages) {\r\n        setComposerRows(prev =>\r\n          prev.map(r =>\r\n            r.id === rowId\r\n              ? {\r\n                ...r,\r\n                carouselImages: imageUrls,\r\n                status: (() => {\r\n                  const hasCaption = (r.caption || '').trim();\r\n                  const hasEnoughImages = imageUrls.length >= 2;\r\n                  return hasCaption && hasEnoughImages ? 'ready' : 'draft';\r\n                })(),\r\n                carouselUploading: false\r\n              }\r\n              : r\r\n          )\r\n        );\r\n      } else {\r\n        alert(`Please upload at least ${minImages} images for a carousel post.`);\r\n        setComposerRows(prev => prev.map(r => r.id === rowId ? { ...r, carouselUploading: false } : r));\r\n      }\r\n\r\n      if (carouselInputRefs.current[rowId]) {\r\n        carouselInputRefs.current[rowId].value = '';\r\n      }\r\n    } catch (error) {\r\n      setComposerRows(prev => prev.map(r => r.id === rowId ? { ...r, carouselUploading: false } : r));\r\n      alert('Error uploading carousel images. Please try again.');\r\n    }\r\n  };\r\n\r\n  // New handler functions for enhanced media functionality\r\n  const handleViewCarouselImage = (rowId, imageIndex) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row && row.carouselImages && row.carouselImages[imageIndex]) {\r\n      setMediaPreviewModal({\r\n        ...row,\r\n        mediaPreview: row.carouselImages[imageIndex],\r\n        mediaType: 'carousel-image',\r\n        imageIndex: imageIndex,\r\n        isNested: !!carouselReorderModal // Flag to indicate this is opened from another modal\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemoveCarouselImage = (rowId, imageIndex) => {\r\n    setComposerRows(prev =>\r\n      prev.map(r =>\r\n        r.id === rowId\r\n          ? {\r\n            ...r,\r\n            carouselImages: r.carouselImages.filter((_, index) => index !== imageIndex),\r\n            status: (() => {\r\n              const newImages = r.carouselImages.filter((_, index) => index !== imageIndex);\r\n              const hasCaption = (r.caption || '').trim();\r\n              const hasEnoughImages = newImages.length >= 2;\r\n              return hasCaption && hasEnoughImages ? 'ready' : 'draft';\r\n            })()\r\n          }\r\n          : r\r\n      )\r\n    );\r\n    console.log(`🗑️ Removed carousel image ${imageIndex} from row ${rowId}`);\r\n  };\r\n\r\n  const handleViewCarousel = (rowId) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row && row.carouselImages && row.carouselImages.length > 0) {\r\n      setCarouselReorderModal(row);\r\n    }\r\n  };\r\n\r\n  const handleReorderCarouselImages = (rowId, newOrder) => {\r\n    setComposerRows(prev =>\r\n      prev.map(r =>\r\n        r.id === rowId\r\n          ? {\r\n            ...r,\r\n            carouselImages: newOrder\r\n          }\r\n          : r\r\n      )\r\n    );\r\n    console.log(`🔄 Reordered carousel images for row ${rowId}`);\r\n  };\r\n\r\n  const handleViewThumbnail = (rowId) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row && row.thumbnailPreview) {\r\n      setThumbnailPreviewModal({\r\n        ...row,\r\n        mediaPreview: row.thumbnailPreview,\r\n        mediaType: 'thumbnail'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemoveCarouselImages = (rowId) => {\r\n    setComposerRows(prev =>\r\n      prev.map(r =>\r\n        r.id === rowId\r\n          ? {\r\n            ...r,\r\n            carouselImages: [],\r\n            status: 'draft' // Always reset to draft when removing images\r\n          }\r\n          : r\r\n      )\r\n    );\r\n    console.log(`🗑️ Removed carousel images for row ${rowId}`);\r\n  };\r\n\r\n \r\n\r\n  const handleBulkDelete = () => {\r\n    setComposerRows(prev => prev.filter(row => !selectedRows.includes(row.id)));\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  const handleDragStart = (rowId) => setDragStartRow(rowId);\r\n  const handleDragOver = (e) => e.preventDefault();\r\n  const handleDrop = (targetRowId) => {\r\n    if (dragStartRow && dragStartRow !== targetRowId) {\r\n      const rows = [...composerRows];\r\n      const sourceIndex = rows.findIndex(row => row.id === dragStartRow);\r\n      const targetIndex = rows.findIndex(row => row.id === targetRowId);\r\n      const [movedRow] = rows.splice(sourceIndex, 1);\r\n      rows.splice(targetIndex, 0, movedRow);\r\n      setComposerRows(rows);\r\n    }\r\n    setDragStartRow(null);\r\n  };\r\n\r\n  const handleScheduleAll = async () => {\r\n    if (!selectedAccount || composerRows.length === 0) return;\r\n    setIsScheduling(true);\r\n    setScheduleProgress(0);\r\n\r\n    try {\r\n      const readyRows = composerRows.filter(row => row.status === 'ready');\r\n      console.log(`🔄 Starting bulk scheduling for ${readyRows.length} posts...`);\r\n\r\n      // Progress tracking for media processing\r\n      let processedCount = 0;\r\n      const totalPosts = readyRows.length;\r\n\r\n      const postsWithMedia = await Promise.all(\r\n        readyRows.map(async (row, index) => {\r\n          const basePost = {\r\n            caption: row.caption,\r\n            scheduled_datetime: `${row.scheduledDate}T${row.scheduledTime}:00+05:30`,\r\n            scheduled_date: row.scheduledDate,\r\n            scheduled_time: row.scheduledTime,\r\n            post_type: (row.postType || 'photo').toLowerCase()\r\n          };\r\n\r\n          if (row.postType === 'photo') {\r\n            if (row.mediaFile) {\r\n              const result = {\r\n                ...basePost,\r\n                media_file: await fileToBase64(row.mediaFile),\r\n                media_filename: row.mediaFile.name\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            } else if (row.mediaPreview && row.mediaPreview.startsWith('data:')) {\r\n              const result = {\r\n                ...basePost,\r\n                media_file: row.mediaPreview,\r\n                media_filename: 'generated_image.jpg'\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            } else if (row.mediaPreview && row.mediaPreview.startsWith('http')) {\r\n              const result = {\r\n                ...basePost,\r\n                image_prompt: row.caption.substring(0, 200)\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            } else {\r\n              const result = {\r\n                ...basePost,\r\n                image_prompt: strategyData.imagePrompt || row.caption.substring(0, 200)\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            }\r\n          } else if (row.postType === 'carousel') {\r\n            if (row.carouselImages && row.carouselImages.length > 0) {\r\n              const carouselFiles = row.carouselImages;\r\n              const result = {\r\n                ...basePost,\r\n                carousel_images: carouselFiles,\r\n                carousel_filenames: carouselFiles.map((_, idx) => `carousel_image_${idx + 1}.jpg`)\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            } else {\r\n              const result = {\r\n                ...basePost,\r\n                carousel_image_count: row.carouselImageCount || 2,\r\n                image_prompt: strategyData.imagePrompt || row.caption.substring(0, 200)\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            }\r\n          } else if (row.postType === 'reel') {\r\n            if (row.mediaFile) {\r\n              const result = {\r\n                ...basePost,\r\n                media_file: await fileToBase64(row.mediaFile),\r\n                media_filename: row.mediaFile.name\r\n              };\r\n\r\n              // Add thumbnail if available - prioritize Cloudinary URL over file\r\n              if (row.thumbnailUrl && row.thumbnailUrl.startsWith('http')) {\r\n                result.thumbnail_url = row.thumbnailUrl;\r\n              } else if (row.thumbnailPreview && row.thumbnailPreview.startsWith('http')) {\r\n                result.thumbnail_url = row.thumbnailPreview;\r\n              } else if (row.thumbnailFile) {\r\n                result.thumbnail_file = await fileToBase64(row.thumbnailFile);\r\n                result.thumbnail_filename = row.thumbnailFile.name;\r\n              }\r\n\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            } else if (row.mediaPreview && row.mediaPreview.startsWith('data:')) {\r\n              const result = {\r\n                ...basePost,\r\n                media_file: row.mediaPreview,\r\n                media_filename: 'generated_video.mp4'\r\n              };\r\n\r\n              // Add thumbnail if available - prioritize Cloudinary URL over file\r\n              if (row.thumbnailUrl && row.thumbnailUrl.startsWith('http')) {\r\n                result.thumbnail_url = row.thumbnailUrl;\r\n              } else if (row.thumbnailPreview && row.thumbnailPreview.startsWith('http')) {\r\n                result.thumbnail_url = row.thumbnailPreview;\r\n              } else if (row.thumbnailFile) {\r\n                result.thumbnail_file = await fileToBase64(row.thumbnailFile);\r\n                result.thumbnail_filename = row.thumbnailFile.name;\r\n              }\r\n\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            } else {\r\n              const result = {\r\n                ...basePost,\r\n                image_prompt: strategyData.imagePrompt || row.caption.substring(0, 200)\r\n              };\r\n              processedCount++;\r\n              setScheduleProgress((processedCount / totalPosts) * 30);\r\n              return result;\r\n            }\r\n          }\r\n\r\n          processedCount++;\r\n          setScheduleProgress((processedCount / totalPosts) * 30);\r\n          return basePost;\r\n        })\r\n      );\r\n\r\n      // Final normalization: ensure all outgoing post_type values are lowercase\r\n      const normalizedPostsWithMedia = postsWithMedia.map(post => ({\r\n        ...post,\r\n        post_type: (post.post_type || 'photo').toLowerCase()\r\n      }));\r\n\r\n      const bulkData = {\r\n        social_account_id: selectedAccount.id,\r\n        posts: normalizedPostsWithMedia\r\n      };\r\n\r\n      console.log(`🚀 Sending ${normalizedPostsWithMedia.length} posts to backend for scheduling...`);\r\n      console.log('📋 Bulk data being sent:', JSON.stringify(bulkData, null, 2));\r\n      setScheduleProgress(40); // 40% for API call start\r\n\r\n      const response = await apiClient.bulkScheduleInstagramPosts(bulkData);\r\n      setScheduleProgress(90); // 90% for API response\r\n      console.log('Bulk schedule response:', response);\r\n      if (response && response.success) {\r\n        console.log(`✅ Successfully scheduled ${response.scheduled_posts?.length || 0} posts`);\r\n        console.log('📋 Response:', response);\r\n        \r\n        setComposerRows(prev =>\r\n          prev.map(row =>\r\n            readyRows.some(r => r.id === row.id) ? { ...row, status: 'scheduled' } : row\r\n          )\r\n        );\r\n        setScheduleProgress(100);\r\n        setScheduledGridRows(response.scheduled_posts || []);\r\n        \r\n        // Show success message\r\n        const successMessage = response.message || `Successfully scheduled ${response.scheduled_posts?.length || 0} Instagram posts!`;\r\n        alert(successMessage);\r\n        \r\n        // Add success notification\r\n        addNotification({\r\n          type: 'success',\r\n          platform: 'instagram',\r\n          strategyName: strategyData.promptTemplate === 'custom' ? 'Custom Strategy' : \r\n                       promptTemplates.find(t => t.prompt === strategyData.promptTemplate)?.name || 'Bulk Schedule',\r\n          message: successMessage + ' You\\'ll receive alerts 10 minutes before each post goes live.'\r\n        });\r\n        \r\n        // Redirect to InstagramPage with scheduled posts for grid display\r\n        navigate('/instagram', { state: { scheduledGridRows: response.scheduled_posts || [] } });\r\n      } else if (response && Array.isArray(response.results)) {\r\n        // Handle legacy or alternate backend response\r\n        const successCount = response.results.filter(r => r.success).length;\r\n        const failedCount = response.results.filter(r => !r.success).length;\r\n        let errorMsg = `Scheduled ${successCount} posts successfully.`;\r\n        if (failedCount > 0) {\r\n          errorMsg += `\\n${failedCount} posts failed. Check console for details.`;\r\n          response.results.forEach((result, idx) => {\r\n            if (!result.success) {\r\n              errorMsg += `\\nPost #${idx + 1}: ${result.error || result.message || 'Unknown error'}`;\r\n            }\r\n          });\r\n        }\r\n        alert(errorMsg);\r\n\r\n        // Add success notification for Instagram bulk scheduling\r\n        if (successCount > 0) {\r\n          const selectedTemplate = promptTemplates.find(t => t.prompt === strategyData.promptTemplate);\r\n          const strategyName = selectedTemplate ? selectedTemplate.name : 'Bulk Schedule';\r\n\r\n          addNotification({\r\n            type: 'success',\r\n            platform: 'instagram',\r\n            strategyName: strategyName,\r\n            message: `Successfully scheduled ${successCount} Instagram posts! You'll receive alerts 10 minutes before each post goes live.`\r\n          });\r\n        }\r\n        setComposerRows(prev =>\r\n          prev.map(row => {\r\n            const result = response.results.find(r => r.caption === row.caption && r.scheduled_date === row.scheduledDate);\r\n            if (result) {\r\n              return {\r\n                ...row,\r\n                status: result.success ? 'scheduled' : 'failed',\r\n                error: result.success ? null : (result.error || 'Unknown error')\r\n              };\r\n            }\r\n            return row;\r\n          })\r\n        );\r\n        setScheduleProgress(100);\r\n        setScheduledGridRows(response.results.filter(r => r.success));\r\n        navigate('/instagram', { state: { scheduledGridRows: response.results.filter(r => r.success) } });\r\n      } else {\r\n        let errorMsg = 'Error scheduling Instagram posts.';\r\n        console.error('❌ Bulk scheduling error response:', response);\r\n        \r\n        if (response && response.failed_posts && response.failed_posts.length > 0) {\r\n          errorMsg += `\\n${response.failed_posts.length} posts failed:`;\r\n          response.failed_posts.forEach(fp => {\r\n            errorMsg += `\\nPost #${fp.index + 1}: ${fp.error}`;\r\n          });\r\n          \r\n          // If some posts succeeded, show partial success\r\n          if (response.scheduled_posts && response.scheduled_posts.length > 0) {\r\n            errorMsg = `Partial success: ${response.scheduled_posts.length} posts scheduled, ${response.failed_posts.length} failed.\\n\\nFailed posts:`;\r\n            response.failed_posts.forEach(fp => {\r\n              errorMsg += `\\nPost #${fp.index + 1}: ${fp.error}`;\r\n            });\r\n            \r\n            // Update successful posts\r\n            setComposerRows(prev =>\r\n              prev.map(row => {\r\n                const scheduledPost = response.scheduled_posts.find(sp => sp.caption === row.caption);\r\n                return scheduledPost ? { ...row, status: 'scheduled' } : row;\r\n              })\r\n            );\r\n          }\r\n        } else if (response && response.message) {\r\n          errorMsg += `\\n${response.message}`;\r\n        } else if (response && response.errorData) {\r\n          errorMsg += `\\nAPI Error: ${JSON.stringify(response.errorData)}`;\r\n        }\r\n        alert(errorMsg);\r\n        console.error('Bulk scheduling error:', response);\r\n      }\r\n    } catch (error) {\r\n      let errorMsg = 'Error scheduling Instagram posts. Please try again.';\r\n      // Check if any of the readyRows are reels\r\n      const hasReel = composerRows.filter(row => selectedRows.includes(row.id)).some(row => (row.postType || '').toLowerCase() === 'reel');\r\n      if (error && error.error === 'timeout') {\r\n        if (hasReel) {\r\n          errorMsg = 'Your reel is being processed and will be scheduled soon. Please check back in a few minutes.';\r\n        } else {\r\n          errorMsg = 'Request timed out. Video processing may take longer. Please try again or check your video file size.';\r\n        }\r\n      } else if (error && error.errorData) {\r\n        errorMsg += `\\nAPI Error: ${JSON.stringify(error.errorData)}`;\r\n      } else if (error && error.message) {\r\n        errorMsg += `\\n${error.message}`;\r\n      }\r\n      alert(errorMsg);\r\n      console.error('Bulk scheduling exception:', error);\r\n    } finally {\r\n      setIsScheduling(false);\r\n      setScheduleProgress(0);\r\n    }\r\n  };\r\n\r\n  // Calendar day click logic\r\n  const handleCalendarDateSelect = (date) => {\r\n    setStrategyData(prev => ({\r\n      ...prev,\r\n      startDate: date.toISOString().split('T')[0]\r\n    }));\r\n  };\r\n\r\n  // UI helpers\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case 'published': return '✓';\r\n      case 'failed': return '✗';\r\n      case 'scheduled': return '⏰';\r\n      case 'ready': return '🟢';\r\n      default: return '📝';\r\n    }\r\n  };\r\n  const getStatusClass = (status) => {\r\n    switch (status) {\r\n      case 'published': return 'ig-status-published';\r\n      case 'failed': return 'ig-status-failed';\r\n      case 'scheduled': return 'ig-status-scheduled';\r\n      case 'ready': return 'ig-status-ready';\r\n      default: return 'ig-status-draft';\r\n    }\r\n  };\r\n\r\n  // Calendar helpers\r\n  const generateCalendarDays = (year, month) => {\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\r\n    const days = [];\r\n    for (let i = 0; i < firstDayOfMonth; i++) days.push({ day: null, date: null });\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      const date = new Date(year, month, i);\r\n      days.push({ day: i, date });\r\n    }\r\n    return days;\r\n  };\r\n  const getPostsForDate = (date) => {\r\n    // Format date as YYYY-MM-DD using local date parts\r\n    const yyyy = date.getFullYear();\r\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    const dd = String(date.getDate()).padStart(2, '0');\r\n    const dateString = `${yyyy}-${mm}-${dd}`;\r\n    return composerRows.filter(row => row.scheduledDate === dateString);\r\n  };\r\n\r\n\r\n\r\n  // --- RENDER ---\r\n  return (\r\n    <div className=\"ig-bulk-composer\">\r\n      <div className=\"ig-bulk-composer-header\">\r\n        <h2>Instagram Bulk Composer</h2>\r\n      </div>\r\n\r\n      <div className=\"ig-bulk-composer-content\">\r\n        {/* Strategy Step */}\r\n        <div className=\"ig-strategy-step\">\r\n          <h3>Step 1: Strategy & Schedule</h3>\r\n          <div className=\"ig-strategy-form\">\r\n\r\n            {/* Post Type Selection */}\r\n            <div className=\"ig-form-group\">\r\n              <label>Post Type</label>\r\n              <div className=\"ig-post-type-toggle\">\r\n                <button\r\n                  className={postType === 'photo' ? 'active' : ''}\r\n                  onClick={() => handlePostTypeChange('photo')}\r\n                >\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\r\n                    <polyline points=\"21,15 16,10 5,21\" />\r\n                  </svg>\r\n                  Photo\r\n                </button>\r\n                <button\r\n                  className={postType === 'carousel' ? 'active' : ''}\r\n                  onClick={() => handlePostTypeChange('carousel')}\r\n                >\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\" />\r\n                    <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\" />\r\n                    <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\" />\r\n                  </svg>\r\n                  Carousel\r\n                </button>\r\n                <button\r\n                  className={postType === 'reel' ? 'active' : ''}\r\n                  onClick={() => handlePostTypeChange('reel')}\r\n                >\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <polygon points=\"23 7 16 12 23 17 23 7\" />\r\n                    <rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\" />\r\n                  </svg>\r\n                  Reel\r\n                </button>\r\n              </div>\r\n\r\n              {/* Carousel Image Count */}\r\n              {postType === 'carousel' && (\r\n                <div className=\"ig-form-group\">\r\n                  <label>Number of Images: {carouselImageCount}</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"2\"\r\n                    max=\"7\"\r\n                    value={carouselImageCount}\r\n                    onChange={(e) => handleCarouselImageCountChange(parseInt(e.target.value))}\r\n                    className=\"ig-slider\"\r\n                  />\r\n                  <div className=\"ig-slider-labels\">\r\n                    <span>2</span>\r\n                    <span>3</span>\r\n                    <span>4</span>\r\n                    <span>5</span>\r\n                    <span>6</span>\r\n                    <span>7</span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* AI Image Prompt */}\r\n\r\n            </div>\r\n            <div className=\"ig-form-group\">\r\n              <label>Strategy Template</label>\r\n              <select\r\n                value={strategyData.promptTemplate}\r\n                onChange={(e) => handleStrategyChange('promptTemplate', e.target.value)}\r\n                className=\"ig-form-select\"\r\n              >\r\n                <option value=\"\">Select a template...</option>\r\n                {promptTemplates.map(template => (\r\n                  <option key={template.id} value={template.prompt}>\r\n                    {template.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            {strategyData.promptTemplate === 'custom' && (\r\n              <div className=\"ig-form-group\">\r\n                <label>Brand Information</label>\r\n                <div className=\"ig-form-row\">\r\n                  <div className=\"ig-form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={strategyData.brandName}\r\n                      onChange={(e) => handleStrategyChange('brandName', e.target.value)}\r\n                      placeholder=\"Brand Name\"\r\n                      className=\"ig-form-input\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"ig-form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={strategyData.hookIdea}\r\n                      onChange={(e) => handleStrategyChange('hookIdea', e.target.value)}\r\n                      placeholder=\"Hook Idea (e.g., Tired of the shore?)\"\r\n                      className=\"ig-form-input\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"ig-form-group\">\r\n                  <label>Features (one per line)</label>\r\n                  <textarea\r\n                    value={strategyData.features}\r\n                    onChange={(e) => handleStrategyChange('features', e.target.value)}\r\n                    placeholder=\"✅ Feature 1\\n✅ Feature 2\\n✅ Feature 3\"\r\n                    className=\"ig-form-input\"\r\n                    rows=\"3\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"ig-form-row\">\r\n                  <div className=\"ig-form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={strategyData.location}\r\n                      onChange={(e) => handleStrategyChange('location', e.target.value)}\r\n                      placeholder=\"Location\"\r\n                      className=\"ig-form-input\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"ig-form-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={strategyData.phone}\r\n                      onChange={(e) => handleStrategyChange('phone', e.target.value)}\r\n                      placeholder=\"Phone Number\"\r\n                      className=\"ig-form-input\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"ig-form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={strategyData.website}\r\n                    onChange={(e) => handleStrategyChange('website', e.target.value)}\r\n                    placeholder=\"Website URL\"\r\n                    className=\"ig-form-input\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"ig-form-group\">\r\n                  <textarea\r\n                    value={strategyData.callToAction}\r\n                    onChange={(e) => handleStrategyChange('callToAction', e.target.value)}\r\n                    placeholder=\"Call to Action (e.g., Book your appointment today!)\"\r\n                    className=\"ig-form-input\"\r\n                    rows=\"2\"\r\n                  />\r\n                </div>\r\n\r\n                <small className=\"ig-form-help\">\r\n                  This information will be used to generate captions that follow your brand's style and approach.\r\n                </small>\r\n              </div>\r\n            )}\r\n            <div className=\"ig-form-row\">\r\n              <div className=\"ig-form-group\">\r\n                <label>Start Date</label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={strategyData.startDate}\r\n                  onChange={(e) => handleStrategyChange('startDate', e.target.value)}\r\n                  className=\"ig-form-input\"\r\n                />\r\n              </div>\r\n              <div className=\"ig-form-group\">\r\n                <label>End Date (Optional)</label>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={strategyData.endDate}\r\n                    onChange={(e) => handleStrategyChange('endDate', e.target.value)}\r\n                    className=\"ig-form-input\"\r\n                    min={strategyData.startDate}\r\n                    disabled={!strategyData.startDate}\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => handleStrategyChange('endDate', '')}\r\n                    className=\"ig-btn ig-btn-secondary ig-btn-small\"\r\n                    disabled={!strategyData.endDate}\r\n                    title=\"Clear end date (single day schedule)\"\r\n                  >\r\n                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                      <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                      <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                    </svg>\r\n                    Clear\r\n                  </button>\r\n                </div>\r\n                <small className=\"ig-form-help\">\r\n                  Leave empty for single day schedule\r\n                </small>\r\n              </div>\r\n              <div className=\"ig-form-group\">\r\n                <label>Frequency</label>\r\n                <select\r\n                  value={strategyData.frequency}\r\n                  onChange={(e) => handleStrategyChange('frequency', e.target.value)}\r\n                  className=\"ig-form-select\"\r\n                >\r\n                  <option value=\"daily\">Daily</option>\r\n                  <option value=\"weekly\">Weekly</option>\r\n                  <option value=\"monthly\">Monthly</option>\r\n                  <option value=\"custom\">Custom Cron</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"ig-form-group\">\r\n                <label>Time Slot</label>\r\n                <input\r\n                  type=\"time\"\r\n                  value={strategyData.timeSlot}\r\n                  onChange={(e) => handleStrategyChange('timeSlot', e.target.value)}\r\n                  className=\"ig-form-input\"\r\n                />\r\n              </div>\r\n            </div>\r\n            {strategyData.frequency === 'custom' && (\r\n              <div className=\"ig-form-group\">\r\n                <label>Custom Cron Expression</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={strategyData.customCron}\r\n                  onChange={(e) => handleStrategyChange('customCron', e.target.value)}\r\n                  placeholder=\"0 9 * * * (daily at 9 AM)\"\r\n                  className=\"ig-form-input\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Calendar Preview */}\r\n        <div className=\"ig-calendar-preview-section\">\r\n          <h3>Calendar Preview</h3>\r\n          <div className=\"ig-calendar-container\">\r\n            <div className=\"ig-calendar-header\">\r\n              <button\r\n                onClick={() => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1))}\r\n                className=\"ig-btn ig-btn-secondary ig-btn-small\"\r\n              >\r\n                ←\r\n              </button>\r\n              <h4>{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</h4>\r\n              <button\r\n                onClick={() => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1))}\r\n                className=\"ig-btn ig-btn-secondary ig-btn-small\"\r\n              >\r\n                →\r\n              </button>\r\n            </div>\r\n            <div className=\"ig-calendar-grid\">\r\n              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\r\n                <div key={day} className=\"ig-calendar-day-header\">{day}</div>\r\n              ))}\r\n              {generateCalendarDays(currentMonth.getFullYear(), currentMonth.getMonth()).map((day, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`ig-calendar-day ${day.date ? 'clickable' : ''} ${day.date && getPostsForDate(day.date).length > 0 ? 'has-posts' : ''}`}\r\n                  onClick={() => day.date && handleCalendarDateSelect(day.date)}\r\n                >\r\n                  <span className=\"ig-day-number\">{day.day}</span>\r\n                  {day.date && getPostsForDate(day.date).length > 0 && (\r\n                    <div className=\"ig-post-indicators\">\r\n                      {getPostsForDate(day.date).map((post, postIndex) => (\r\n                        <div\r\n                          key={postIndex}\r\n                          className=\"ig-post-dot\"\r\n                          title={`${post.scheduledTime} - ${(post.caption || '').substring(0, 30)}...`}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Composer Grid */}\r\n        <div className=\"ig-composer-grid-section\">\r\n          <div className=\"ig-composer-header\">\r\n            <h3>Step 2: Content Grid</h3>\r\n            <div className=\"ig-composer-controls\">\r\n              <button\r\n                onClick={() => {\r\n                  const newRow = {\r\n                    id: `row-${Date.now()}-${Math.random()}`,\r\n                    caption: '',\r\n                    postType: postType.toLowerCase(),\r\n                    mediaFile: null,\r\n                    mediaPreview: null,\r\n                    carouselImages: postType === 'carousel' ? [] : null,\r\n                    carouselImageCount: postType === 'carousel' ? carouselImageCount : null,\r\n                    scheduledDate: new Date().toISOString().split('T')[0],\r\n                    scheduledTime: strategyData.timeSlot,\r\n                    status: 'draft',\r\n                    isSelected: false\r\n                  };\r\n                  setComposerRows(prev => [...prev, newRow]);\r\n                }}\r\n                className=\"ig-control-btn ig-control-btn-primary\"\r\n              >\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n                Add Row\r\n              </button>\r\n              <button\r\n                onClick={handleSelectAll}\r\n                className=\"ig-control-btn ig-control-btn-secondary\"\r\n              >\r\n                {selectedRows.length === composerRows.length ? (\r\n                  <>\r\n                    Deselect All\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Select All\r\n                  </>\r\n                )}\r\n              </button>\r\n              <button\r\n                onClick={handleBulkDelete}\r\n                disabled={selectedRows.length === 0}\r\n                className=\"ig-control-btn ig-control-btn-danger\"\r\n              >\r\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <polyline points=\"3,6 5,6 21,6\" />\r\n                  <path d=\"M19,6v14a2,2 0 0,1-2,2H7a2,2 0 0,1-2-2V6m3,0V4a2,2 0 0,1,2-2h4a2,2 0 0,1,2,2v2\" />\r\n                </svg>\r\n              </button>\r\n              <button\r\n                className=\"ig-control-btn ig-control-btn-primary ig-control-btn-featured\"\r\n                onClick={handleGenerateAllCaptions}\r\n                disabled={composerRows.length === 0 || selectedRows.length === 0}\r\n              >\r\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\" />\r\n                  <polyline points=\"14,2 14,8 20,8\" />\r\n                  <line x1=\"14\" y1=\"13\" x2=\"8\" y2=\"13\" />\r\n                  <line x1=\"14\" y1=\"17\" x2=\"8\" y2=\"17\" />\r\n                </svg>\r\n                Generate Captions\r\n              </button>\r\n              <button\r\n                className=\"ig-control-btn ig-control-btn-secondary ig-control-btn-featured\"\r\n                onClick={handleGenerateAllImages}\r\n                disabled={composerRows.length === 0 || selectedRows.length === 0}\r\n              >\r\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                </svg>\r\n                Generate Images\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"ig-composer-grid-container\">\r\n            <div className=\"ig-composer-grid\" ref={gridRef}>\r\n              <div className=\"ig-grid-header ig-grid-row\">\r\n                <div className=\"ig-grid-cell ig-header-cell\"></div>\r\n                <div className=\"ig-grid-cell ig-header-cell\">Caption</div>\r\n                <div className=\"ig-grid-cell ig-header-cell\">Media</div>\r\n                <div className=\"ig-grid-cell ig-header-cell\">Date</div>\r\n                <div className=\"ig-grid-cell ig-header-cell\">Time</div>\r\n                <div className=\"ig-grid-cell ig-header-cell\">Status</div>\r\n              </div>\r\n              <div className=\"ig-grid-body\">\r\n                {composerRows.map((row, index) => (\r\n                  <div\r\n                    key={row.id}\r\n                    className={`ig-grid-row ${row.isSelected ? 'selected' : ''}`}\r\n                    draggable\r\n                    onDragStart={() => handleDragStart(row.id)}\r\n                    onDragOver={handleDragOver}\r\n                    onDrop={() => handleDrop(row.id)}\r\n                  >\r\n                    <div className=\"ig-grid-cell\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedRows.includes(row.id)}\r\n                        onChange={() => handleRowSelect(row.id)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"ig-grid-cell ig-caption-cell\">\r\n                      <div className=\"caption-container\">\r\n                        <textarea\r\n                          value={row.caption}\r\n                          onChange={(e) => handleCellEdit(row.id, 'caption', e.target.value)}\r\n                          placeholder=\"Enter your Instagram post caption...\"\r\n                          className=\"ig-caption-input\"\r\n                          rows=\"3\"\r\n                        />\r\n                        <button\r\n                          onClick={() => handleExpandCaption(row.id)}\r\n                          className=\"expand-btn\"\r\n                          title=\"Expand caption\"\r\n                        >\r\n                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                            <path d=\"M15 3h6v6\" />\r\n                            <path d=\"M9 21H3v-6\" />\r\n                            <path d=\"M21 3l-7 7\" />\r\n                            <path d=\"M3 21l7-7\" />\r\n                          </svg>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ig-grid-cell ig-media-cell\">\r\n                      <div className=\"ig-media-options\">\r\n                        {/* Show upload options when no media is uploaded yet */}\r\n                        {!row.mediaPreview && !row.mediaFile && (!row.carouselImages || row.carouselImages.length === 0) ? (\r\n                          <div className=\"ig-media-option-group\">\r\n                            {/* Photo/Reel Upload */}\r\n                            {(row.postType === 'photo' || row.postType === 'reel') && (\r\n                              <>\r\n                                <input\r\n                                  type=\"file\"\r\n                                  accept={row.postType === 'photo' ? \"image/*\" : \"video/*\"}\r\n                                  onChange={(e) => handleMediaUpload(row.id, e)}\r\n                                  className=\"ig-media-input\"\r\n                                  id={`ig-media-upload-${row.id}`}\r\n                                />\r\n                                <label htmlFor={`ig-media-upload-${row.id}`} className=\"ig-media-option-btn upload-btn\">\r\n                                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\r\n                                    <polyline points=\"7,10 12,15 17,10\" />\r\n                                    <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\r\n                                  </svg>\r\n                                  Upload {row.postType === 'photo' ? 'Image' : 'Video'}\r\n                                </label>\r\n                              </>\r\n                            )}\r\n\r\n                            {/* Disabled Thumbnail Upload for Reels (Video Required First) */}\r\n                            {row.postType === 'reel' && (\r\n                              <div className=\"ig-media-option-btn upload-btn thumbnail-btn disabled\" title=\"Please upload a video first\">\r\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                  <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                                  <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\r\n                                  <polyline points=\"21,15 16,10 5,21\" />\r\n                                </svg>\r\n                                Upload Thumbnail (Video Required First)\r\n                              </div>\r\n                            )}\r\n\r\n                            {/* AI Generation for Photo */}\r\n                            {row.postType === 'photo' && (\r\n                              <button\r\n                                onClick={() => handleGenerateMedia(row.id)}\r\n                                className=\"ig-media-option-btn generate-btn\"\r\n                              >\r\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                  <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                                </svg>\r\n                                Generate\r\n                              </button>\r\n                            )}\r\n\r\n                            {/* Carousel Options */}\r\n                            {row.postType === 'carousel' && (\r\n                              <div style={{ position: 'relative', display: 'flex', flexDirection: 'column', alignItems: 'stretch' }}>\r\n                                <button\r\n                                  onClick={() => handleGenerateCarousel(row.id)}\r\n                                  className=\"ig-media-option-btn generate-btn\"\r\n                                >\r\n                                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                    <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                                  </svg>\r\n                                  Generate {row.carouselImageCount || 2} Images\r\n                                </button>\r\n                                <input\r\n                                  key={`ig-carousel-upload-${row.id}`}\r\n                                  type=\"file\"\r\n                                  accept=\"image/*\"\r\n                                  multiple\r\n                                  ref={el => carouselInputRefs.current[row.id] = el}\r\n                                  onChange={(e) => handleCarouselUpload(row.id, e)}\r\n                                  className=\"ig-media-input\"\r\n                                  id={`ig-carousel-upload-${row.id}`}\r\n                                  disabled={row.carouselUploading}\r\n                                />\r\n                                <label htmlFor={`ig-carousel-upload-${row.id}`} className=\"ig-media-option-btn upload-btn\" style={{ opacity: row.carouselUploading ? 0.6 : 1, pointerEvents: row.carouselUploading ? 'none' : 'auto', position: 'relative' }}>\r\n                                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\r\n                                    <polyline points=\"7,10 12,15 17,10\" />\r\n                                    <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\r\n                                  </svg>\r\n                                  Upload {row.carouselImageCount || 2} Images\r\n                                  {row.carouselUploading && (\r\n                                    <span style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', background: 'rgba(255,255,255,0.7)', zIndex: 2 }}>\r\n                                      <span className=\"ig-spinner\" style={{ margin: 0 }}>\r\n                                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 50 50\">\r\n                                          <circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke=\"#888\" strokeWidth=\"5\" strokeDasharray=\"31.4 31.4\" strokeLinecap=\"round\">\r\n                                            <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"1s\" repeatCount=\"indefinite\" />\r\n                                          </circle>\r\n                                        </svg>\r\n                                      </span>\r\n                                    </span>\r\n                                  )}\r\n                                </label>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        ) : (\r\n                          /* Show media preview and additional options after upload */\r\n                          <div className=\"ig-media-preview-container\">\r\n\r\n                            {/* Media Preview */}\r\n                            <div className=\"ig-media-preview\">\r\n                              {/* Carousel Preview */}\r\n                              {row.postType === 'carousel' && row.carouselImages && row.carouselImages.length > 0 ? (\r\n                                <div className=\"ig-carousel-preview\" style={{ position: 'relative' }}>\r\n                                  {row.carouselUploading && (\r\n                                    <div className=\"ig-carousel-loading-overlay\">\r\n                                      <div className=\"ig-spinner\">\r\n                                        <svg width=\"40\" height=\"40\" viewBox=\"0 0 50 50\">\r\n                                          <circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke=\"#888\" strokeWidth=\"5\" strokeDasharray=\"31.4 31.4\" strokeLinecap=\"round\">\r\n                                            <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"1s\" repeatCount=\"indefinite\" />\r\n                                          </circle>\r\n                                        </svg>\r\n                                        <span>Loading images...</span>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  <div className=\"ig-carousel-grid\" style={row.carouselUploading ? { opacity: 0.5, pointerEvents: 'none' } : {}}>\r\n                                    {row.carouselImages.slice(0, row.carouselImageCount || 3).map((url, index) => (\r\n                                      <div key={index} className=\"ig-carousel-item\">\r\n                                        <img src={url} alt={`Carousel ${index + 1}`} />\r\n                                        <div className=\"ig-carousel-item-actions\">\r\n                                          <button\r\n                                            onClick={() => handleViewCarouselImage(row.id, index)}\r\n                                            className=\"ig-carousel-action-btn view-btn\"\r\n                                            title=\"View image\"\r\n                                          >\r\n                                            <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                              <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                              <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                                            </svg>\r\n                                          </button>\r\n                                          <button\r\n                                            onClick={() => handleRemoveCarouselImage(row.id, index)}\r\n                                            className=\"ig-carousel-action-btn remove-btn\"\r\n                                            title=\"Remove image\"\r\n                                          >\r\n                                            <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                            </svg>\r\n                                          </button>\r\n                                        </div>\r\n                                        <span className=\"ig-carousel-number\">{index + 1}</span>\r\n                                      </div>\r\n                                    ))}\r\n                                  </div>\r\n                                  <div className=\"ig-carousel-info\">\r\n                                    <div className=\"ig-carousel-status\">\r\n                                      {row.carouselImages.length} / {row.carouselImageCount || 2} images\r\n                                      {row.carouselImages.length < 2 && (\r\n                                        <span className=\"ig-carousel-warning\">⚠️ Need at least 2 images</span>\r\n                                      )}\r\n                                      {row.carouselImages.length >= 2 && (\r\n                                        <span className=\"ig-carousel-success\">✅ Ready</span>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"ig-carousel-actions\">\r\n                                      <button\r\n                                        onClick={() => handleViewCarousel(row.id)}\r\n                                        className=\"ig-btn ig-btn-secondary ig-btn-small\"\r\n                                        title=\"View & reorder carousel\"\r\n                                      >\r\n                                        <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                          <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                          <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                                        </svg>\r\n                                        View & Reorder\r\n                                      </button>\r\n                                      <button\r\n                                        onClick={() => handleRemoveCarouselImages(row.id)}\r\n                                        className=\"ig-btn ig-btn-danger ig-btn-small\"\r\n                                        disabled={row.carouselImages.length === 0}\r\n                                        title=\"Remove all carousel images\"\r\n                                      >\r\n                                        <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                        </svg>\r\n                                        Remove All\r\n                                      </button>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              ) : (\r\n                                /* Single Media Preview */\r\n                                <>\r\n                                  {row.postType === 'reel' ? (\r\n                                    <div className=\"ig-reel-container\">\r\n                                      {/* Video Preview */}\r\n                                      <div className=\"ig-reel-video-card\">\r\n                                        <video src={row.mediaPreview} controls />\r\n                                        <div className=\"ig-media-actions\">\r\n                                          <button\r\n                                            onClick={() => handleViewMedia(row.id)}\r\n                                            className=\"ig-media-action-btn view-btn\"\r\n                                            title=\"View video\"\r\n                                          >\r\n                                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                              <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                              <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                                            </svg>\r\n                                          </button>\r\n                                          <button\r\n                                            onClick={() => handleRemoveMedia(row.id)}\r\n                                            className=\"ig-media-action-btn remove-btn\"\r\n                                            title=\"Remove video\"\r\n                                          >\r\n                                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                            </svg>\r\n                                          </button>\r\n                                        </div>\r\n                                      </div>\r\n\r\n                                      {/* Thumbnail Preview */}\r\n                                      <div className=\"ig-reel-thumbnail-card\">\r\n                                        {row.thumbnailPreview ? (\r\n                                          <>\r\n                                            <img src={row.thumbnailPreview} alt=\"Thumbnail\" />\r\n                                            <div className=\"ig-media-actions\">\r\n                                              <button\r\n                                                onClick={() => handleViewThumbnail(row.id)}\r\n                                                className=\"ig-media-action-btn view-btn\"\r\n                                                title=\"View thumbnail\"\r\n                                              >\r\n                                                <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                  <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                                  <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                                                </svg>\r\n                                              </button>\r\n                                              <button\r\n                                                onClick={() => handleRemoveThumbnail(row.id)}\r\n                                                className=\"ig-media-action-btn remove-btn\"\r\n                                                title=\"Remove thumbnail\"\r\n                                              >\r\n                                                <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                                </svg>\r\n                                              </button>\r\n                                            </div>\r\n                                            <input\r\n                                              type=\"file\"\r\n                                              accept=\"image/*\"\r\n                                              onChange={(e) => handleThumbnailUpload(row.id, e)}\r\n                                              className=\"ig-media-input\"\r\n                                              id={`ig-thumbnail-upload-${row.id}`}\r\n                                              disabled={row.thumbnailUploading}\r\n                                              style={{ display: 'none' }}\r\n                                            />\r\n                                            <label\r\n                                              htmlFor={`ig-thumbnail-upload-${row.id}`}\r\n                                              className=\"ig-thumbnail-change-btn\"\r\n                                              title=\"Change thumbnail\"\r\n                                            >\r\n                                              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                <path d=\"M12 20h9\" />\r\n                                                <path d=\"M16.5 3.5a2.121 2.121 0 1 1 3 3L7 19l-4 1 1-4 12.5-12.5z\" />\r\n                                              </svg>\r\n                                            </label>\r\n                                          </>\r\n                                        ) : (\r\n                                          <>\r\n                                            <div className=\"ig-thumbnail-placeholder\">\r\n                                              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                                                <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\r\n                                                <polyline points=\"21,15 16,10 5,21\" />\r\n                                              </svg>\r\n                                            </div>\r\n                                            <input\r\n                                              type=\"file\"\r\n                                              accept=\"image/*\"\r\n                                              onChange={(e) => handleThumbnailUpload(row.id, e)}\r\n                                              className=\"ig-media-input\"\r\n                                              id={`ig-thumbnail-upload-${row.id}`}\r\n                                              disabled={row.thumbnailUploading}\r\n                                              style={{ display: 'none' }}\r\n                                            />\r\n                                            <label\r\n                                              htmlFor={`ig-thumbnail-upload-${row.id}`}\r\n                                              className=\"ig-thumbnail-upload-btn\"\r\n                                              title=\"Upload thumbnail\"\r\n                                            >\r\n                                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\r\n                                                <polyline points=\"7,10 12,15 17,10\" />\r\n                                                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\r\n                                              </svg>\r\n                                              Upload\r\n                                            </label>\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </div>\r\n                                  ) : row.mediaFile?.type?.startsWith('image/') || (!row.mediaFile && row.mediaPreview) ? (\r\n                                    <div className=\"ig-single-media-preview\">\r\n                                      <img src={row.mediaPreview} alt=\"Preview\" />\r\n                                      <div className=\"ig-media-actions\">\r\n                                        <button\r\n                                          onClick={() => handleViewMedia(row.id)}\r\n                                          className=\"ig-media-action-btn view-btn\"\r\n                                          title=\"View image\"\r\n                                        >\r\n                                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                            <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                            <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                                          </svg>\r\n                                        </button>\r\n                                        <button\r\n                                          onClick={() => handleRemoveMedia(row.id)}\r\n                                          className=\"ig-media-action-btn remove-btn\"\r\n                                          title=\"Remove image\"\r\n                                        >\r\n                                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                          </svg>\r\n                                        </button>\r\n                                      </div>\r\n                                    </div>\r\n                                  ) : (\r\n                                    <div className=\"ig-single-media-preview\">\r\n                                      <video src={row.mediaPreview} controls />\r\n                                      <div className=\"ig-media-actions\">\r\n                                        <button\r\n                                          onClick={() => handleViewMedia(row.id)}\r\n                                          className=\"ig-media-action-btn view-btn\"\r\n                                          title=\"View video\"\r\n                                        >\r\n                                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                            <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                            <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                                          </svg>\r\n                                        </button>\r\n                                        <button\r\n                                          onClick={() => handleRemoveMedia(row.id)}\r\n                                          className=\"ig-media-action-btn remove-btn\"\r\n                                          title=\"Remove video\"\r\n                                        >\r\n                                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                          </svg>\r\n                                        </button>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </>\r\n                              )}\r\n\r\n\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ig-grid-cell ig-date-cell\">\r\n                      <input\r\n                        type=\"date\"\r\n                        value={row.scheduledDate}\r\n                        onChange={(e) => handleCellEdit(row.id, 'scheduledDate', e.target.value)}\r\n                        className=\"ig-date-input\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"ig-grid-cell ig-time-cell\">\r\n                      <input\r\n                        type=\"time\"\r\n                        value={row.scheduledTime}\r\n                        onChange={(e) => handleCellEdit(row.id, 'scheduledTime', e.target.value)}\r\n                        className=\"ig-time-input\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"ig-grid-cell ig-status-cell\">\r\n                      <span className={`ig-status-badge ${getStatusClass(row.status)}`}>\r\n                        {getStatusIcon(row.status)} {row.status}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Queue Confirmation */}\r\n        <div className=\"ig-queue-confirmation\">\r\n          <h3>Step 3: Schedule & Publish</h3>\r\n          <div className=\"ig-confirmation-stats\">\r\n            <div className=\"ig-stat-item\">\r\n              <span className=\"ig-stat-label\">Total Posts:</span>\r\n              <span className=\"ig-stat-value\">{composerRows.length}</span>\r\n            </div>\r\n            <div className=\"ig-stat-item\">\r\n              <span className=\"ig-stat-label\">With Captions:</span>\r\n              <span className=\"ig-stat-value\">{composerRows.filter(row => (row.caption || '').trim()).length}</span>\r\n            </div>\r\n            <div className=\"ig-stat-item\">\r\n              <span className=\"ig-stat-label\">Ready to Schedule:</span>\r\n              <span className=\"ig-stat-value\">{composerRows.filter(row => row.status === 'ready').length}</span>\r\n            </div>\r\n            <div className=\"ig-stat-item\">\r\n              <span className=\"ig-stat-label\">With Media:</span>\r\n              <span className=\"ig-stat-value\">{composerRows.filter(row => row.mediaFile || row.mediaPreview).length}</span>\r\n            </div>\r\n          </div>\r\n          {isScheduling && (\r\n            <div className=\"ig-schedule-progress\">\r\n              <div className=\"ig-progress-bar\">\r\n                <div\r\n                  className=\"ig-progress-fill\"\r\n                  style={{ width: `${scheduleProgress}%` }}\r\n                />\r\n              </div>\r\n              <span className=\"ig-progress-text\">Scheduling Instagram posts... {Math.round(scheduleProgress)}%</span>\r\n            </div>\r\n          )}\r\n          <div className=\"ig-confirmation-actions\">\r\n            <button\r\n              onClick={handleScheduleAll}\r\n              disabled={isScheduling || composerRows.filter(row => row.status === 'ready').length === 0}\r\n              className=\"ig-btn ig-btn-primary ig-btn-large\"\r\n            >\r\n              {isScheduling ? (\r\n                <>\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                  Scheduling...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <polyline points=\"12,6 12,12 16,14\" />\r\n                  </svg>\r\n                  Schedule Ready Posts ({composerRows.filter(row => row.status === 'ready').length})\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Expanded Caption Modal */}\r\n      {\r\n        expandedCaption && (\r\n          <div className=\"modal-overlay\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h3>Edit Caption</h3>\r\n                <button\r\n                  onClick={() => setExpandedCaption(null)}\r\n                  className=\"modal-close\"\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <div className=\"caption-info\">\r\n                  <p><strong>Scheduled:</strong> {expandedCaption.scheduledDate} at {expandedCaption.scheduledTime}</p>\r\n                </div>\r\n                <textarea\r\n                  value={expandedCaption.caption}\r\n                  onChange={(e) => setExpandedCaption(prev => ({ ...prev, caption: e.target.value }))}\r\n                  className=\"expanded-caption-textarea\"\r\n                  rows=\"10\"\r\n                  placeholder=\"Enter your caption...\"\r\n                />\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  onClick={() => setExpandedCaption(null)}\r\n                  className=\"ig-btn ig-btn-secondary\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => handleSaveExpandedCaption(expandedCaption.id, expandedCaption.caption)}\r\n                  className=\"ig-btn ig-btn-primary\"\r\n                >\r\n                  Save Changes\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {/* Media Preview Modal */}\r\n      {\r\n        mediaPreviewModal && (\r\n          <div className={`modal-overlay ${mediaPreviewModal.isNested ? 'modal-overlay-nested' : ''}`}>\r\n            <div className=\"modal-content media-preview-modal\">\r\n              <div className=\"modal-header\">\r\n                <h3>\r\n                  {mediaPreviewModal.mediaType === 'carousel-image' ? `Carousel Image ${mediaPreviewModal.imageIndex + 1}` :\r\n                    mediaPreviewModal.mediaType === 'thumbnail' ? 'Thumbnail Preview' : 'Media Preview'}\r\n                </h3>\r\n                <button\r\n                  onClick={() => setMediaPreviewModal(null)}\r\n                  className=\"modal-close\"\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                {mediaPreviewModal.mediaFile?.type?.startsWith('image/') || (!mediaPreviewModal.mediaFile && mediaPreviewModal.mediaPreview) ? (\r\n                  <img\r\n                    src={mediaPreviewModal.mediaPreview}\r\n                    alt=\"Media preview\"\r\n                    className=\"modal-media\"\r\n                  />\r\n                ) : (\r\n                  <video\r\n                    src={mediaPreviewModal.mediaPreview}\r\n                    controls\r\n                    className=\"modal-media\"\r\n                  />\r\n                )}\r\n                {mediaPreviewModal.caption && (\r\n                  <div className=\"modal-caption\">\r\n                    <h4>Caption:</h4>\r\n                    <p>{mediaPreviewModal.caption}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  onClick={() => setMediaPreviewModal(null)}\r\n                  className=\"ig-btn ig-btn-primary\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {/* Carousel Reorder Modal */}\r\n      {\r\n        carouselReorderModal && (\r\n          <div className=\"modal-overlay\">\r\n            <div className=\"modal-content carousel-reorder-modal\">\r\n              <div className=\"modal-header\">\r\n                <h3>Reorder Carousel Images</h3>\r\n                <button\r\n                  onClick={() => setCarouselReorderModal(null)}\r\n                  className=\"modal-close\"\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <p className=\"reorder-instructions\">Drag and drop to reorder images. The first image will be the cover image.</p>\r\n                <div className=\"carousel-reorder-grid\">\r\n                  {carouselReorderModal.carouselImages.map((url, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className=\"carousel-reorder-item\"\r\n                      draggable\r\n                      onDragStart={(e) => e.dataTransfer.setData('text/plain', index)}\r\n                      onDragOver={(e) => e.preventDefault()}\r\n                      onDrop={(e) => {\r\n                        e.preventDefault();\r\n                        const dragIndex = parseInt(e.dataTransfer.getData('text/plain'));\r\n                        const dropIndex = index;\r\n                        if (dragIndex !== dropIndex) {\r\n                          const newOrder = [...carouselReorderModal.carouselImages];\r\n                          const draggedItem = newOrder[dragIndex];\r\n                          newOrder.splice(dragIndex, 1);\r\n                          newOrder.splice(dropIndex, 0, draggedItem);\r\n                          setCarouselReorderModal(prev => ({\r\n                            ...prev,\r\n                            carouselImages: newOrder\r\n                          }));\r\n                        }\r\n                      }}\r\n                    >\r\n                      <img src={url} alt={`Carousel ${index + 1}`} />\r\n                      <div className=\"carousel-reorder-overlay\">\r\n                        <span className=\"carousel-reorder-number\">{index + 1}</span>\r\n                        <button\r\n                          onClick={() => handleViewCarouselImage(carouselReorderModal.id, index)}\r\n                          className=\"carousel-reorder-view\"\r\n                          title=\"View full size\"\r\n                        >\r\n                          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                            <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                            <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                          </svg>\r\n                        </button>\r\n                        <button\r\n                          onClick={() => {\r\n                            const newImages = carouselReorderModal.carouselImages.filter((_, i) => i !== index);\r\n                            setCarouselReorderModal(prev => ({\r\n                              ...prev,\r\n                              carouselImages: newImages\r\n                            }));\r\n                          }}\r\n                          className=\"carousel-reorder-remove\"\r\n                          title=\"Remove image\"\r\n                        >\r\n                          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                          </svg>\r\n                        </button>\r\n                      </div>\r\n                      {index === 0 && <div className=\"carousel-cover-badge\">Cover</div>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  onClick={() => setCarouselReorderModal(null)}\r\n                  className=\"ig-btn ig-btn-secondary\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleReorderCarouselImages(carouselReorderModal.id, carouselReorderModal.carouselImages);\r\n                    setCarouselReorderModal(null);\r\n                  }}\r\n                  className=\"ig-btn ig-btn-primary\"\r\n                >\r\n                  Save Order\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {/* Thumbnail Preview Modal */}\r\n      {\r\n        thumbnailPreviewModal && (\r\n          <div className=\"modal-overlay\">\r\n            <div className=\"modal-content media-preview-modal\">\r\n              <div className=\"modal-header\">\r\n                <h3>Thumbnail Preview</h3>\r\n                <button\r\n                  onClick={() => setThumbnailPreviewModal(null)}\r\n                  className=\"modal-close\"\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <img\r\n                  src={thumbnailPreviewModal.mediaPreview}\r\n                  alt=\"Thumbnail preview\"\r\n                  className=\"modal-media\"\r\n                />\r\n                <div className=\"modal-caption\">\r\n                  <h4>Reel Thumbnail</h4>\r\n                  <p>This image will be used as the cover for your reel video.</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  onClick={() => setThumbnailPreviewModal(null)}\r\n                  className=\"ig-btn ig-btn-primary\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {/* Carousel Reorder Modal */}\r\n      {\r\n        carouselReorderModal && (\r\n          <div className=\"modal-overlay\">\r\n            <div className=\"modal-content carousel-reorder-modal\">\r\n              <div className=\"modal-header\">\r\n                <h3>Reorder Carousel Images</h3>\r\n                <button\r\n                  onClick={() => setCarouselReorderModal(null)}\r\n                  className=\"modal-close\"\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <p className=\"reorder-instructions\">Drag and drop to reorder images. The first image will be the cover image.</p>\r\n                <div className=\"carousel-reorder-grid\">\r\n                  {carouselReorderModal.carouselImages.map((url, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className=\"carousel-reorder-item\"\r\n                      draggable\r\n                      onDragStart={(e) => e.dataTransfer.setData('text/plain', index)}\r\n                      onDragOver={(e) => e.preventDefault()}\r\n                      onDrop={(e) => {\r\n                        e.preventDefault();\r\n                        const dragIndex = parseInt(e.dataTransfer.getData('text/plain'));\r\n                        const dropIndex = index;\r\n                        if (dragIndex !== dropIndex) {\r\n                          const newOrder = [...carouselReorderModal.carouselImages];\r\n                          const draggedItem = newOrder[dragIndex];\r\n                          newOrder.splice(dragIndex, 1);\r\n                          newOrder.splice(dropIndex, 0, draggedItem);\r\n                          setCarouselReorderModal(prev => ({\r\n                            ...prev,\r\n                            carouselImages: newOrder\r\n                          }));\r\n                        }\r\n                      }}\r\n                    >\r\n                      <img src={url} alt={`Carousel ${index + 1}`} />\r\n                      <div className=\"carousel-reorder-overlay\">\r\n                        <span className=\"carousel-reorder-number\">{index + 1}</span>\r\n                        <button\r\n                          onClick={() => handleViewCarouselImage(carouselReorderModal.id, index)}\r\n                          className=\"carousel-reorder-view\"\r\n                          title=\"View full size\"\r\n                        >\r\n                          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                            <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                            <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                          </svg>\r\n                        </button>\r\n                        <button\r\n                          onClick={() => {\r\n                            const newImages = carouselReorderModal.carouselImages.filter((_, i) => i !== index);\r\n                            setCarouselReorderModal(prev => ({\r\n                              ...prev,\r\n                              carouselImages: newImages\r\n                            }));\r\n                          }}\r\n                          className=\"carousel-reorder-remove\"\r\n                          title=\"Remove image\"\r\n                        >\r\n                          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                          </svg>\r\n                        </button>\r\n                      </div>\r\n                      {index === 0 && <div className=\"carousel-cover-badge\">Cover</div>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  onClick={() => setCarouselReorderModal(null)}\r\n                  className=\"ig-btn ig-btn-secondary\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleReorderCarouselImages(carouselReorderModal.id, carouselReorderModal.carouselImages);\r\n                    setCarouselReorderModal(null);\r\n                  }}\r\n                  className=\"ig-btn ig-btn-primary\"\r\n                >\r\n                  Save Order\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {/* Thumbnail Preview Modal */}\r\n      {\r\n        thumbnailPreviewModal && (\r\n          <div className=\"modal-overlay\">\r\n            <div className=\"modal-content media-preview-modal\">\r\n              <div className=\"modal-header\">\r\n                <h3>Thumbnail Preview</h3>\r\n                <button\r\n                  onClick={() => setThumbnailPreviewModal(null)}\r\n                  className=\"modal-close\"\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <img\r\n                  src={thumbnailPreviewModal.mediaPreview}\r\n                  alt=\"Thumbnail preview\"\r\n                  className=\"modal-media\"\r\n                />\r\n                <div className=\"modal-caption\">\r\n                  <h4>Reel Thumbnail</h4>\r\n                  <p>This image will be used as the cover for your reel video.</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  onClick={() => setThumbnailPreviewModal(null)}\r\n                  className=\"ig-btn ig-btn-primary\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default IgBulkComposer; ","import React, { useEffect, useState } from 'react';\r\nimport apiClient from '../services/apiClient';\r\nimport './ScheduledPostHistory.css';\r\n\r\nfunction ScheduledPostHistory() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [sortBy, setSortBy] = useState('scheduled_datetime');\r\n  const [loading, setLoading] = useState(true);\r\n  const [editPost, setEditPost] = useState(null);\r\n  const [deletePost, setDeletePost] = useState(null);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  const fetchPosts = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await apiClient.getScheduledPosts();\r\n      setPosts(data);\r\n    } catch (err) {\r\n      setMessage('Failed to fetch scheduled posts.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (post) => {\r\n    setEditPost(post);\r\n  };\r\n\r\n  const handleDelete = (post) => {\r\n    setDeletePost(post);\r\n    setShowConfirm(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    try {\r\n      await apiClient.deleteScheduledPost(deletePost.id);\r\n      setPosts(posts.filter(p => p.id !== deletePost.id));\r\n      setMessage('Post deleted.');\r\n    } catch (err) {\r\n      setMessage('Failed to delete post.');\r\n    } finally {\r\n      setShowConfirm(false);\r\n      setDeletePost(null);\r\n    }\r\n  };\r\n\r\n  const handleSaveEdit = async (updated) => {\r\n    try {\r\n      await apiClient.updateScheduledPost(updated.id, updated);\r\n      setPosts(posts.map(p => p.id === updated.id ? updated : p));\r\n      setMessage('Post updated.');\r\n    } catch (err) {\r\n      setMessage('Failed to update post.');\r\n    } finally {\r\n      setEditPost(null);\r\n    }\r\n  };\r\n\r\n  // Format date to DD MMM YYYY, hh:mm A format\r\n  const formatDateTime = (dateTimeString) => {\r\n    if (!dateTimeString) return 'N/A';\r\n    const date = new Date(dateTimeString);\r\n    return date.toLocaleDateString('en-US', {\r\n      day: '2-digit',\r\n      month: 'short',\r\n      year: 'numeric'\r\n    }) + ', ' + date.toLocaleTimeString('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: true\r\n    });\r\n  };\r\n\r\n  // Get post type display with icon\r\n  const getPostTypeDisplay = (postType) => {\r\n    if (!postType) return { \r\n      icon: <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/><polyline points=\"14,2 14,8 20,8\"/></svg>, \r\n      label: 'Unknown', \r\n      class: 'sph-post-type-unknown' \r\n    };\r\n\r\n    const type = postType.toLowerCase();\r\n    switch (type) {\r\n      case 'photo':\r\n        return { \r\n          icon: <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/><circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/><polyline points=\"21,15 16,10 5,21\"/></svg>, \r\n          label: 'Photo', \r\n          class: 'sph-post-type-photo' \r\n        };\r\n      case 'carousel':\r\n        return { \r\n          icon: <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"/><line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"/><line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"/></svg>, \r\n          label: 'Carousel', \r\n          class: 'sph-post-type-carousel' \r\n        };\r\n      case 'reel':\r\n        return { \r\n          icon: <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><polygon points=\"23 7 16 12 23 17 23 7\"/><rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"/></svg>, \r\n          label: 'Reel', \r\n          class: 'sph-post-type-reel' \r\n        };\r\n      default:\r\n        return { \r\n          icon: <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/><polyline points=\"14,2 14,8 20,8\"/></svg>, \r\n          label: type.charAt(0).toUpperCase() + type.slice(1), \r\n          class: 'sph-post-type-unknown' \r\n        };\r\n    }\r\n  };\r\n\r\n  const filtered = posts.filter(post =>\r\n    post.prompt.toLowerCase().includes(search.toLowerCase()) ||\r\n    (post.status && post.status.toLowerCase().includes(search.toLowerCase())) ||\r\n    (post.post_type && post.post_type.toLowerCase().includes(search.toLowerCase()))\r\n  );\r\n\r\n  const sorted = [...filtered].sort((a, b) => {\r\n    let valA = a[sortBy];\r\n    let valB = b[sortBy];\r\n    if (sortBy === 'scheduled_datetime') {\r\n      valA = new Date(valA);\r\n      valB = new Date(valB);\r\n    }\r\n    if (valA < valB) return -1;\r\n    if (valA > valB) return 1;\r\n    return 0;\r\n  });\r\n\r\n  return (\r\n    <div className=\"scheduled-post-history\">\r\n      <h2>Scheduled Post History</h2>\r\n      <div className=\"sph-controls\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search by caption, status, or post type...\"\r\n          value={search}\r\n          onChange={e => setSearch(e.target.value)}\r\n        />\r\n      </div>\r\n      <table className=\"sph-table\">\r\n        <thead>\r\n          <tr>\r\n            <th onClick={() => setSortBy('prompt')}>Caption</th>\r\n            <th onClick={() => setSortBy('post_type')}>Post Type</th>\r\n            <th onClick={() => setSortBy('scheduled_datetime')}>Date & Time</th>\r\n            <th onClick={() => setSortBy('status')}>Status</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loading ? (\r\n            <tr><td colSpan={5}>Loading...</td></tr>\r\n          ) : sorted.length === 0 ? (\r\n            <tr><td colSpan={5}>No scheduled posts found.</td></tr>\r\n          ) : sorted.map(post => {\r\n            const postTypeDisplay = getPostTypeDisplay(post.post_type);\r\n            return (\r\n              <tr key={post.id}>\r\n                <td title={post.prompt}>{post.prompt.length > 40 ? post.prompt.slice(0, 40) + '...' : post.prompt}</td>\r\n                <td>\r\n                  <span className={`sph-post-type ${postTypeDisplay.class}`}>\r\n                    <span className=\"sph-post-type-icon\">{postTypeDisplay.icon}</span>\r\n                    <span className=\"sph-post-type-label\">{postTypeDisplay.label}</span>\r\n                  </span>\r\n                </td>\r\n                <td>{formatDateTime(post.scheduled_datetime)}</td>\r\n                <td><span className={`sph-status sph-status-${post.status}`}>{post.status}</span></td>\r\n                <td>\r\n                  {post.status === 'scheduled' ? (\r\n                    <>\r\n                      <button className=\"sph-action-btn sph-edit\" onClick={() => handleEdit(post)} title=\"Edit\">\r\n                        <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                          <path d=\"M12 20h9\"/>\r\n                          <path d=\"M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4 12.5-12.5z\"/>\r\n                        </svg>\r\n                      </button>\r\n                      <button className=\"sph-action-btn sph-delete\" onClick={() => handleDelete(post)} title=\"Delete\">\r\n                        <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                          <polyline points=\"3,6 5,6 21,6\"/>\r\n                          <path d=\"M19,6v14a2,2 0 0,1-2,2H7a2,2 0 0,1-2-2V6m3,0V4a2,2 0 0,1,2-2h4a2,2 0 0,1,2,2v2\"/>\r\n                        </svg>\r\n                      </button>\r\n                    </>\r\n                  ) : (\r\n                    <span className=\"sph-no-actions\">No actions available</span>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {message && <div className=\"sph-message\">{message}</div>}\r\n      {showConfirm && (\r\n        <div className=\"sph-modal\">\r\n          <div className=\"sph-modal-content\">\r\n            <p>Are you sure you want to delete this post?</p>\r\n            <button onClick={confirmDelete}>Yes, Delete</button>\r\n            <button onClick={() => setShowConfirm(false)}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {editPost && (\r\n        <EditPostModal post={editPost} onSave={handleSaveEdit} onClose={() => setEditPost(null)} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction EditPostModal({ post, onSave, onClose }) {\r\n  const [form, setForm] = useState({ ...post });\r\n\r\n  // Only allow editing if status is 'scheduled'\r\n  if (post.status !== 'scheduled') {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"sph-modal\">\r\n      <div className=\"sph-modal-content\">\r\n        <h3>Edit Scheduled Post</h3>\r\n        <label>Caption</label>\r\n        <textarea\r\n          value={form.prompt}\r\n          onChange={e => setForm({ ...form, prompt: e.target.value })}\r\n          placeholder=\"Enter post caption...\"\r\n        />\r\n        <label>Post Type</label>\r\n        <select\r\n          value={form.post_type || 'photo'}\r\n          onChange={e => setForm({ ...form, post_type: e.target.value })}\r\n        >\r\n          <option value=\"photo\">Photo</option>\r\n          <option value=\"carousel\">Carousel</option>\r\n          <option value=\"reel\">Reel</option>\r\n        </select>\r\n        <label>Date & Time</label>\r\n        <input\r\n          type=\"datetime-local\"\r\n          value={form.scheduled_datetime?.slice(0, 16)}\r\n          onChange={e => setForm({ ...form, scheduled_datetime: e.target.value })}\r\n        />\r\n        <div className=\"sph-modal-actions\">\r\n          <button onClick={() => onSave(form)}>Save</button>\r\n          <button onClick={onClose}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScheduledPostHistory; ","import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport apiClient from '../services/apiClient';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNotifications } from '../contexts/NotificationContext';\nimport IgBulkComposer from './igBulkComposer';\nimport './InstagramPage.css';\nimport ScheduledPostHistory from './ScheduledPostHistory';\nimport { loadFacebookSDK } from './FacebookUtils';\n\nconst ACCEPTED_IMAGE_TYPES = ['image/png', 'image/jpeg', 'image/jpg'];\nconst ACCEPTED_VIDEO_TYPES = ['video/mp4', 'video/quicktime'];\n\nconst InstagramPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { isAuthenticated, loading: authLoading, user } = useAuth();\n  const { addNotification, testNotification, testWebSocketConnection, testApiConnection, testSimpleWebSocket, refreshNotifications } = useNotifications();\n\n  // UI State\n  const [isConnected, setIsConnected] = useState(false);\n  const [instagramAccounts, setInstagramAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [activeTab, setActiveTab] = useState('connect');\n  const [sdkLoaded, setSdkLoaded] = useState(false);\n  const [fbAccessToken, setFbAccessToken] = useState(null);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Post State\n  const [postType, setPostType] = useState('photo'); // photo | carousel | reel\n  const [caption, setCaption] = useState('');\n  const [aiPrompt, setAiPrompt] = useState('');\n  const [aiGenerating, setAiGenerating] = useState(false);\n  const [aiImageUrl, setAiImageUrl] = useState('');\n  const [imageSource, setImageSource] = useState('ai'); // ai | upload | drive\n  const [uploadedImageUrl, setUploadedImageUrl] = useState('');\n  const [uploadingImage, setUploadingImage] = useState(false);\n  const [selectedImageFile, setSelectedImageFile] = useState(null);\n  const [autoGenerateCaption, setAutoGenerateCaption] = useState(false);\n  const [captionPrompt, setCaptionPrompt] = useState('');\n  const [generatingCaption, setGeneratingCaption] = useState(false);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n\n  // Strategy Template State\n  const [strategyData, setStrategyData] = useState({\n    promptTemplate: '',\n    brandName: '',\n    hookIdea: '',\n    features: '',\n    location: '',\n    phone: '',\n    website: '',\n    callToAction: '',\n    imagePrompt: '',\n    customStrategyTemplate: ''\n  });\n\n  const [showStrategyModal, setShowStrategyModal] = useState(false);\n  const [strategyTemplates, setStrategyTemplates] = useState([\n    { id: 'default', name: 'Default Template', prompt: 'Generate a catchy Instagram caption for this post.' },\n    { id: 'product', name: 'Product Showcase', prompt: 'Create an engaging caption highlighting the key features and benefits of this product.' },\n    { id: 'event', name: 'Event Promotion', prompt: 'Write an exciting caption to promote this event, including date, time, and location.' },\n    { id: 'custom', name: 'Custom Template', prompt: '' }\n  ]);\n\n  // Carousel State\n  const [carouselImages, setCarouselImages] = useState([]); // URLs\n  const [carouselFiles, setCarouselFiles] = useState([]); // File objects\n  const [carouselCount, setCarouselCount] = useState(3);\n  const [carouselCaption, setCarouselCaption] = useState('');\n  const [carouselGenerating, setCarouselGenerating] = useState(false);\n  const [draggedIndex, setDraggedIndex] = useState(null);\n\n  // Reel State\n  const [reelFile, setReelFile] = useState(null);\n  const [reelUrl, setReelUrl] = useState('');\n  const [reelFilename, setReelFilename] = useState('');\n  const [reelCaption, setReelCaption] = useState('');\n  const [reelUploading, setReelUploading] = useState(false);\n  const [reelAutoGenerateCaption, setReelAutoGenerateCaption] = useState(false);\n  const [reelCaptionPrompt, setReelCaptionPrompt] = useState('');\n  const [generatingReelCaption, setGeneratingReelCaption] = useState(false);\n  // Thumbnail State for Reel\n  const [reelThumbnailFile, setReelThumbnailFile] = useState(null);\n  const [reelThumbnailUrl, setReelThumbnailUrl] = useState('');\n  const [reelThumbnailFilename, setReelThumbnailFilename] = useState('');\n\n  // Media Gallery\n  const [userMedia, setUserMedia] = useState([]);\n  const [loadingMedia, setLoadingMedia] = useState(false);\n\n  // Google Drive Integration\n  const [showDriveModal, setShowDriveModal] = useState(false);\n  const [driveFiles, setDriveFiles] = useState([]);\n  const [loadingDriveFiles, setLoadingDriveFiles] = useState(false);\n  const [driveAuthenticated, setDriveAuthenticated] = useState(false);\n  const [driveAuthLoading, setDriveAuthLoading] = useState(false);\n\n  // Auto-Reply State\n  const [autoReplyEnabled, setAutoReplyEnabled] = useState(false);\n  const [autoReplyTemplate, setAutoReplyTemplate] = useState('Thank you for your comment! We appreciate your engagement. 😊');\n  const [autoReplyPosts, setAutoReplyPosts] = useState([]);\n  const [selectedAutoReplyPosts, setSelectedAutoReplyPosts] = useState([]);\n  const [autoReplyLoading, setAutoReplyLoading] = useState(false);\n  const [loadingAutoReplyPosts, setLoadingAutoReplyPosts] = useState(false);\n  const [isSelectingPosts, setIsSelectingPosts] = useState(false);\n\n  // DM Auto-Reply State\n  const [dmAutoReplyEnabled, setDmAutoReplyEnabled] = useState(false);\n  const [dmAutoReplyTemplate, setDmAutoReplyTemplate] = useState('Thanks for your message! I\\'ll get back to you soon. 😊');\n  const [dmAutoReplyLoading, setDmAutoReplyLoading] = useState(false);\n\n  // File Picker Modal State\n  const [showFilePicker, setShowFilePicker] = useState(false);\n  const [filePickerType, setFilePickerType] = useState(''); // 'photo' or 'video'\n  const [filePickerFormType, setFilePickerFormType] = useState(''); // 'manual' or 'carousel'\n  const [isLoadingGoogleDrive, setIsLoadingGoogleDrive] = useState(false);\n  const [googleDriveAvailable, setGoogleDriveAvailable] = useState(false);\n\n  // Bulk Composer State\n  const [showBulkComposer, setShowBulkComposer] = useState(false);\n\n  // Facebook SDK\n  const INSTAGRAM_APP_ID = process.env.REACT_APP_INSTAGRAM_APP_ID || '24054495060908418';\n\n  // Mobile detection utility\n  const isMobile = () => window.innerWidth <= 768;\n\n  // --- New: Global Auto-Reply State ---\n  const [globalAutoReplyEnabled, setGlobalAutoReplyEnabled] = useState(false);\n  const [globalAutoReplyLoading, setGlobalAutoReplyLoading] = useState(false);\n  const [globalAutoReplyStatus, setGlobalAutoReplyStatus] = useState(''); // For toast/feedback\n\n  // --- New: Global Auto-Reply Progress State ---\n  const [globalAutoReplyProgress, setGlobalAutoReplyProgress] = useState(null);\n\n  // --- New: Global Auto-Reply Error and Retry State ---\n  const [apiError, setApiError] = useState(null);\n  const [retrying, setRetrying] = useState(false);\n\n  // --- New: Toast Notification ---\n  const [toast, setToast] = useState({ show: false, message: '', type: 'info' });\n  const showToast = (message, type = 'info') => {\n    setToast({ show: true, message, type });\n    setTimeout(() => setToast({ show: false, message: '', type: 'info' }), 3500);\n  };\n\n  // --- New: Global Auto-Reply API Logic ---\n  const handleGlobalAutoReplyToggle = async () => {\n    if (!selectedAccount) {\n      showToast('Please select an Instagram account first.', 'error');\n      return;\n    }\n    setGlobalAutoReplyLoading(true);\n    setApiError(null);\n    try {\n      if (!globalAutoReplyEnabled) {\n        const enableRes = await apiClient.enableGlobalInstagramAutoReply(selectedAccount.platform_user_id);\n        if (enableRes.success) {\n          setGlobalAutoReplyEnabled(true);\n          // eslint-disable-next-line no-undef\n          setGlobalAutoReplyStatus('enabled');\n          showToast('Auto-reply enabled for all posts and comments!', 'success');\n        } else {\n          setApiError(enableRes.error || 'Failed to enable auto-reply.');\n          showToast('Failed to enable auto-reply: ' + (enableRes.error || 'Unknown error'), 'error');\n        }\n      } else {\n        const disableRes = await apiClient.disableGlobalInstagramAutoReply(selectedAccount.platform_user_id);\n        if (disableRes.success) {\n          setGlobalAutoReplyEnabled(false);\n          // eslint-disable-next-line no-undef\n          setGlobalAutoReplyStatus('disabled');\n          showToast('Auto-reply disabled.', 'info');\n        } else {\n          setApiError(disableRes.error || 'Failed to disable auto-reply.');\n          showToast('Failed to disable auto-reply: ' + (disableRes.error || 'Unknown error'), 'error');\n        }\n      }\n    } catch (err) {\n      setApiError(err.message || JSON.stringify(err));\n      showToast('Error: ' + (err.message || err.toString()), 'error');\n    } finally {\n      setGlobalAutoReplyLoading(false);\n    }\n  };\n\n  // --- New: Fetch initial global auto-reply status on account select ---\n  useEffect(() => {\n    const fetchGlobalAutoReplyStatus = async () => {\n      if (!selectedAccount) return;\n      try {\n        const statusRes = await apiClient.getGlobalInstagramAutoReplyStatus(selectedAccount.platform_user_id);\n        setGlobalAutoReplyEnabled(!!statusRes.enabled);\n        // eslint-disable-next-line no-undef\n        setGlobalAutoReplyStatus(statusRes.enabled ? 'enabled' : 'disabled');\n      } catch (err) {\n        setGlobalAutoReplyEnabled(false);\n        // eslint-disable-next-line no-undef\n        setGlobalAutoReplyStatus('disabled');\n      }\n    };\n    fetchGlobalAutoReplyStatus();\n  }, [selectedAccount]);\n\n  // --- New: Poll for global auto-reply progress when enabled ---\n  useEffect(() => {\n    let intervalId;\n    const pollProgress = async () => {\n      if (!selectedAccount || !globalAutoReplyEnabled) return;\n      try {\n        const res = await apiClient.getGlobalInstagramAutoReplyProgress(selectedAccount.platform_user_id);\n        if (res.success) {\n          setGlobalAutoReplyProgress(res.progress);\n          setApiError(null);\n        }\n      } catch (err) {\n        setApiError(err.message || JSON.stringify(err));\n        // Optionally, showToast('Progress error: ' + (err.message || err.toString()), 'error');\n      }\n    };\n    if (globalAutoReplyEnabled && selectedAccount) {\n      pollProgress();\n      intervalId = setInterval(pollProgress, 3000);\n    } else {\n      setGlobalAutoReplyProgress(null);\n    }\n    return () => intervalId && clearInterval(intervalId);\n  }, [globalAutoReplyEnabled, selectedAccount]);\n\n  // --- Facebook SDK Helpers ---\n  const checkLoginStatus = () => {\n    if (!window.FB || !isAuthenticated) return;\n    window.FB.getLoginStatus((response) => {\n      if (response.status === 'connected') {\n        setFbAccessToken(response.authResponse.accessToken);\n        setMessage('Instagram: Using existing Facebook login session');\n        handleConnectInstagram(response.authResponse.accessToken);\n      } else {\n        setMessage('Instagram: Please connect your Facebook account to continue');\n      }\n    });\n  };\n  const initializeFacebookSDK = () => {\n    if (window.FB) {\n      window.FB.init({ appId: INSTAGRAM_APP_ID, cookie: true, xfbml: true, version: 'v18.0' });\n      setSdkLoaded(true);\n      checkLoginStatus();\n      return;\n    }\n    window.fbAsyncInit = function () {\n      window.FB.init({ appId: INSTAGRAM_APP_ID, cookie: true, xfbml: true, version: 'v18.0' });\n      setSdkLoaded(true);\n      checkLoginStatus();\n    };\n    (function (d, s, id) {\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s); js.id = id;\n      js.src = \"https://connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n  };\n\n  useEffect(() => {\n    if (isAuthenticated && !authLoading) {\n      loadFacebookSDK(process.env.REACT_APP_FACEBOOK_APP_ID || '697225659875731').then(() => {\n        checkLoginStatus();\n        checkGoogleDriveAvailability();\n      });\n    }\n  }, [isAuthenticated, authLoading]);\n\n  useEffect(() => {\n    checkLoginStatus();\n    initializeFacebookSDK();\n    // eslint-disable-next-line\n  }, [INSTAGRAM_APP_ID, isAuthenticated]);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setInstagramAccounts([]); // Clear previous state\n      setSelectedAccount('');\n      setIsConnected(false);\n      setActiveTab('connect');\n      setMessage('');\n\n      // Ensure token is set before making request\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        apiClient.setToken(token);\n        console.log('🔍 DEBUG: Token set for Instagram accounts request');\n      } else {\n        console.error('🔍 DEBUG: No auth token found in localStorage');\n        setMessage('Authentication token not found. Please log in again.');\n        return;\n      }\n\n      // Fetch new user's Instagram accounts\n      apiClient.getInstagramAccounts()\n        .then(accounts => {\n          console.log('🔍 DEBUG: Successfully fetched Instagram accounts:', accounts);\n          setInstagramAccounts(accounts);\n        })\n        .catch(error => {\n          console.error('🔍 DEBUG: Error fetching Instagram accounts:', error);\n          if (error.message.includes('Could not validate credentials')) {\n            setMessage('Your session has expired. Please log in again.');\n          } else if (error.message.includes('Failed to fetch')) {\n            setMessage('Unable to connect to server. Please check if the backend is running and try again.');\n          } else {\n            setMessage(`Error loading Instagram accounts: ${error.message}`);\n          }\n        });\n    }\n  }, [isAuthenticated]);\n\n  // --- Instagram Connect ---\n  const handleConnectInstagram = async (accessToken = fbAccessToken) => {\n    if (!isAuthenticated) {\n      setMessage('Please log in to your account first before connecting Instagram.');\n      setLoading(false);\n      return;\n    }\n    if (!accessToken) {\n      setMessage('No access token available. Please log in with Facebook first.');\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    try {\n      setMessage('Fetching Instagram Business accounts...');\n      const response = await apiClient.connectInstagram(accessToken);\n\n      // Fetch the full list of social accounts from the backend\n      const allAccounts = await apiClient.getSocialAccounts();\n      // Filter for Instagram accounts\n      const instagramAccountsFromBackend = allAccounts.filter(acc => acc.platform === 'instagram');\n\n      // Map and merge info for display\n      const mappedAccounts = instagramAccountsFromBackend.map(account => ({\n        id: account.id, // Internal DB ID\n        platform_user_id: account.platform_user_id, // Instagram user ID\n        username: account.username,\n        name: account.display_name || account.page_name,\n        followers_count: account.follower_count || 0,\n        media_count: account.media_count || 0,\n        profile_picture_url: account.profile_picture_url\n      }));\n\n      setInstagramAccounts(mappedAccounts);\n      setIsConnected(true);\n      setMessage(`Found ${mappedAccounts.length} Instagram Business account(s)!`);\n      if (mappedAccounts.length === 1) {\n        setSelectedAccount(mappedAccounts[0]);\n        loadUserMedia(mappedAccounts[0].platform_user_id);\n      }\n    } catch (error) {\n      setMessage(error.message || 'Unknown error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFacebookLogin = () => {\n    if (!window.FB) {\n      setMessage('Facebook SDK not loaded');\n      return;\n    }\n    setLoading(true);\n    setMessage('Initiating Instagram OAuth via Facebook...');\n    window.FB.login((response) => {\n      if (response.status === 'connected') {\n        const accessToken = response.authResponse.accessToken;\n        setFbAccessToken(accessToken);\n        setMessage('Facebook login successful! Connecting Instagram accounts...');\n        handleConnectInstagram(accessToken);\n      } else {\n        setMessage('Facebook login failed or was cancelled');\n        setLoading(false);\n      }\n    }, {\n      scope: 'pages_show_list,instagram_basic,instagram_content_publish,pages_read_engagement, business_management'\n    });\n  };\n\n  // --- Media Loading ---\n  const loadUserMedia = async (instagramUserId) => {\n    setLoadingMedia(true);\n    try {\n      const media = await apiClient.getInstagramMedia(instagramUserId);\n      setUserMedia(media?.data?.media || []);\n    } catch (error) {\n      setMessage(`Error loading media: ${error.message}`);\n    } finally {\n      setLoadingMedia(false);\n    }\n  };\n\n  // --- Image Upload ---\n  const handleImageChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\n      setMessage('Please select a PNG or JPG image');\n      return;\n    }\n\n    // Debug authentication status\n    console.log('🔍 DEBUG: Authentication check before upload');\n    console.log('🔍 DEBUG: isAuthenticated:', isAuthenticated);\n    console.log('🔍 DEBUG: user:', user);\n    console.log('🔍 DEBUG: apiClient token exists:', !!apiClient.token);\n\n    setUploadingImage(true);\n    setMessage('Uploading image...');\n    try {\n      const res = await apiClient.uploadImageToCloudinary(file);\n      if (res && res.success && res.data && res.data.url) {\n        setUploadedImageUrl(res.data.url);\n        setAiImageUrl(res.data.url);\n        setSelectedImageFile(file);\n        setMessage('Image uploaded successfully!');\n      } else {\n        throw new Error(res?.error || 'Upload failed');\n      }\n    } catch (err) {\n      console.error('🔍 DEBUG: Upload error details:', err);\n      setMessage(`Image upload failed: ${err.message}`);\n    } finally {\n      setUploadingImage(false);\n    }\n  };\n\n  // --- AI Image Generation ---\n  const handleGenerateAIImage = async () => {\n    if (!aiPrompt.trim()) {\n      setMessage('Please enter a prompt for image generation.');\n      return;\n    }\n\n    setAiGenerating(true);\n    setMessage('Generating Instagram-optimized image with AI...');\n\n    try {\n      console.log('🔍 DEBUG: Generating Instagram image with prompt:', aiPrompt.trim());\n\n      const res = await apiClient.generateInstagramImage(aiPrompt.trim());\n      console.log('🔍 DEBUG: Image generation response:', res);\n\n      if (res && res.success && res.data && res.data.image_url) {\n        setAiImageUrl(res.data.image_url);\n        const dimensions = res.data.width && res.data.height ? `(${res.data.width}x${res.data.height})` : '';\n        setMessage(`AI image generated successfully! ${dimensions}`);\n        console.log('🔍 DEBUG: Generated image URL:', res.data.image_url);\n        console.log('🔍 DEBUG: Image dimensions:', res.data.width, 'x', res.data.height);\n        console.log('🔍 DEBUG: Enhanced prompt:', res.data.enhanced_prompt);\n      } else if (res && res.data && res.data.image_url) {\n        // Fallback for different response format\n        setAiImageUrl(res.data.image_url);\n        setMessage('AI image generated successfully!');\n        console.log('🔍 DEBUG: Generated image URL (fallback):', res.data.image_url);\n      } else {\n        console.error('🔍 DEBUG: Invalid response format:', res);\n        setMessage('Failed to generate image. Please try again.');\n      }\n    } catch (err) {\n      console.error('🔍 DEBUG: Image generation error:', err);\n\n      // Handle specific error types\n      let errorMessage = err.message || err.toString();\n\n      if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {\n        errorMessage = 'Invalid or expired Stability AI API key. Please check your API key in the backend configuration.';\n      } else if (errorMessage.includes('429') || errorMessage.includes('Too Many Requests')) {\n        errorMessage = 'Rate limit exceeded. Please wait a few minutes before trying again, or upgrade your Stability AI plan.';\n        // Set a 5-minute cooldown\n        setRateLimitCooldown(300);\n        const cooldownInterval = setInterval(() => {\n          setRateLimitCooldown(prev => {\n            if (prev <= 1) {\n              clearInterval(cooldownInterval);\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      } else if (errorMessage.includes('500') || errorMessage.includes('Internal Server Error')) {\n        errorMessage = 'Server error occurred. Please try again in a moment.';\n      } else if (errorMessage.includes('timeout')) {\n        errorMessage = 'Request timed out. Please try again.';\n      }\n\n      setMessage('Error generating image: ' + errorMessage);\n    } finally {\n      setAiGenerating(false);\n    }\n  };\n\n  // --- Auto Generate Caption ---\n  const handleAutoGenerateCaption = async () => {\n    if (!captionPrompt.trim()) {\n      setMessage('Please enter a prompt for caption generation.');\n      return;\n    }\n\n    setGeneratingCaption(true);\n    setMessage('Generating caption with AI...');\n\n    try {\n      console.log('🔍 DEBUG: Generating Instagram caption with prompt:', captionPrompt.trim());\n\n      const res = await apiClient.generateInstagramCaption(captionPrompt.trim());\n      console.log('🔍 DEBUG: Caption generation response:', res);\n\n      if (res && res.success && res.data && res.data.content) {\n        setCaption(res.data.content);\n        setMessage('Caption generated successfully!');\n        console.log('🔍 DEBUG: Generated caption:', res.data.content);\n      } else if (res && res.content) {\n        // Fallback for different response format\n        setCaption(res.content);\n        setMessage('Caption generated successfully!');\n        console.log('🔍 DEBUG: Generated caption (fallback):', res.content);\n      } else {\n        console.error('🔍 DEBUG: Invalid response format:', res);\n        setMessage('Failed to generate caption. Please try again.');\n      }\n    } catch (err) {\n      console.error('🔍 DEBUG: Caption generation error:', err);\n      setMessage('Error generating caption: ' + (err.message || err.toString()));\n    } finally {\n      setGeneratingCaption(false);\n    }\n  };\n\n  // --- Generate Image and Caption Together ---\n  const handleGenerateImageAndCaption = async () => {\n    if (!aiPrompt.trim()) {\n      setMessage('Please enter a prompt for generation.');\n      return;\n    }\n\n    setAiGenerating(true);\n    setGeneratingCaption(true);\n    setMessage('Generating Instagram-optimized image and caption with AI...');\n\n    try {\n      console.log('🔍 DEBUG: Generating image and caption with prompt:', aiPrompt.trim());\n\n      // Generate image first\n      const imageRes = await apiClient.generateInstagramImage(aiPrompt.trim());\n      console.log('🔍 DEBUG: Image generation response:', imageRes);\n\n      if (!imageRes || !imageRes.success || !imageRes.data || !imageRes.data.image_url) {\n        throw new Error('Failed to generate image');\n      }\n\n      setAiImageUrl(imageRes.data.image_url);\n      console.log('🔍 DEBUG: Generated image URL:', imageRes.data.image_url);\n      console.log('🔍 DEBUG: Image dimensions:', imageRes.data.width, 'x', imageRes.data.height);\n\n      // Generate caption using the same prompt\n      const captionRes = await apiClient.generateInstagramCaption(aiPrompt.trim());\n      console.log('🔍 DEBUG: Caption generation response:', captionRes);\n\n      if (captionRes && captionRes.success && captionRes.data && captionRes.data.content) {\n        setCaption(captionRes.data.content);\n        console.log('🔍 DEBUG: Generated caption:', captionRes.data.content);\n      } else if (captionRes && captionRes.content) {\n        // Fallback for different response format\n        setCaption(captionRes.content);\n        console.log('🔍 DEBUG: Generated caption (fallback):', captionRes.content);\n      } else {\n        console.warn('🔍 DEBUG: Caption generation failed, using fallback');\n        setCaption(`Check out this amazing image! ${aiPrompt.trim()}`);\n      }\n\n      const dimensions = imageRes.data.width && imageRes.data.height ? `(${imageRes.data.width}x${imageRes.data.height})` : '';\n      setMessage(`Image and caption generated successfully! ${dimensions}`);\n\n    } catch (err) {\n      console.error('🔍 DEBUG: Image and caption generation error:', err);\n\n      // Handle specific error types\n      let errorMessage = err.message || err.toString();\n\n      if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {\n        errorMessage = 'Invalid or expired Stability AI API key. Please check your API key in the backend configuration.';\n      } else if (errorMessage.includes('429') || errorMessage.includes('Too Many Requests')) {\n        errorMessage = 'Rate limit exceeded. Please wait a few minutes before trying again, or upgrade your Stability AI plan.';\n        // Set a 5-minute cooldown\n        setRateLimitCooldown(300);\n        const cooldownInterval = setInterval(() => {\n          setRateLimitCooldown(prev => {\n            if (prev <= 1) {\n              clearInterval(cooldownInterval);\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      } else if (errorMessage.includes('500') || errorMessage.includes('Internal Server Error')) {\n        errorMessage = 'Server error occurred. Please try again in a moment.';\n      } else if (errorMessage.includes('timeout')) {\n        errorMessage = 'Request timed out. Please try again.';\n      }\n\n      setMessage('Error generating image and caption: ' + errorMessage);\n\n      // Clear any partial results on error\n      setAiImageUrl('');\n      setCaption('');\n    } finally {\n      setAiGenerating(false);\n      setGeneratingCaption(false);\n    }\n  };\n\n  // --- Retry Image Generation ---\n  const handleRetryImageGeneration = async () => {\n    if (!aiPrompt.trim()) {\n      setMessage('Please enter a prompt for image generation.');\n      return;\n    }\n\n    setAiGenerating(true);\n    setMessage('Retrying image generation...');\n\n    try {\n      console.log('🔍 DEBUG: Retrying image generation with prompt:', aiPrompt.trim());\n\n      const res = await apiClient.generateInstagramImage(aiPrompt.trim());\n      console.log('🔍 DEBUG: Retry image generation response:', res);\n\n      if (res && res.success && res.data && res.data.image_url) {\n        setAiImageUrl(res.data.image_url);\n        setMessage('Image generated successfully on retry!');\n        console.log('🔍 DEBUG: Generated image URL (retry):', res.data.image_url);\n      } else if (res && res.data && res.data.image_url) {\n        // Fallback for different response format\n        setAiImageUrl(res.data.image_url);\n        setMessage('Image generated successfully on retry!');\n        console.log('🔍 DEBUG: Generated image URL (retry fallback):', res.data.image_url);\n      } else {\n        console.error('🔍 DEBUG: Invalid response format on retry:', res);\n        setMessage('Failed to generate image on retry. Please try again.');\n      }\n    } catch (err) {\n      console.error('🔍 DEBUG: Retry image generation error:', err);\n\n      // Handle specific error types\n      let errorMessage = err.message || err.toString();\n\n      if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {\n        errorMessage = 'Invalid or expired Stability AI API key. Please check your API key in the backend configuration.';\n      } else if (errorMessage.includes('429') || errorMessage.includes('Too Many Requests')) {\n        errorMessage = 'Rate limit exceeded. Please wait a few minutes before trying again, or upgrade your Stability AI plan.';\n        // Set a 5-minute cooldown\n        setRateLimitCooldown(300);\n        const cooldownInterval = setInterval(() => {\n          setRateLimitCooldown(prev => {\n            if (prev <= 1) {\n              clearInterval(cooldownInterval);\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      } else if (errorMessage.includes('500') || errorMessage.includes('Internal Server Error')) {\n        errorMessage = 'Server error occurred. Please try again in a moment.';\n      } else if (errorMessage.includes('timeout')) {\n        errorMessage = 'Request timed out. Please try again.';\n      }\n\n      setMessage('Error retrying image generation: ' + errorMessage);\n    } finally {\n      setAiGenerating(false);\n    }\n  };\n\n  // --- Carousel Upload ---\n  const handleCarouselFilesChange = async (e) => {\n    const files = Array.from(e.target.files);\n    if (files.length < 3 || files.length > 7) {\n      setMessage('Please select 3 to 7 images.');\n      return;\n    }\n    setCarouselGenerating(true);\n    setMessage('Uploading carousel images...');\n    try {\n      const urls = [];\n      for (const file of files) {\n        if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\n          setMessage('All images must be PNG or JPG.');\n          setCarouselGenerating(false);\n          return;\n        }\n        const res = await apiClient.uploadImageToCloudinary(file);\n        if (res && res.success && res.data && res.data.url) {\n          urls.push(res.data.url);\n        } else {\n          throw new Error(res?.error || 'Upload failed');\n        }\n      }\n      setCarouselImages(urls);\n      setMessage(`Uploaded ${urls.length} images for carousel.`);\n    } catch (err) {\n      setMessage('Error uploading carousel images: ' + err.message);\n    } finally {\n      setCarouselGenerating(false);\n    }\n  };\n\n  // --- Carousel Drag and Drop Handlers ---\n  const handleDragStart = (e, index) => {\n    setDraggedIndex(index);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e, dropIndex) => {\n    e.preventDefault();\n\n    if (draggedIndex === null || draggedIndex === dropIndex) {\n      setDraggedIndex(null);\n      return;\n    }\n\n    const newImages = [...carouselImages];\n    const draggedImage = newImages[draggedIndex];\n\n    // Remove the dragged item\n    newImages.splice(draggedIndex, 1);\n\n    // Insert at new position\n    newImages.splice(dropIndex, 0, draggedImage);\n\n    setCarouselImages(newImages);\n    setDraggedIndex(null);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedIndex(null);\n  };\n\n  const removeCarouselImage = (indexToRemove) => {\n    const newImages = carouselImages.filter((_, index) => index !== indexToRemove);\n    setCarouselImages(newImages);\n\n    // Adjust carousel count if needed\n    if (newImages.length < carouselCount) {\n      setCarouselCount(Math.max(3, newImages.length));\n    }\n  };\n\n  // --- Carousel Auto Generate Caption ---\n  const handleCarouselAutoGenerateCaption = async () => {\n    if (!captionPrompt.trim()) {\n      setMessage('Please provide a prompt for caption generation.');\n      return;\n    }\n\n    setGeneratingCaption(true);\n    setMessage('Generating carousel caption...');\n\n    try {\n      const result = await apiClient.generateInstagramCaption(captionPrompt.trim());\n      if (result.success && result.content) {\n        setCarouselCaption(result.content);\n        setMessage('Caption generated successfully!');\n      } else {\n        setMessage('Failed to generate caption: ' + (result.error || 'Unknown error'));\n      }\n    } catch (err) {\n      setMessage('Error generating caption: ' + err.message);\n    } finally {\n      setGeneratingCaption(false);\n    }\n  };\n\n  // --- Reel Upload ---\n  const handleReelFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!ACCEPTED_VIDEO_TYPES.includes(file.type)) {\n      setMessage('Only .mp4 or .mov files are allowed.');\n      return;\n    }\n    setReelUploading(true);\n    setMessage('Uploading video...');\n    try {\n      const res = await apiClient.uploadVideoToCloudinary(file);\n      console.log('Video upload response:', res);\n\n      // Check for different response structures\n      if (res && res.success && (res.url || res.data?.url)) {\n        const videoUrl = res.url || res.data?.url;\n        const filename = res.filename || res.data?.filename;\n        setReelUrl(videoUrl);\n        setReelFilename(filename || '');\n        // eslint-disable-next-line no-undef\n        setReelFile(file);\n        console.log('🔍 DEBUG: Video uploaded successfully:', {\n          videoUrl,\n          filename,\n          res\n        });\n        setMessage('Video uploaded successfully!');\n      } else if (res && res.data && res.data.url) {\n        // Alternative response structure\n        setReelUrl(res.data.url);\n        setReelFilename(res.data.filename || '');\n        // eslint-disable-next-line no-undef\n        setReelFile(file);\n        setMessage('Video uploaded successfully!');\n      } else {\n        throw new Error(res?.error || res?.message || 'Upload failed');\n      }\n    } catch (err) {\n      console.error('Video upload error:', err);\n      setMessage('Error: ' + (err.message || err.toString()));\n    } finally {\n      setReelUploading(false);\n    }\n  };\n\n  // --- Reel Auto Generate Caption ---\n  const handleReelAutoGenerateCaption = async () => {\n    if (!reelCaptionPrompt.trim()) {\n      setMessage('Please provide a prompt for caption generation.');\n      return;\n    }\n\n    setGeneratingReelCaption(true);\n    setMessage('Generating reel caption...');\n\n    try {\n      const result = await apiClient.generateInstagramCaption(reelCaptionPrompt.trim());\n      if (result.success && result.content) {\n        setReelCaption(result.content);\n        setMessage('Reel caption generated successfully!');\n      } else {\n        setMessage('Failed to generate caption: ' + (result.error || 'Unknown error'));\n      }\n    } catch (err) {\n      setMessage('Error generating caption: ' + err.message);\n    } finally {\n      setGeneratingReelCaption(false);\n    }\n  };\n\n  // --- Reel Thumbnail Upload ---\n  const handleReelThumbnailChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\n      setMessage('Only .jpg, .jpeg, .png files are allowed for thumbnail.');\n      return;\n    }\n    setMessage('Uploading thumbnail image...');\n    try {\n      const res = await apiClient.uploadThumbnailToCloudinary(file);\n      if (res && res.success && (res.url || res.data?.url)) {\n        const imageUrl = res.url || res.data?.url;\n        const filename = res.filename || res.data?.filename;\n        setReelThumbnailUrl(imageUrl);\n        setReelThumbnailFilename(filename || '');\n        // eslint-disable-next-line no-undef\n        setReelThumbnailFile(file);\n        console.log('🔍 DEBUG: Thumbnail uploaded successfully:', {\n          imageUrl,\n          filename,\n          res\n        });\n        setMessage('Thumbnail uploaded successfully!');\n      } else {\n        throw new Error(res?.error || res?.message || 'Thumbnail upload failed');\n      }\n    } catch (err) {\n      setMessage('Error: ' + (err.message || err.toString()));\n    }\n  };\n\n  // --- Google Drive Integration ---\n  const checkGoogleDriveAuth = async () => {\n    try {\n      const response = await apiClient.getGoogleDriveStatus();\n      setDriveAuthenticated(response.authenticated);\n      return response.authenticated;\n    } catch (error) {\n      console.error('Error checking Google Drive auth:', error);\n      setDriveAuthenticated(false);\n      return false;\n    }\n  };\n\n  const authenticateGoogleDrive = async () => {\n    setDriveAuthLoading(true);\n    try {\n      const response = await apiClient.getGoogleDriveAuthorizeUrl();\n      if (response.consent_url) {\n        // Open popup for OAuth\n        const popup = window.open(\n          response.consent_url,\n          'google-drive-auth',\n          'width=500,height=600,scrollbars=yes,resizable=yes'\n        );\n\n        // Listen for OAuth completion\n        const handleMessage = (event) => {\n          if (event.data.success) {\n            setDriveAuthenticated(true);\n            setMessage('Google Drive connected successfully!');\n            loadDriveFiles();\n          } else if (event.data.error) {\n            setMessage(`Google Drive authentication failed: ${event.data.error}`);\n          }\n          window.removeEventListener('message', handleMessage);\n          if (popup) popup.close();\n        };\n\n        window.addEventListener('message', handleMessage);\n      } else if (response.already_authenticated) {\n        setDriveAuthenticated(true);\n        setMessage('Google Drive already authenticated!');\n        loadDriveFiles();\n      }\n    } catch (error) {\n      setMessage(`Google Drive authentication error: ${error.message}`);\n    } finally {\n      setDriveAuthLoading(false);\n    }\n  };\n\n  const loadDriveFiles = async () => {\n    if (!driveAuthenticated) return;\n\n    setLoadingDriveFiles(true);\n    try {\n      const response = await apiClient.getGoogleDriveFiles('image/');\n      if (response.success && response.files) {\n        setDriveFiles(response.files);\n      } else {\n        setMessage('Failed to load Google Drive files');\n      }\n    } catch (error) {\n      setMessage(`Error loading Google Drive files: ${error.message}`);\n    } finally {\n      setLoadingDriveFiles(false);\n    }\n  };\n\n  const handleDriveFileSelect = async (fileId, fileName) => {\n    setUploadingImage(true);\n    setMessage('Downloading file from Google Drive...');\n    try {\n      const response = await apiClient.downloadGoogleDriveFile(fileId);\n      if (response.success && response.fileContent) {\n        // Convert base64 to blob and upload to Cloudinary\n        const byteCharacters = atob(response.fileContent);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], { type: response.mimeType });\n\n        // Create a File object from the blob\n        const file = new File([blob], fileName, { type: response.mimeType });\n\n        // Upload to Cloudinary\n        const uploadResponse = await apiClient.uploadImageToCloudinary(file);\n        if (uploadResponse.success && uploadResponse.data && uploadResponse.data.url) {\n          setUploadedImageUrl(uploadResponse.data.url);\n          setAiImageUrl(uploadResponse.data.url);\n          setMessage('File uploaded from Google Drive successfully!');\n          setShowDriveModal(false);\n        } else {\n          throw new Error(uploadResponse.error || 'Upload failed');\n        }\n      } else {\n        throw new Error(response.error || 'Download failed');\n      }\n    } catch (error) {\n      setMessage(`Error processing Google Drive file: ${error.message}`);\n    } finally {\n      setUploadingImage(false);\n    }\n  };\n\n  const openDriveModal = async () => {\n    const isAuth = await checkGoogleDriveAuth();\n    if (!isAuth) {\n      await authenticateGoogleDrive();\n    } else {\n      await loadDriveFiles();\n    }\n    setShowDriveModal(true);\n  };\n\n  // File Picker Functions\n  const openFilePicker = (type, formType) => {\n    setFilePickerType(type);\n    setFilePickerFormType(formType);\n    setShowFilePicker(true);\n  };\n\n  const closeFilePicker = () => {\n    setShowFilePicker(false);\n    setFilePickerType('');\n    setFilePickerFormType('');\n    setIsLoadingGoogleDrive(false);\n  };\n\n  const handleLocalFileSelect = (event) => {\n    const files = Array.from(event.target.files);\n    if (files.length === 0) return;\n\n    if (filePickerFormType === 'carousel') {\n      // Handle carousel upload\n      handleCarouselFilesChange({ target: { files } });\n    } else {\n      // Handle single file upload\n      const file = files[0];\n      if (filePickerType === 'photo') {\n        handleImageChange({ target: { files: [file] } });\n      } else if (filePickerType === 'video') {\n        handleReelFileChange({ target: { files: [file] } });\n      }\n    }\n    closeFilePicker();\n  };\n\n  const handleGoogleDriveSelect = async () => {\n    setIsLoadingGoogleDrive(true);\n    try {\n      // Check if already authenticated\n      const status = await apiClient.getGoogleDriveStatus();\n      if (!status.authenticated) {\n        // Get consent URL for popup\n        const authResponse = await apiClient.getGoogleDriveAuthorizeUrl();\n        if (authResponse.consent_url) {\n          // Open popup and wait for completion\n          await openDriveAuthPopup(authResponse.consent_url);\n        }\n      }\n\n      // After popup closes, re-check authentication status\n      const finalStatus = await apiClient.getGoogleDriveStatus();\n      if (!finalStatus.authenticated) {\n        throw new Error('Authentication was not completed successfully');\n      }\n\n      // Update state and proceed with Google Drive picker\n      setGoogleDriveAvailable(true);\n\n      // Initialize Google Drive API\n      await loadGoogleDriveAPI();\n\n      // Check if google object is available\n      if (typeof window.google === 'undefined' || !window.google.picker) {\n        throw new Error('Google Picker API failed to load');\n      }\n\n      // Get fresh token for picker\n      const authResult = await apiClient.getGoogleDriveAuth();\n\n      // Open Google Drive picker\n      const picker = new window.google.picker.PickerBuilder()\n        .addView(new window.google.picker.DocsView()\n          .setIncludeFolders(true)\n          .setSelectFolderEnabled(false)\n          .setMimeTypes(filePickerType === 'photo' ? 'image/*' : 'video/*'))\n        .setOAuthToken(authResult.access_token)\n        .setDeveloperKey(process.env.REACT_APP_GOOGLE_DEVELOPER_KEY || '')\n        .setCallback(handleGoogleDriveCallback)\n        .enableFeature(window.google.picker.Feature.NAV_HIDDEN)\n        .enableFeature(window.google.picker.Feature.MULTISELECT_ENABLED, filePickerFormType === 'carousel')\n        .setTitle(filePickerFormType === 'carousel' ? 'Select multiple files from Google Drive' : 'Select a file from Google Drive')\n        .setSelectableMimeTypes(filePickerType === 'photo' ? 'image/*' : 'video/*')\n        .build();\n\n      picker.setVisible(true);\n\n    } catch (error) {\n      console.error('Error with Google Drive selection:', error);\n      setMessage(`Google Drive error: ${error.message}`);\n    } finally {\n      setIsLoadingGoogleDrive(false);\n    }\n  };\n\n  const loadGoogleDriveAPI = () => {\n    return new Promise((resolve, reject) => {\n      if (window.google && window.google.picker) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://apis.google.com/js/api.js';\n      script.onload = () => {\n        if (window.gapi) {\n          window.gapi.load('picker', () => {\n            resolve();\n          });\n        } else {\n          reject(new Error('Google API failed to load'));\n        }\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  };\n\n  const openDriveAuthPopup = (authUrl) => {\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        authUrl,\n        'google-drive-auth',\n        'width=500,height=600,scrollbars=yes,resizable=yes'\n      );\n\n      const messageHandler = (event) => {\n        if (event.data.success) {\n          setGoogleDriveAvailable(true);\n          setMessage('Google Drive connected successfully!');\n          resolve();\n        } else if (event.data.error) {\n          setMessage(`Google Drive authentication failed: ${event.data.error}`);\n          reject(new Error(event.data.error));\n        }\n        window.removeEventListener('message', messageHandler);\n        if (popup) popup.close();\n      };\n\n      window.addEventListener('message', messageHandler);\n\n      // Timeout after 5 minutes\n      setTimeout(() => {\n        window.removeEventListener('message', messageHandler);\n        if (popup) popup.close();\n        reject(new Error('Authentication timeout'));\n      }, 300000);\n    });\n  };\n\n  const handleGoogleDriveCallback = async (data) => {\n    if (data.action === window.google.picker.Action.PICKED) {\n      const files = data.docs;\n      try {\n        if (filePickerFormType === 'carousel') {\n          // Handle multiple files for carousel\n          const fileObjects = [];\n          for (const file of files) {\n            const fileContent = await downloadGoogleDriveFile(file.id);\n            const blob = new Blob([fileContent], { type: file.mimeType });\n            const fileObj = new File([blob], file.name, { type: file.mimeType });\n            fileObjects.push(fileObj);\n          }\n          handleCarouselFilesChange({ target: { files: fileObjects } });\n        } else {\n          // Handle single file\n          const file = files[0];\n          const fileContent = await downloadGoogleDriveFile(file.id);\n          const blob = new Blob([fileContent], { type: file.mimeType });\n          const fileObj = new File([blob], file.name, { type: file.mimeType });\n\n          if (filePickerType === 'photo') {\n            handleImageChange({ target: { files: [fileObj] } });\n          } else if (filePickerType === 'video') {\n            handleReelFileChange({ target: { files: [fileObj] } });\n          }\n        }\n\n        closeFilePicker();\n        setMessage('File(s) selected from Google Drive successfully!');\n      } catch (error) {\n        console.error('Error downloading file from Google Drive:', error);\n        setMessage('Failed to download file from Google Drive: ' + error.message);\n      }\n    }\n  };\n\n  const downloadGoogleDriveFile = async (fileId) => {\n    try {\n      const response = await apiClient.downloadGoogleDriveFile(fileId);\n      if (response.success && response.fileContent) {\n        // Convert base64 to blob\n        const byteCharacters = atob(response.fileContent);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        return byteArray;\n      } else {\n        throw new Error(response.error || 'Download failed');\n      }\n    } catch (error) {\n      throw new Error(`Failed to download file: ${error.message}`);\n    }\n  };\n\n  // --- Post Submission ---\n  const handlePublish = async () => {\n    if (!selectedAccount) {\n      setMessage('Please select an Instagram account first');\n      return;\n    }\n\n    if (postType === 'photo' && (!aiImageUrl || !aiImageUrl.trim()) && (!uploadedImageUrl || !uploadedImageUrl.trim())) {\n      setMessage('Please select or generate an image');\n      return;\n    }\n\n    if (postType === 'carousel' && carouselImages.length === 0) {\n      setMessage('Please generate or upload carousel images');\n      return;\n    }\n\n    if (postType === 'reel' && !reelUrl) {\n      setMessage('Please upload a video for the reel');\n      return;\n    }\n\n    setLoading(true);\n    setMessage('Creating Instagram post...');\n\n    // Create pre-posting notification\n    addNotification({\n      type: 'pre_posting',\n      platform: 'instagram',\n      strategyName: postType === 'photo' ? 'Photo Post' : (postType === 'reel' ? 'Reel Post' : 'Carousel Post'),\n      message: `Preparing to publish your Instagram ${postType} post...`,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      // Use the unified Instagram post endpoint for all post types\n      const options = {\n        instagram_user_id: selectedAccount.platform_user_id,\n        post_type: postType === 'photo' ? 'feed' : (postType === 'reel' ? 'reel' : postType),\n        media_type: postType === 'reel' ? 'video' : 'image' // <-- robust: send 'video' for reels\n      };\n\n      // Handle different post types\n      if (postType === 'photo') {\n        options.caption = caption;\n        const imageUrl = imageSource === 'ai' ? aiImageUrl : uploadedImageUrl;\n        if (imageUrl && imageUrl.trim()) {\n          options.image_url = imageUrl;\n        } else {\n          // If no image is available, we can't create a photo post\n          setMessage('Please select or generate an image before creating a photo post');\n          setLoading(false);\n          return;\n        }\n        console.log('🔍 DEBUG: Photo post options:', {\n          postType,\n          imageSource,\n          aiImageUrl,\n          uploadedImageUrl,\n          finalImageUrl: options.image_url,\n          caption: options.caption\n        });\n      } else if (postType === 'carousel') {\n        // For carousel, we need to use the carousel-specific endpoint\n        const response = await apiClient.postInstagramCarousel(\n          selectedAccount.platform_user_id,\n          carouselCaption,\n          carouselImages\n        );\n\n        if (response.success) {\n          setMessage('Instagram carousel post created successfully!');\n\n          // Create success notification for carousel\n          addNotification({\n            type: 'success',\n            platform: 'instagram',\n            strategyName: 'Carousel Post',\n            message: 'Your Instagram carousel post was published successfully!',\n            timestamp: new Date().toISOString()\n          });\n\n          // Reset form\n          setCarouselImages([]);\n          setCarouselCaption('');\n          setCaptionPrompt('');\n          setAutoGenerateCaption(false);\n          setAiPrompt('');\n\n          // Reload user media\n          if (selectedAccount) {\n            loadUserMedia(selectedAccount.platform_user_id);\n          }\n        } else {\n          setMessage(`Failed to create carousel post: ${response.error}`);\n\n          // Create failure notification for carousel\n          addNotification({\n            type: 'failure',\n            platform: 'instagram',\n            strategyName: 'Carousel Post',\n            message: `Failed to publish Instagram carousel post: ${response.error}`,\n            timestamp: new Date().toISOString()\n          });\n        }\n        setLoading(false);\n        return;\n      } else if (postType === 'reel') {\n        options.caption = reelCaption;\n        // Always use Cloudinary URL for Reels\n        if (reelUrl && reelUrl.trim().startsWith('http')) {\n          options.video_url = reelUrl;\n        } else if (reelFilename && reelFilename.trim()) {\n          options.video_filename = reelFilename;\n        }\n        options.is_reel = true;\n        if (reelThumbnailUrl && reelThumbnailUrl.trim()) {\n          options.thumbnail_url = reelThumbnailUrl;\n        } else if (reelThumbnailFilename && reelThumbnailFilename.trim()) {\n          options.thumbnail_filename = reelThumbnailFilename;\n        }\n        options.media_type = 'video';\n        // Do NOT send media_file or media_filename for Reels\n        if ('media_file' in options) delete options.media_file;\n        if ('media_filename' in options) delete options.media_filename;\n        if ('image_url' in options) delete options.image_url;\n        console.log('🔍 DEBUG: Reel post options:', options);\n        console.log('🔍 DEBUG: Thumbnail state values:', {\n          reelThumbnailUrl,\n          reelThumbnailFilename,\n          hasThumbnailUrl: reelThumbnailUrl && reelThumbnailUrl.trim(),\n          hasThumbnailFilename: reelThumbnailFilename && reelThumbnailFilename.trim()\n        });\n      }\n\n      // Remove any empty string values from options to avoid backend validation issues\n      const cleanOptions = Object.fromEntries(\n        Object.entries(options).filter(([key, value]) =>\n          value !== null && value !== undefined && value !== ''\n        )\n      );\n\n      // Additional validation for photo posts\n      if (postType === 'photo' && !cleanOptions.image_url) {\n        setMessage('Photo posts require an image. Please select or generate an image first.');\n        setLoading(false);\n        return;\n      }\n\n      // Additional validation for reel posts\n      if (postType === 'reel' && !cleanOptions.video_url && !cleanOptions.video_filename) {\n        setMessage('Reel posts require a video. Please upload a video first.');\n        setLoading(false);\n        return;\n      }\n\n      console.log('🔍 DEBUG: Calling createUnifiedInstagramPost with:', {\n        instagramUserId: selectedAccount.platform_user_id,\n        options: cleanOptions,\n        originalPostType: postType,\n        originalOptions: options,\n        reelUrl: reelUrl,\n        reelFilename: reelFilename\n      });\n      console.log('🔍 DEBUG: Final thumbnail state before API call:', {\n        reelThumbnailUrl,\n        reelThumbnailFilename,\n        hasThumbnailUrl: reelThumbnailUrl && reelThumbnailUrl.trim(),\n        hasThumbnailFilename: reelThumbnailFilename && reelThumbnailFilename.trim(),\n        cleanOptionsHasThumbnail: cleanOptions.thumbnail_url || cleanOptions.thumbnail_filename\n      });\n      const response = await apiClient.createUnifiedInstagramPost(selectedAccount.platform_user_id, cleanOptions);\n\n      if (response.success) {\n        setMessage('Instagram post created successfully!');\n\n        // Create success notification\n        addNotification({\n          type: 'success',\n          platform: 'instagram',\n          strategyName: postType === 'photo' ? 'Photo Post' : (postType === 'reel' ? 'Reel Post' : 'Carousel Post'),\n          message: `Your Instagram ${postType} post was published successfully!`,\n          timestamp: new Date().toISOString()\n        });\n\n        // Reset form\n        setCaption('');\n        setReelCaption('');\n        setReelCaptionPrompt('');\n        setReelAutoGenerateCaption(false);\n        setAiImageUrl('');\n        setUploadedImageUrl('');\n        setReelUrl('');\n        setReelFilename(''); // Clear the filename too\n        // eslint-disable-next-line no-undef\n        setReelFile(null);\n        setSelectedImageFile(null);\n        setAiPrompt('');\n        setCaptionPrompt('');\n        setReelThumbnailUrl('');\n        setReelThumbnailFilename('');\n        // eslint-disable-next-line no-undef\n        setReelThumbnailFile(null);\n        // Reload user media\n        if (selectedAccount) {\n          loadUserMedia(selectedAccount.platform_user_id);\n        }\n        // --- Synchronize account info for post count ---\n        try {\n          const allAccounts = await apiClient.getSocialAccounts();\n          const updatedAccount = allAccounts.find(acc => acc.id === selectedAccount.id);\n          if (updatedAccount) {\n            setSelectedAccount(updatedAccount);\n            setInstagramAccounts(prev =>\n              prev.map(acc => acc.id === updatedAccount.id ? updatedAccount : acc)\n            );\n          }\n        } catch (err) {\n          console.warn('Failed to refresh account info after post:', err);\n        }\n        // Do NOT change tab after photo or reel publish\n      } else {\n        let errorMsg = `Failed to create post: ${response.error || 'Unknown error'}`;\n        if (response.details) {\n          errorMsg += `\\nDetails: ${typeof response.details === 'string' ? response.details : JSON.stringify(response.details)}`;\n        }\n        setMessage(errorMsg);\n\n        // Create failure notification\n        addNotification({\n          type: 'failure',\n          platform: 'instagram',\n          strategyName: postType === 'photo' ? 'Photo Post' : (postType === 'reel' ? 'Reel Post' : 'Carousel Post'),\n          message: `Failed to publish Instagram ${postType} post: ${response.error || 'Unknown error'}`,\n          timestamp: new Date().toISOString()\n        });\n        console.error('Instagram post error:', response);\n      }\n    } catch (error) {\n      console.error('Error creating Instagram post:', error);\n      setMessage(`Error creating post: ${error.message}`);\n\n      // Create failure notification for unexpected errors\n      addNotification({\n        type: 'failure',\n        platform: 'instagram',\n        strategyName: postType === 'photo' ? 'Photo Post' : (postType === 'reel' ? 'Reel Post' : 'Carousel Post'),\n        message: `Unexpected error creating Instagram ${postType} post: ${error.message}`,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check Google Drive availability\n  const checkGoogleDriveAvailability = async () => {\n    try {\n      const status = await apiClient.getGoogleDriveStatus();\n      setGoogleDriveAvailable(status.authenticated);\n    } catch (error) {\n      console.error('Error checking Google Drive availability:', error);\n      setGoogleDriveAvailable(false);\n    }\n  };\n\n  // --- Logout ---\n  const handleLogout = () => {\n    setInstagramAccounts([]);\n    setSelectedAccount('');\n    setIsConnected(false);\n    setActiveTab('connect');\n    setMessage('Instagram accounts disconnected');\n  };\n\n  // Auto-Reply Functions\n  const loadAutoReplySettings = async () => {\n    if (!selectedAccount) return;\n\n    try {\n      console.log('🔄 Loading auto-reply settings for Instagram account:', selectedAccount.platform_user_id, selectedAccount.username);\n\n      // Get automation rules for Instagram auto-reply\n      const rules = await apiClient.getAutomationRules('instagram', 'auto_reply');\n      console.log('📋 Found automation rules:', rules);\n\n      // Find existing auto-reply rule for this account\n      const existingRule = rules.find(rule =>\n        rule.social_account_id === selectedAccount.id &&\n        rule.rule_type === 'AUTO_REPLY'\n      );\n\n      if (existingRule) {\n        setAutoReplyEnabled(existingRule.is_active);\n        setAutoReplyTemplate(existingRule.actions?.template || '');\n        console.log('✅ Found existing auto-reply rule:', existingRule);\n      } else {\n        setAutoReplyEnabled(false);\n        setAutoReplyTemplate('');\n        console.log('📝 No existing auto-reply rule found');\n      }\n\n      // Load posts for auto-reply selection\n      await loadPostsForAutoReply();\n\n    } catch (error) {\n      console.error('❌ Error loading auto-reply settings:', error);\n\n      let errorMessage = 'Failed to load auto-reply settings';\n      if (error.response?.data?.detail) {\n        errorMessage += ': ' + error.response.data.detail;\n      } else if (error.message) {\n        errorMessage += ': ' + error.message;\n      }\n\n      setMessage(errorMessage);\n    }\n  };\n\n  // DM Auto-Reply Functions\n  const loadDmAutoReplySettings = async () => {\n    if (!selectedAccount) return;\n    try {\n      console.log('🔄 Loading DM auto-reply settings for Instagram account:', selectedAccount.platform_user_id, selectedAccount.username);\n      const statusResponse = await apiClient.getInstagramDmAutoReplyStatus(selectedAccount.platform_user_id);\n      console.log('📋 DM auto-reply status:', statusResponse);\n      if (statusResponse.success) {\n        setDmAutoReplyEnabled(statusResponse.enabled);\n        console.log('✅ DM auto-reply status loaded:', statusResponse.enabled);\n      } else {\n        setDmAutoReplyEnabled(false);\n        showToast('Failed to load DM auto-reply status: ' + (statusResponse.error || 'Unknown error'), 'error');\n        console.log('📝 No DM auto-reply status found');\n      }\n    } catch (error) {\n      setDmAutoReplyEnabled(false);\n      showToast('Error loading DM auto-reply settings: ' + (error?.message || 'Unknown error'), 'error');\n      console.error('❌ Error loading DM auto-reply settings:', error);\n    }\n  };\n\n  const handleDmAutoReplyToggle = async () => {\n    if (!selectedAccount) {\n      showToast('Please select an Instagram account first.', 'error');\n      return;\n    }\n    setDmAutoReplyLoading(true);\n    try {\n      const response = await apiClient.toggleInstagramDmAutoReply(\n        selectedAccount.platform_user_id,\n        !dmAutoReplyEnabled\n      );\n      if (response.success) {\n        setDmAutoReplyEnabled(!dmAutoReplyEnabled);\n        showToast(\n          !dmAutoReplyEnabled\n            ? 'Auto DM Reply enabled successfully!'\n            : 'Auto DM Reply disabled successfully.',\n          'success'\n        );\n      } else {\n        showToast('Failed to toggle Auto DM Reply: ' + (response.error || 'Unknown error'), 'error');\n        console.error('❌ Failed to toggle Auto DM Reply:', response);\n      }\n    } catch (error) {\n      showToast('Failed to toggle Auto DM Reply: ' + (error?.message || 'Unknown error'), 'error');\n      console.error('❌ Error toggling Auto DM Reply:', error);\n    } finally {\n      setDmAutoReplyLoading(false);\n    }\n  };\n\n  const loadPostsForAutoReply = async () => {\n    if (!selectedAccount) return;\n\n    try {\n      setLoadingAutoReplyPosts(true);\n      console.log('🔄 Loading posts for auto-reply selection for Instagram account:', selectedAccount.platform_user_id);\n\n      // First, try to get posts directly from the database\n      const response = await apiClient.getPosts('instagram');\n      console.log('📋 All Instagram posts from database:', response);\n\n      if (response && Array.isArray(response)) {\n        console.log('🔍 Selected account details:', {\n          id: selectedAccount.id,\n          platform_user_id: selectedAccount.platform_user_id,\n          username: selectedAccount.username\n        });\n\n        // Filter posts for this specific account with better debugging\n        const accountPosts = response.filter(post => {\n          // Primary match: social_account_id (most reliable)\n          const matchesAccountId = post.social_account?.id === selectedAccount.id;\n\n          // Secondary matches for compatibility\n          const matchesPlatformUserId = post.social_account?.platform_user_id === selectedAccount.platform_user_id;\n          const matchesUsername = post.social_account?.username === selectedAccount.username;\n\n          const isMatch = matchesAccountId || matchesPlatformUserId || matchesUsername;\n\n          console.log('🔍 Checking post:', {\n            postId: post.id,\n            postAccountId: post.social_account?.id,\n            postPlatformUserId: post.social_account?.platform_user_id,\n            postUsername: post.social_account?.username,\n            selectedAccountId: selectedAccount.id,\n            selectedPlatformUserId: selectedAccount.platform_user_id,\n            selectedUsername: selectedAccount.username,\n            matchesAccountId,\n            matchesPlatformUserId,\n            matchesUsername,\n            isMatch\n          });\n\n          return isMatch;\n        });\n\n        console.log('📋 Posts for this account:', accountPosts.length);\n        console.log('📋 All posts in database:', response.length);\n        console.log('📋 Account posts details:', accountPosts.map(post => ({\n          id: post.id,\n          content: post.content?.substring(0, 50) + '...',\n          social_account_id: post.social_account?.id,\n          platform_user_id: post.social_account?.platform_user_id,\n          username: post.social_account?.username\n        })));\n\n        if (accountPosts.length === 0) {\n          console.log('⚠️ No posts found for this specific account. Showing all Instagram posts for debugging...');\n\n          // Show all Instagram posts for debugging\n          setAutoReplyPosts(response);\n          console.log('📋 Showing all Instagram posts for debugging:', response.length);\n\n          // Also try to sync from Instagram API\n          console.log('🔄 Attempting to sync from Instagram...');\n          try {\n            const syncResponse = await apiClient.syncInstagramPosts(selectedAccount.platform_user_id);\n            console.log('📡 Sync response:', syncResponse);\n\n            if (syncResponse.success) {\n              // Re-fetch posts after sync\n              const refreshedResponse = await apiClient.getPosts('instagram');\n              const refreshedAccountPosts = refreshedResponse.filter(post => {\n                // Primary match: social_account_id (most reliable)\n                const matchesAccountId = post.social_account?.id === selectedAccount.id;\n\n                // Secondary matches for compatibility\n                const matchesPlatformUserId = post.social_account?.platform_user_id === selectedAccount.platform_user_id;\n                const matchesUsername = post.social_account?.username === selectedAccount.username;\n\n                return matchesAccountId || matchesPlatformUserId || matchesUsername;\n              });\n\n              if (refreshedAccountPosts.length > 0) {\n                setAutoReplyPosts(refreshedAccountPosts);\n                console.log('✅ Posts loaded after sync:', refreshedAccountPosts.length);\n              } else {\n                console.log('⚠️ Still no posts found after sync. Showing all posts for debugging.');\n                setAutoReplyPosts(refreshedResponse);\n                setMessage('No posts found for this account. Showing all Instagram posts for debugging. Create some posts first using the Create Post tab.');\n              }\n            } else {\n              setMessage('Failed to sync posts from Instagram. Showing all posts for debugging.');\n            }\n          } catch (syncError) {\n            console.error('❌ Sync error:', syncError);\n            setMessage('Failed to sync posts from Instagram. Showing all posts for debugging.');\n          }\n        } else {\n          setAutoReplyPosts(accountPosts);\n          console.log('✅ Posts loaded for auto-reply selection:', accountPosts.length);\n        }\n      } else {\n        throw new Error('Failed to load posts');\n      }\n    } catch (error) {\n      console.error('❌ Error loading posts for auto-reply:', error);\n\n      // Provide more specific error messages\n      let errorMessage = 'Failed to load posts for auto-reply selection';\n      if (error.message.includes('404')) {\n        errorMessage = 'Instagram account not found. Please reconnect your Instagram account.';\n      } else if (error.message.includes('401')) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.message.includes('500')) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n\n      setMessage(errorMessage);\n    } finally {\n      setLoadingAutoReplyPosts(false);\n    }\n  };\n\n  const handlePostSelection = (postId) => {\n    setSelectedAutoReplyPosts(prev => {\n      if (prev.includes(postId)) {\n        return prev.filter(id => id !== postId);\n      } else {\n        return [...prev, postId];\n      }\n    });\n  };\n\n  const handlePostTouch = (postId, event) => {\n    event.preventDefault();\n    handlePostSelection(postId);\n  };\n\n  const selectAllPosts = () => {\n    const allPostIds = autoReplyPosts.map(post => post.id);\n    setSelectedAutoReplyPosts(allPostIds);\n  };\n\n  const deselectAllPosts = () => {\n    setSelectedAutoReplyPosts([]);\n  };\n\n\n\n  const handleSelectPosts = () => {\n    setIsSelectingPosts(true);\n    // Load posts when entering selection mode\n    if (autoReplyPosts.length === 0) {\n      loadPostsForAutoReply();\n    }\n  };\n\n  const handleDoneSelecting = () => {\n    setIsSelectingPosts(false);\n  };\n\n  const handleAutoReplyToggle = async () => {\n    if (!selectedAccount) {\n      setMessage('Please select an Instagram account first');\n      return;\n    }\n\n    // Check if posts are available when enabling\n    if (!autoReplyEnabled && autoReplyPosts.length === 0) {\n      setMessage('No posts available for auto-reply. Please create some posts first.');\n      return;\n    }\n\n    // If enabling auto-reply without selected posts, auto-select all posts\n    if (!autoReplyEnabled && selectedAutoReplyPosts.length === 0) {\n      const allPostIds = autoReplyPosts.map(post => post.id);\n      setSelectedAutoReplyPosts(allPostIds);\n      console.log('Auto-selecting all posts for auto-reply:', allPostIds);\n    }\n\n    // Add mobile-friendly confirmation for enabling auto-reply\n    if (!autoReplyEnabled) {\n      const isMobile = window.innerWidth <= 768;\n      const postCount = selectedAutoReplyPosts.length > 0 ? selectedAutoReplyPosts.length : autoReplyPosts.length;\n      const confirmMessage = isMobile\n        ? `Enable auto-reply for ${postCount} post(s)?`\n        : `Enable auto-reply for ${postCount} post(s)? AI will automatically reply to comments mentioning the commenter.`;\n\n      if (!window.confirm(confirmMessage)) {\n        return;\n      }\n    }\n\n    setAutoReplyLoading(true);\n    try {\n      console.log('🔄 Toggling auto-reply for Instagram account:', selectedAccount.platform_user_id, selectedAccount.username);\n      console.log('📝 Selected post IDs:', selectedAutoReplyPosts);\n      console.log('🎯 New state will be:', !autoReplyEnabled);\n\n      const response = await apiClient.toggleInstagramAutoReply(\n        selectedAccount.platform_user_id,\n        !autoReplyEnabled,\n        autoReplyTemplate,\n        selectedAutoReplyPosts\n      );\n\n      console.log('📡 Backend response:', response);\n\n      if (response.success) {\n        setAutoReplyEnabled(!autoReplyEnabled);\n\n        const successMessage = !autoReplyEnabled\n          ? isMobile()\n            ? `Auto-reply enabled for ${response.data?.selected_posts_count || selectedAutoReplyPosts.length} post(s)!`\n            : `Auto-reply enabled successfully for ${response.data?.selected_posts_count || selectedAutoReplyPosts.length} post(s)! AI will automatically reply to comments mentioning the commenter.`\n          : 'Auto-reply disabled successfully.';\n\n        setMessage(successMessage);\n\n        console.log('✅ Auto-reply toggled successfully:', {\n          enabled: !autoReplyEnabled,\n          selectedPostsCount: response.data?.selected_posts_count\n        });\n      } else {\n        throw new Error(response.error || 'Failed to toggle auto-reply');\n      }\n    } catch (error) {\n      console.error('❌ Auto-reply toggle error:', error);\n      setMessage('Error toggling auto-reply: ' + (error.message || 'Unknown error'));\n    } finally {\n      setAutoReplyLoading(false);\n    }\n  };\n\n  // Load auto-reply settings when account is selected\n  useEffect(() => {\n    console.log('🔍 DEBUG: Auto-reply useEffect triggered');\n    console.log('🔍 DEBUG: selectedAccount:', selectedAccount);\n    console.log('🔍 DEBUG: activeTab:', activeTab);\n    if (selectedAccount && activeTab === 'auto-reply') {\n      console.log('🔍 DEBUG: Loading auto-reply settings');\n      loadAutoReplySettings();\n    }\n  }, [selectedAccount, activeTab]);\n\n  // Persist auto-reply state on page refresh\n  useEffect(() => {\n    if (selectedAccount && autoReplyEnabled) {\n      // Re-validate auto-reply state with backend\n      const validateAutoReplyState = async () => {\n        try {\n          const rules = await apiClient.getAutomationRules('instagram', 'auto_reply');\n          const socialAccounts = await apiClient.getSocialAccounts();\n          const instagramAccount = socialAccounts.find(acc =>\n            acc.platform === 'instagram' && acc.platform_user_id === selectedAccount.platform_user_id\n          );\n\n          if (instagramAccount) {\n            const existingRule = rules.find(rule =>\n              rule.social_account_id === instagramAccount.id &&\n              rule.rule_type === 'AUTO_REPLY'\n            );\n\n            if (!existingRule || !existingRule.is_active) {\n              setAutoReplyEnabled(false);\n              setSelectedAutoReplyPosts([]);\n            }\n          }\n        } catch (error) {\n          console.error('Error validating auto-reply state:', error);\n        }\n      };\n\n      validateAutoReplyState();\n    }\n  }, [selectedAccount, autoReplyEnabled]);\n\n  // Load user media when account is selected\n  useEffect(() => {\n    if (selectedAccount && activeTab === 'post') {\n      loadUserMedia(selectedAccount.platform_user_id);\n    }\n  }, [selectedAccount, activeTab]);\n\n  // Load DM auto-reply settings when account is selected\n  useEffect(() => {\n    if (selectedAccount && activeTab === 'auto-reply') {\n      loadDmAutoReplySettings();\n    }\n  }, [selectedAccount, activeTab]);\n\n  // Add a useEffect to always load DM auto-reply settings when selectedAccount changes\n  useEffect(() => {\n    if (selectedAccount) {\n      loadDmAutoReplySettings();\n    }\n  }, [selectedAccount]);\n\n  // --- New: Scheduled Posts Grid State ---\n  const [scheduledGridRows, setScheduledGridRows] = useState([]);\n\n  // Show grid if redirected with scheduled posts\n  useEffect(() => {\n    if (location.state && location.state.scheduledGridRows) {\n      setScheduledGridRows(location.state.scheduledGridRows);\n    }\n  }, [location.state]);\n\n  // --- Auto-refresh scheduled posts grid ---\n  useEffect(() => {\n    let intervalId;\n    const fetchScheduledPosts = async () => {\n      try {\n        const posts = await apiClient.getScheduledPosts();\n        setScheduledGridRows(posts.filter(post => post.platform === 'instagram'));\n      } catch (err) { }\n    };\n    fetchScheduledPosts(); // Always fetch on mount\n    intervalId = setInterval(fetchScheduledPosts, 10000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // --- UI Render ---\n  if (authLoading) {\n    return <div className=\"instagram-container\"><div className=\"loading-screen\"><div className=\"loading-spinner\"></div><p>Checking authentication...</p></div></div>;\n  }\n  if (!isAuthenticated) {\n    return (\n      <div className=\"instagram-container\">\n        <div className=\"header-section\">\n          <button onClick={() => navigate('/')} className=\"back-button\">Back to Dashboard</button>\n          <h1 style=\"position: left\">Instagram Management</h1>\n          <p>Please log in to your account to connect and manage Instagram.</p>\n        </div>\n        <div className=\"auth-required\">\n          <div className=\"auth-icon\"></div>\n          <h2>Authentication Required</h2>\n          <p>You need to be logged in to use Instagram features. Please log in first.</p>\n        </div>\n      </div>\n    );\n  }\n  if (!sdkLoaded) {\n    return <div className=\"instagram-container\"><div className=\"loading-screen\"><div className=\"loading-spinner\"></div><p>Loading Instagram SDK...</p></div></div>;\n  }\n\n  return (\n    <div className=\"instagram-container\">\n      <div className=\"header-section\">\n        <button onClick={() => navigate('/')} className=\"back-button\">Back to Dashboard</button>\n        <div className=\"header-content\">\n          <div className=\"header-icon\">\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"5\" ry=\"5\" stroke=\"currentColor\" strokeWidth=\"2\" />\n              <path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\" stroke=\"currentColor\" strokeWidth=\"2\" />\n              <line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\" stroke=\"currentColor\" strokeWidth=\"2\" />\n            </svg>\n          </div>\n          <div className=\"header-text\">\n            <h1>Instagram Management</h1>\n            <p>Connect and manage your Instagram Business accounts</p>\n          </div>\n        </div>\n      </div>\n\n      {/* --- Moved: Global Auto-Reply Section --- */}\n      {isConnected && selectedAccount && (\n        <div className=\"global-auto-reply-section\" style={{\n          display: 'flex', alignItems: 'center', justifyContent: 'space-between',\n          background: '#fff', borderRadius: 12, boxShadow: '0 2px 8px rgba(0,0,0,0.04)',\n          padding: '18px 24px', marginBottom: 18, border: '1px solid #eee',\n          flexWrap: 'wrap', gap: 16\n        }}>\n          <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n            <div style={{ width: 56, height: 56, borderRadius: '50%', overflow: 'hidden', background: '#f3f3f3', border: '1px solid #e0e0e0' }}>\n              {selectedAccount.profile_picture_url ? (\n                <img src={selectedAccount.profile_picture_url} alt={selectedAccount.username} style={{ width: '100%', height: '100%', objectFit: 'cover' }} />\n              ) : (\n                <div style={{ width: '100%', height: '100%', background: '#eee' }} />\n              )}\n            </div>\n            <div>\n              <div style={{ fontWeight: 600, fontSize: 18 }}>@{selectedAccount.username}</div>\n              <div style={{ color: '#888', fontSize: 14 }}>{selectedAccount.name}</div>\n              <div style={{ color: '#666', fontSize: 13, marginTop: 2 }}>\n                <span style={{ marginRight: 12 }}>\n                  <b>{selectedAccount.followers_count}</b> followers\n                </span>\n                <span>\n                  <b>{selectedAccount.media_count}</b> posts\n                </span>\n              </div>\n            </div>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n            <button\n              className=\"auto-reply-toggle-btn\"\n              onClick={handleGlobalAutoReplyToggle}\n              disabled={globalAutoReplyLoading}\n              style={{\n                display: 'flex', alignItems: 'center', gap: 10, fontWeight: 600,\n                background: globalAutoReplyEnabled ? '#38c172' : '#e0e0e0',\n                color: globalAutoReplyEnabled ? '#fff' : '#444',\n                border: 'none', borderRadius: 20, padding: '10px 22px', fontSize: 16,\n                cursor: globalAutoReplyLoading ? 'not-allowed' : 'pointer',\n                boxShadow: globalAutoReplyEnabled ? '0 2px 8px rgba(56,193,114,0.08)' : 'none',\n                transition: 'background 0.2s'\n              }}\n            >\n              <span style={{\n                display: 'inline-block', width: 14, height: 14, borderRadius: '50%',\n                background: globalAutoReplyEnabled ? '#2ecc40' : '#bbb',\n                marginRight: 6, border: globalAutoReplyEnabled ? '2px solid #fff' : '2px solid #ccc',\n                boxShadow: globalAutoReplyEnabled ? '0 0 4px #38c172' : 'none',\n                verticalAlign: 'middle',\n              }} />\n              Auto Comment Reply: {globalAutoReplyEnabled ? 'Enabled' : 'Disabled'}\n              {globalAutoReplyLoading && (\n                <span className=\"loading-spinner\" style={{ marginLeft: 10, width: 18, height: 18, border: '2px solid #fff', borderTop: '2px solid #38c172', borderRadius: '50%', display: 'inline-block', animation: 'spin 1s linear infinite' }} />\n              )}\n            </button>\n\n            {/* --- DM Auto-Reply Toggle Button --- */}\n            <button\n              className=\"auto-reply-toggle-btn\"\n              onClick={handleDmAutoReplyToggle}\n              disabled={dmAutoReplyLoading}\n              style={{\n                display: 'flex', alignItems: 'center', gap: 10, fontWeight: 600,\n                background: dmAutoReplyEnabled ? '#38c172' : '#e0e0e0',\n                color: dmAutoReplyEnabled ? '#fff' : '#444',\n                border: 'none', borderRadius: 20, padding: '10px 22px', fontSize: 16,\n                cursor: dmAutoReplyLoading ? 'not-allowed' : 'pointer',\n                boxShadow: dmAutoReplyEnabled ? '0 2px 8px rgba(56,193,114,0.08)' : 'none',\n                transition: 'background 0.2s'\n              }}\n            >\n              <span style={{\n                display: 'inline-block', width: 14, height: 14, borderRadius: '50%',\n                background: dmAutoReplyEnabled ? '#2ecc40' : '#bbb',\n                marginRight: 6, border: dmAutoReplyEnabled ? '2px solid #fff' : '2px solid #ccc',\n                boxShadow: dmAutoReplyEnabled ? '0 0 4px #38c172' : 'none',\n                verticalAlign: 'middle',\n              }} />\n              Auto DM Reply: {dmAutoReplyEnabled ? 'Enabled' : 'Disabled'}\n              {dmAutoReplyLoading && (\n                <span className=\"loading-spinner\" style={{ marginLeft: 10, width: 18, height: 18, border: '2px solid #fff', borderTop: '2px solid #38c172', borderRadius: '50%', display: 'inline-block', animation: 'spin 1s linear infinite' }} />\n              )}\n            </button>\n\n\n          </div>\n        </div>\n      )}\n      {message && <div className=\"status-message info\"><span className=\"message-text\">{message}</span></div>}\n      <div className=\"main-content\">\n        <div className=\"tab-navigation\">\n          <button className={`tab-button ${activeTab === 'connect' ? 'active' : ''}`} onClick={() => setActiveTab('connect')}>\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n              <circle cx=\"9\" cy=\"7\" r=\"4\" />\n              <path d=\"M22 21v-2a4 4 0 0 0-3-3.87\" />\n              <path d=\"M16 3.13a4 4 0 0 1 0 7.75\" />\n            </svg>\n            Connect Account\n          </button>\n          <button className={`tab-button ${activeTab === 'post' ? 'active' : ''}`} onClick={() => setActiveTab('post')} disabled={!isConnected}>\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <path d=\"M12 20h9\" />\n              <path d=\"M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4 12.5-12.5z\" />\n            </svg>\n            Create Post\n          </button>\n          <button className={`tab-button ${activeTab === 'media' ? 'active' : ''}`} onClick={() => setActiveTab('media')} disabled={!isConnected || !selectedAccount}>\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n              <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\n              <polyline points=\"21,15 16,10 5,21\" />\n            </svg>\n            Media Gallery\n          </button>\n          <button\n            className={`tab-button ${activeTab === 'bulk-composer' ? 'active' : ''}`}\n            onClick={() => setActiveTab('bulk-composer')}\n            disabled={!isConnected || !selectedAccount}\n          >\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <rect x=\"3\" y=\"3\" width=\"7\" height=\"7\" />\n              <rect x=\"14\" y=\"3\" width=\"7\" height=\"7\" />\n              <rect x=\"14\" y=\"14\" width=\"7\" height=\"7\" />\n              <rect x=\"3\" y=\"14\" width=\"7\" height=\"7\" />\n            </svg>\n            Bulk Composer\n          </button>\n          <button className={`tab-button ${activeTab === 'scheduled-posts' ? 'active' : ''}`} onClick={() => setActiveTab('scheduled-posts')} disabled={!isConnected || !selectedAccount}>\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\n              <polyline points=\"12,6 12,12 16,14\" />\n            </svg>\n            Scheduled Posts\n          </button>\n        </div>\n        <div className=\"tab-content\">\n          {activeTab === 'connect' && (\n            <div className=\"connect-section\">\n              {!isConnected ? (\n                <div className=\"connection-card\">\n                  <div className=\"connection-icon\"></div>\n                  <h2>Connect Instagram Account</h2>\n                  <p>Connect your Instagram Business account through Facebook to start posting and managing content.</p>\n                  <button onClick={handleFacebookLogin} disabled={loading} className=\"connect-main-button\">{loading ? 'Connecting...' : 'Connect via Facebook'}</button>\n                  <div className=\"requirements-card\">\n                    <h3>Requirements</h3>\n                    <ul>\n                      <li>Instagram Business or Creator account</li>\n                      <li>Connected to a Facebook Page</li>\n                      <li>Admin access to the Facebook Page</li>\n                    </ul>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"connected-accounts\">\n                  <div className=\"accounts-header\">\n                    <h2>Connected Instagram Accounts</h2>\n                    <button onClick={handleLogout} className=\"logout-button\">Disconnect</button>\n                  </div>\n                  <div className=\"accounts-grid\">\n                    {instagramAccounts.map(account => (\n                      <div key={account.id} className={`account-card ${selectedAccount.id === account.id ? 'selected' : ''}`} onClick={() => setSelectedAccount(account)}>\n                        <div className=\"account-avatar\">{account.profile_picture_url ? <img src={account.profile_picture_url} alt={account.username} /> : <div className=\"avatar-placeholder\"></div>}</div>\n                        <div className=\"account-info\">\n                          <h3>@{account.username}</h3>\n                          <p>{account.name}</p>\n                          <div className=\"account-stats\"><span>{account.followers_count} followers</span><span>{account.media_count} posts</span></div>\n                        </div>\n                        {selectedAccount.id === account.id && <div className=\"selected-indicator\"></div>}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          {activeTab === 'post' && selectedAccount && (\n            <div className=\"post-section\">\n              <div className=\"post-type-toggle\">\n                <button className={postType === 'photo' ? 'active' : ''} onClick={() => setPostType('photo')}>\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n                    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\n                    <polyline points=\"21,15 16,10 5,21\" />\n                  </svg>\n                  Photo\n                </button>\n                <button className={postType === 'carousel' ? 'active' : ''} onClick={() => setPostType('carousel')}>\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\" />\n                    <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\" />\n                    <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\" />\n                  </svg>\n                  Carousel\n                </button>\n                <button className={postType === 'reel' ? 'active' : ''} onClick={() => setPostType('reel')}>\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <polygon points=\"23 7 16 12 23 17 23 7\" />\n                    <rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\" />\n                  </svg>\n                  Reel\n                </button>\n              </div>\n              {/* Photo Post */}\n              {postType === 'photo' && (\n                <div className=\"post-card\">\n                  <div className=\"form-group\">\n                    <label>Image Source</label>\n                    <div className=\"image-source-toggle\">\n                      <button className={imageSource === 'ai' ? 'active' : ''} onClick={() => setImageSource('ai')}>AI</button>\n                      <button className={imageSource === 'upload' ? 'active' : ''} onClick={() => setImageSource('upload')}>Upload</button>\n                    </div>\n                  </div>\n                  {imageSource === 'ai' && (\n                    <div className=\"form-group\">\n                      <label>AI Prompt</label>\n                      <textarea\n                        value={aiPrompt}\n                        onChange={e => {\n                          setAiPrompt(e.target.value);\n                          // Clear generated content when prompt changes\n                          if (aiImageUrl) {\n                            setAiImageUrl('');\n                          }\n                          if (caption && !caption.trim().includes('Check out this amazing image!')) {\n                            setCaption('');\n                          }\n                        }}\n                        placeholder=\"Describe your image...\"\n                        rows={3}\n                        className=\"post-textarea\"\n                      />\n                      <div className=\"ai-buttons\">\n                        <button className=\"ai-generate-button\" onClick={handleGenerateAIImage} disabled={aiGenerating || !aiPrompt.trim() || rateLimitCooldown > 0}>\n                          {aiGenerating ? (\n                            <>\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"spinning\">\n                                <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\n                              </svg>\n                              Generating...\n                            </>\n                          ) : (\n                            <>\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\n                              </svg>\n                              Generate Image\n                            </>\n                          )}\n                        </button>\n                        <button className=\"ai-generate-button secondary\" onClick={handleGenerateImageAndCaption} disabled={aiGenerating || generatingCaption || !aiPrompt.trim() || rateLimitCooldown > 0}>\n                          {aiGenerating || generatingCaption ? (\n                            <>\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"spinning\">\n                                <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\n                              </svg>\n                              Generating...\n                            </>\n                          ) : (\n                            <>\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\n                              </svg>\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\" />\n                                <polyline points=\"14,2 14,8 20,8\" />\n                                <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\" />\n                                <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\" />\n                              </svg>\n                              Generate Image & Caption\n                            </>\n                          )}\n                        </button>\n                        {message && message.includes('Error') && aiPrompt.trim() && (\n                          <button className=\"ai-generate-button retry\" onClick={handleRetryImageGeneration} disabled={aiGenerating || rateLimitCooldown > 0}>\n                            {aiGenerating ? 'Retrying...' : 'Retry Generation'}\n                          </button>\n                        )}\n                      </div>\n                      {rateLimitCooldown > 0 && (\n                        <div style={{ color: '#e53e3e', marginTop: 8, fontWeight: 500 }}>\n                          Too many requests. Please wait {Math.floor(rateLimitCooldown / 60)}:{(rateLimitCooldown % 60).toString().padStart(2, '0')} before trying again.\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  {imageSource === 'upload' && (\n                    <div className=\"form-group image-upload\">\n                      <label>Select Image</label>\n                      <button\n                        type=\"button\"\n                        onClick={() => openFilePicker('photo', 'manual')}\n                        className=\"file-picker-button\"\n                        disabled={uploadingImage}\n                      >\n                        {uploadingImage ? (\n                          <>\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"spinning\">\n                              <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\n                            </svg>\n                            Uploading...\n                          </>\n                        ) : (\n                          <>\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                              <polyline points=\"7,10 12,15 17,10\" />\n                              <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\n                            </svg>\n                            Choose Image\n                          </>\n                        )}\n                      </button>\n                      {uploadedImageUrl && (\n                        <div className=\"image-preview\">\n                          <img src={uploadedImageUrl} alt=\"Preview\" className=\"preview-image\" />\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"form-group\">\n                    <label>Caption</label>\n                    <div className=\"caption-section\">\n                      <div className=\"caption-toggle\">\n                        <label className=\"toggle-label\">\n                          <input\n                            type=\"checkbox\"\n                            checked={autoGenerateCaption}\n                            onChange={e => setAutoGenerateCaption(e.target.checked)}\n                          />\n                          <span className=\"toggle-text\">Auto Generate Caption</span>\n                        </label>\n                      </div>\n                      {autoGenerateCaption ? (\n                        <div className=\"caption-prompt-section\">\n                          <textarea\n                            value={captionPrompt}\n                            onChange={e => setCaptionPrompt(e.target.value)}\n                            placeholder=\"Describe what you want in the caption...\"\n                            rows={2}\n                            className=\"caption-prompt-textarea\"\n                          />\n                          <button\n                            onClick={handleAutoGenerateCaption}\n                            disabled={generatingCaption || !captionPrompt.trim()}\n                            className=\"generate-caption-button\"\n                          >\n                            {generatingCaption ? (\n                              <>\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"spinning\">\n                                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\n                                </svg>\n                                Generating...\n                              </>\n                            ) : (\n                              <>\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\" />\n                                  <polyline points=\"14,2 14,8 20,8\" />\n                                  <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\" />\n                                  <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\" />\n                                </svg>\n                                Generate Caption\n                              </>\n                            )}\n                          </button>\n                        </div>\n                      ) : null}\n                      <textarea\n                        value={caption}\n                        onChange={e => setCaption(e.target.value)}\n                        placeholder={autoGenerateCaption && !caption ? \"Caption will be generated...\" : \"Write your caption...\"}\n                        rows={3}\n                        className=\"post-textarea\"\n                        disabled={autoGenerateCaption && !caption}\n                      />\n                    </div>\n                  </div>\n                  {(aiImageUrl || uploadedImageUrl) && <div className=\"generated-image\"><img src={aiImageUrl || uploadedImageUrl} alt=\"Preview\" /></div>}\n                  <button className=\"publish-button\" onClick={handlePublish} disabled={loading || !(aiImageUrl || uploadedImageUrl) || (!caption.trim() && !autoGenerateCaption)}>{loading ? 'Publishing...' : 'Publish Post'}</button>\n                </div>\n              )}\n              {/* Carousel Post */}\n              {postType === 'carousel' && (\n                <div className=\"post-card\">\n                  <div className=\"form-group\">\n                    <label>Carousel Mode</label>\n                    <div className=\"image-source-toggle\">\n                      <button\n                        className={imageSource === 'ai' ? 'active' : ''}\n                        onClick={() => setImageSource('ai')}\n                        disabled={carouselGenerating}\n                      >\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\n                        </svg>\n                        AI Generation\n                      </button>\n                      <button\n                        className={imageSource === 'upload' ? 'active' : ''}\n                        onClick={() => setImageSource('upload')}\n                        disabled={carouselGenerating}\n                      >\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                          <polyline points=\"7,10 12,15 17,10\" />\n                          <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\n                        </svg>\n                        Manual Upload\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Image Count Selector */}\n                  <div className=\"form-group\">\n                    <label>Number of Images: {carouselCount}</label>\n                    <input\n                      type=\"range\"\n                      min=\"3\"\n                      max=\"7\"\n                      value={carouselCount}\n                      onChange={(e) => setCarouselCount(parseInt(e.target.value))}\n                      className=\"slider\"\n                      disabled={carouselGenerating}\n                    />\n                    <div className=\"slider-labels\">\n                      <span>3</span>\n                      <span>4</span>\n                      <span>5</span>\n                      <span>6</span>\n                      <span>7</span>\n                    </div>\n                  </div>\n\n                  {/* AI Generation Mode */}\n                  {imageSource === 'ai' && (\n                    <div className=\"form-group\">\n                      <label>AI Prompt for Carousel</label>\n                      <textarea\n                        value={aiPrompt}\n                        onChange={(e) => setAiPrompt(e.target.value)}\n                        placeholder=\"Describe the carousel content you want to generate...\"\n                        rows=\"3\"\n                        className=\"post-textarea\"\n                        disabled={carouselGenerating}\n                      />\n                      <div className=\"ai-generation-note\">\n                        <small>\n                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" style={{ marginRight: '4px', verticalAlign: 'middle' }}>\n                            <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                            <path d=\"M12 16v-4\" />\n                            <path d=\"M12 8h.01\" />\n                          </svg>\n                          Tip: Carousel generation takes 3-5 minutes for {carouselCount} images. Please be patient!\n                        </small>\n                      </div>\n                      <button\n                        className=\"generate-button\"\n                        onClick={async () => {\n                          if (!aiPrompt.trim()) {\n                            setMessage('Please enter a prompt for carousel generation.');\n                            return;\n                          }\n                          setCarouselGenerating(true);\n                          setMessage(`Generating ${carouselCount} carousel images with AI... This may take 3-5 minutes.`);\n                          try {\n                            const response = await apiClient.generateInstagramCarousel(aiPrompt.trim(), carouselCount);\n                            if (response && response.success && response.image_urls) {\n                              setCarouselImages(response.image_urls);\n                              setCarouselCaption(response.caption || '');\n                              setMessage(`AI carousel generated successfully with ${response.image_urls.length} images!`);\n                            } else {\n                              setMessage(response.error || 'Failed to generate carousel images.');\n                            }\n                          } catch (error) {\n                            console.error('Carousel generation error:', error);\n                            if (error.message && error.message.includes('timeout')) {\n                              setMessage('Carousel generation timed out. This can happen with complex prompts or when generating many images. Please try again with a simpler prompt or fewer images.');\n                            } else {\n                              setMessage('Error generating carousel: ' + (error.message || error.toString()));\n                            }\n                          } finally {\n                            setCarouselGenerating(false);\n                          }\n                        }}\n                        disabled={carouselGenerating || !aiPrompt.trim()}\n                      >\n                        {carouselGenerating ? (\n                          <>\n                            <div className=\"button-spinner\"></div>\n                            Generating {carouselCount} Images...\n                          </>\n                        ) : (\n                          <>\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                              <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\n                            </svg>\n                            Generate Carousel\n                          </>\n                        )}\n                      </button>\n                    </div>\n                  )}\n\n                  {/* Manual Upload Mode */}\n                  {imageSource === 'upload' && (\n                    <div className=\"form-group\">\n                      <label>Upload Images (JPG/PNG)</label>\n                      <button\n                        type=\"button\"\n                        onClick={() => openFilePicker('photo', 'carousel')}\n                        className=\"file-picker-button\"\n                        disabled={carouselGenerating}\n                      >\n                        {carouselGenerating ? (\n                          <>\n                            <div className=\"button-spinner\"></div>\n                            Uploading...\n                          </>\n                        ) : (\n                          <>\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                              <polyline points=\"7,10 12,15 17,10\" />\n                              <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\n                            </svg>\n                            Select {carouselCount} Images\n                          </>\n                        )}\n                      </button>\n                      <p className=\"file-upload-hint\">\n                        Select {carouselCount} images for your carousel\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Caption Generation */}\n                  <div className=\"form-group\">\n                    <label>Caption</label>\n                    <div className=\"caption-section\">\n                      <div className=\"caption-toggle\">\n                        <label className=\"toggle-label\">\n                          <input\n                            type=\"checkbox\"\n                            checked={autoGenerateCaption}\n                            onChange={e => setAutoGenerateCaption(e.target.checked)}\n                          />\n                          <span className=\"toggle-text\">Auto Generate Caption</span>\n                        </label>\n                      </div>\n                      {autoGenerateCaption ? (\n                        <div className=\"caption-prompt-section\">\n                          <textarea\n                            value={captionPrompt}\n                            onChange={e => setCaptionPrompt(e.target.value)}\n                            placeholder=\"Describe what you want in the caption...\"\n                            rows={2}\n                            className=\"caption-prompt-textarea\"\n                          />\n                          <button\n                            onClick={handleCarouselAutoGenerateCaption}\n                            disabled={generatingCaption || !captionPrompt.trim()}\n                            className=\"generate-caption-button\"\n                          >\n                            {generatingCaption ? 'Generating...' : 'Generate Caption'}\n                          </button>\n                        </div>\n                      ) : null}\n                      <textarea\n                        value={carouselCaption}\n                        onChange={e => setCarouselCaption(e.target.value)}\n                        placeholder={autoGenerateCaption && !carouselCaption ? \"Caption will be generated...\" : \"Write your caption...\"}\n                        rows={3}\n                        className=\"post-textarea\"\n                        disabled={autoGenerateCaption && !carouselCaption}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Carousel Preview */}\n                  {carouselImages.length > 0 && (\n                    <div className=\"carousel-preview-section\">\n                      <h4>Carousel Preview <span className=\"drag-hint\">(Drag to reorder)</span></h4>\n                      <div className=\"carousel-preview-grid\">\n                        {carouselImages.slice(0, carouselCount).map((url, index) => (\n                          <div\n                            key={index}\n                            className={`carousel-preview-item ${draggedIndex === index ? 'dragging' : ''}`}\n                            draggable\n                            onDragStart={(e) => handleDragStart(e, index)}\n                            onDragOver={handleDragOver}\n                            onDrop={(e) => handleDrop(e, index)}\n                            onDragEnd={handleDragEnd}\n                          >\n                            <img src={url} alt={`Carousel item ${index + 1}`} />\n                            <span className=\"carousel-item-number\">{index + 1}</span>\n                            <div className=\"drag-handle\">\n                              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                                <circle cx=\"9\" cy=\"12\" r=\"1\" />\n                                <circle cx=\"9\" cy=\"5\" r=\"1\" />\n                                <circle cx=\"9\" cy=\"19\" r=\"1\" />\n                                <circle cx=\"15\" cy=\"12\" r=\"1\" />\n                                <circle cx=\"15\" cy=\"5\" r=\"1\" />\n                                <circle cx=\"15\" cy=\"19\" r=\"1\" />\n                              </svg>\n                            </div>\n                            {carouselImages.length > 3 && (\n                              <button\n                                className=\"remove-image-btn\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  removeCarouselImage(index);\n                                }}\n                                title=\"Remove image\"\n                              >\n                                <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                                </svg>\n                              </button>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <button\n                    className=\"publish-button\"\n                    onClick={async () => {\n                      if (!selectedAccount) {\n                        setMessage('Please select an Instagram account first.');\n                        return;\n                      }\n                      if (carouselImages.length < 3) {\n                        setMessage('Please add at least 3 images for carousel.');\n                        return;\n                      }\n                      if (!carouselCaption.trim() && !autoGenerateCaption) {\n                        setMessage('Please write a caption or enable auto-generate caption.');\n                        return;\n                      }\n                      if (autoGenerateCaption && !captionPrompt.trim()) {\n                        setMessage('Please provide a prompt for auto-generating caption.');\n                        return;\n                      }\n\n                      setLoading(true);\n                      setMessage('Publishing carousel post...');\n                      try {\n                        // No redirect/navigation after publish, just reset form and show message\n                        const finalCaption = autoGenerateCaption && captionPrompt.trim() ?\n                          await (async () => {\n                            const res = await apiClient.generateInstagramCaption(captionPrompt.trim());\n                            return res.content || carouselCaption || 'Check out this amazing carousel!';\n                          })() : carouselCaption;\n\n                        const response = await apiClient.postInstagramCarousel(\n                          selectedAccount.platform_user_id,\n                          finalCaption,\n                          carouselImages.slice(0, carouselCount)\n                        );\n\n                        if (response.success) {\n                          setMessage('Carousel post published successfully!');\n                          setCarouselImages([]);\n                          setCarouselCaption('');\n                          setCaptionPrompt('');\n                          setAutoGenerateCaption(false);\n                          setAiPrompt('');\n                          loadUserMedia(selectedAccount.platform_user_id);\n                          // Do NOT navigate to ScheduledPostHistory or change tab\n                        } else {\n                          setMessage('Failed to publish carousel: ' + (response.error || 'Unknown error'));\n                        }\n                      } catch (err) {\n                        setMessage('Error publishing carousel: ' + (err.message || err.toString()));\n                      } finally {\n                        setLoading(false);\n                      }\n                    }}\n                    disabled={loading || carouselImages.length < 3 || (!carouselCaption.trim() && !autoGenerateCaption)}\n                  >\n                    {loading ? 'Publishing...' : 'Publish Carousel'}\n                  </button>\n                </div>\n              )}\n              {/* Reel Post */}\n              {postType === 'reel' && (\n                <div className=\"post-card\">\n                  <div className=\"form-group\">\n                    <label>Upload Reel Video (.mp4, .mov)</label>\n                    <div className=\"file-input-wrapper\">\n                      <input\n                        type=\"file\"\n                        accept=\"video/mp4,video/quicktime,.mp4,.mov\"\n                        onChange={handleReelFileChange}\n                        disabled={reelUploading}\n                        id=\"reel-video-input\"\n                        style={{ display: 'none' }}\n                      />\n                      <label\n                        htmlFor=\"reel-video-input\"\n                        className=\"file-picker-button\"\n                        style={{ opacity: reelUploading ? 0.6 : 1, cursor: reelUploading ? 'not-allowed' : 'pointer' }}\n                      >\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                          <polyline points=\"7,10 12,15 17,10\" />\n                          <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\n                        </svg>\n                        {reelUploading ? 'Uploading...' : 'Choose Video File'}\n                      </label>\n                    </div>\n                    {reelUrl && (\n                      <div className=\"video-preview\">\n                        <video src={reelUrl} controls style={{ width: '100%', maxHeight: '300px' }} />\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label>Upload Reel Thumbnail (optional):</label>\n                    <div className=\"file-input-wrapper\">\n                      <input\n                        type=\"file\"\n                        accept=\"image/png,image/jpeg,image/jpg\"\n                        onChange={handleReelThumbnailChange}\n                        disabled={!reelUrl}\n                        id=\"reel-thumbnail-input\"\n                        style={{ display: 'none' }}\n                      />\n                      <label\n                        htmlFor=\"reel-thumbnail-input\"\n                        className=\"file-picker-button\"\n                        style={{ opacity: !reelUrl ? 0.6 : 1, cursor: !reelUrl ? 'not-allowed' : 'pointer' }}\n                      >\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n                          <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\n                          <polyline points=\"21,15 16,10 5,21\" />\n                        </svg>\n                        Choose Thumbnail\n                      </label>\n                    </div>\n                    {reelThumbnailUrl && (\n                      <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginTop: 8 }}>\n                        <img\n                          src={reelThumbnailUrl}\n                          alt=\"Reel Thumbnail Preview\"\n                          style={{ maxWidth: 120, borderRadius: 8, border: '1px solid #eee' }}\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            setReelThumbnailUrl('');\n                            setReelThumbnailFilename('');\n                            setReelThumbnailFile(null);\n                          }}\n                          style={{\n                            background: 'transparent',\n                            border: '1px solid #e53e3e',\n                            cursor: 'pointer',\n                            color: '#e53e3e',\n                            fontSize: 18,\n                            borderRadius: '4px',\n                            width: '28px',\n                            height: '28px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center'\n                          }}\n                          title=\"Remove thumbnail\"\n                        >\n                          &times;\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Caption</label>\n                    <div className=\"caption-section\">\n                      <div className=\"caption-toggle\">\n                        <label className=\"toggle-label\">\n                          <input\n                            type=\"checkbox\"\n                            checked={reelAutoGenerateCaption}\n                            onChange={e => setReelAutoGenerateCaption(e.target.checked)}\n                          />\n                          <span className=\"toggle-text\">Auto Generate Caption</span>\n                        </label>\n                      </div>\n                      {reelAutoGenerateCaption ? (\n                        <div className=\"caption-prompt-section\">\n                          <textarea\n                            value={reelCaptionPrompt}\n                            onChange={e => setReelCaptionPrompt(e.target.value)}\n                            placeholder=\"Describe what you want in the caption...\"\n                            rows={2}\n                            className=\"caption-prompt-textarea\"\n                          />\n                          <button\n                            onClick={handleReelAutoGenerateCaption}\n                            disabled={generatingReelCaption || !reelCaptionPrompt.trim()}\n                            className=\"generate-caption-button\"\n                          >\n                            {generatingReelCaption ? 'Generating...' : 'Generate Caption'}\n                          </button>\n                        </div>\n                      ) : null}\n                      <textarea\n                        value={reelCaption}\n                        onChange={e => setReelCaption(e.target.value)}\n                        placeholder={reelAutoGenerateCaption && !reelCaption ? \"Caption will be generated...\" : \"Write your caption...\"}\n                        rows={3}\n                        className=\"post-textarea\"\n                        disabled={reelAutoGenerateCaption && !reelCaption}\n                      />\n                    </div>\n                  </div>\n                  <button className=\"publish-button\" onClick={handlePublish} disabled={loading || !reelUrl || (!reelCaption.trim() && !reelAutoGenerateCaption)}>{loading ? 'Publishing...' : 'Publish Reel'}</button>\n                </div>\n              )}\n            </div>\n          )}\n          {activeTab === 'media' && selectedAccount && (\n            <div className=\"media-section\">\n              <div className=\"media-header\"><h2>Recent Posts</h2><p>Your latest Instagram content</p></div>\n              {loadingMedia ? <div className=\"loading-media\"><div className=\"loading-spinner\"></div><p>Loading media...</p></div> : userMedia.length > 0 ? <div className=\"media-grid\">{userMedia.slice(0, 12).map((media) => <div key={media.id} className=\"media-item\"><div className=\"media-content\">{media.media_type === 'IMAGE' ? <img src={media.media_url} alt=\"Instagram post\" /> : media.media_type === 'VIDEO' ? <video controls><source src={media.media_url} type=\"video/mp4\" /></video> : null}</div><div className=\"media-overlay\"><div className=\"media-info\"><p className=\"media-caption\">{media.caption ? media.caption.substring(0, 100) + '...' : 'No caption'}</p><p className=\"media-date\">{new Date(media.timestamp).toLocaleDateString()}</p></div></div></div>)}</div> : <div className=\"no-media\"><h3>No Media Found</h3><p>No media found for this account. Start creating posts to see them here!</p></div>}\n            </div>\n          )}\n          {activeTab === 'bulk-composer' && selectedAccount && (\n            <IgBulkComposer selectedAccount={selectedAccount} onClose={() => { }} />\n          )}\n          {activeTab === 'scheduled-posts' && (\n            <ScheduledPostHistory />\n          )}\n        </div>\n      </div>\n\n      {/* Google Drive Modal */}\n      {showDriveModal && (\n        <div className=\"modal-overlay\" onClick={() => setShowDriveModal(false)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h3>Select from Google Drive</h3>\n              <button onClick={() => setShowDriveModal(false)} className=\"modal-close\">&times;</button>\n            </div>\n            <div className=\"modal-body\">\n              {!driveAuthenticated ? (\n                <div className=\"drive-auth\">\n                  <p>Connect to Google Drive to select files</p>\n                  <button onClick={authenticateGoogleDrive} disabled={driveAuthLoading} className=\"auth-button\">\n                    {driveAuthLoading ? 'Connecting...' : 'Connect Google Drive'}\n                  </button>\n                </div>\n              ) : (\n                <div className=\"drive-files\">\n                  {loadingDriveFiles ? (\n                    <div className=\"loading-files\">\n                      <div className=\"loading-spinner\"></div>\n                      <p>Loading files...</p>\n                    </div>\n                  ) : driveFiles.length > 0 ? (\n                    <div className=\"files-grid\">\n                      {driveFiles.map((file) => (\n                        <div key={file.id} className=\"file-item\" onClick={() => handleDriveFileSelect(file.id, file.name)}>\n                          {file.thumbnailLink ? (\n                            <img src={file.thumbnailLink} alt={file.name} className=\"file-thumbnail\" />\n                          ) : (\n                            <div className=\"file-icon\"></div>\n                          )}\n                          <div className=\"file-info\">\n                            <p className=\"file-name\">{file.name}</p>\n                            <p className=\"file-size\">{file.size ? `${Math.round(file.size / 1024)} KB` : 'Unknown size'}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"no-files\">\n                      <p>No image files found in Google Drive</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* File Picker Modal */}\n      {showFilePicker && (\n        <div className=\"modal-overlay\" onClick={closeFilePicker}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h3>Select {filePickerType === 'photo' ? 'Photo' : 'Video'}</h3>\n              <button onClick={closeFilePicker} className=\"modal-close\">\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                </svg>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <div className=\"file-picker-options\">\n                <div\n                  className=\"file-option\"\n                  onClick={() => document.getElementById('local-file-input').click()}\n                  onTouchStart={(e) => e.preventDefault()}\n                >\n                  <div className=\"file-option-icon\">\n                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                      <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                      <polyline points=\"7,10 12,15 17,10\" />\n                      <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\n                    </svg>\n                  </div>\n                  <div className=\"file-option-content\">\n                    <h4>From Device</h4>\n                    <p>Select a file from your computer</p>\n                  </div>\n                </div>\n\n                <div\n                  className={`file-option ${!googleDriveAvailable ? 'disabled' : ''}`}\n                  onClick={handleGoogleDriveSelect}\n                  onTouchStart={(e) => {\n                    if (!googleDriveAvailable) {\n                      e.preventDefault();\n                      return;\n                    }\n                    e.preventDefault();\n                    handleGoogleDriveSelect();\n                  }}\n                >\n                  <div className=\"file-option-icon\">\n                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                      <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\" />\n                    </svg>\n                  </div>\n                  <div className=\"file-option-content\">\n                    <h4>From Google Drive</h4>\n                    <p>\n                      {googleDriveAvailable\n                        ? 'Select a file from your Google Drive'\n                        : 'Google Drive not configured. See setup guide.'\n                      }\n                    </p>\n                    {isLoadingGoogleDrive && (\n                      <div className=\"loading-indicator\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\n                        </svg>\n                        Loading...\n                      </div>\n                    )}\n                    {!googleDriveAvailable && (\n                      <div className=\"unavailable-indicator\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                          <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n                          <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n                        </svg>\n                        Not Available\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Hidden file input for local file selection */}\n              <input\n                id=\"local-file-input\"\n                type=\"file\"\n                accept={filePickerType === 'photo' ? 'image/*' : 'video/*'}\n                multiple={filePickerFormType === 'carousel'}\n                onChange={handleLocalFileSelect}\n                style={{ display: 'none' }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {globalAutoReplyEnabled && globalAutoReplyProgress && (\n        <div className=\"auto-reply-progress\" style={{ margin: '16px 0', padding: '12px', background: '#f5f5f5', borderRadius: '8px' }}>\n          <p><strong>Auto-Reply Progress:</strong> {globalAutoReplyProgress.status}</p>\n          {globalAutoReplyProgress.status === 'processing' && (\n            <p>Processing post {globalAutoReplyProgress.current_post} of {globalAutoReplyProgress.total_posts}, comment {globalAutoReplyProgress.current_comment} of {globalAutoReplyProgress.total_comments}</p>\n          )}\n          {globalAutoReplyProgress.status === 'done' && <p>All comments processed!</p>}\n          {globalAutoReplyProgress.details && <p>{globalAutoReplyProgress.details}</p>}\n        </div>\n      )}\n      {apiError && (\n        <div className=\"api-error\" style={{ color: 'red', margin: '12px 0' }}>\n          <p>Error: {apiError}</p>\n          <button onClick={() => { setApiError(null); setRetrying(true); setTimeout(() => { setRetrying(false); window.location.reload(); }, 500); }}>Retry</button>\n          {retrying && <span>Retrying...</span>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InstagramPage; ","// Facebook utility functions extracted from FacebookPage.js\r\n\r\n// Convert file to base64\r\nexport const fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\n// Media icon component with Apple-inspired design\r\nexport const MediaIcon = ({ type }) => {\r\n  switch(type) {\r\n    case 'photo':\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n          <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/>\r\n          <polyline points=\"21,15 16,10 5,21\"/>\r\n        </svg>\r\n      );\r\n    case 'ai_image':\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n          <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n          <path d=\"M12 1v6m0 6v6m11-7h-6m-6 0H1\"/>\r\n        </svg>\r\n      );\r\n    case 'video':\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <polygon points=\"23 7 16 12 23 17 23 7\"/>\r\n          <rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"/>\r\n        </svg>\r\n      );\r\n    default:\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\r\n        </svg>\r\n      );\r\n  }\r\n};\r\n\r\n// Facebook SDK utilities\r\nexport const cleanupFacebookSDK = () => {\r\n  try {\r\n    if (window.FB) {\r\n      try {\r\n        if (window.FB.getLoginStatus) {\r\n          window.FB.logout();\r\n        }\r\n      } catch (e) {\r\n        // Ignore errors during cleanup\r\n      }\r\n      delete window.FB;\r\n    }\r\n    \r\n    if (window.fbAsyncInit) {\r\n      delete window.fbAsyncInit;\r\n    }\r\n  } catch (e) {\r\n    // Ignore cleanup errors\r\n  }\r\n};\r\n\r\nexport const loadFacebookSDK = (FACEBOOK_APP_ID) => {\r\n  return new Promise((resolve, reject) => {\r\n    cleanupFacebookSDK();\r\n    \r\n    const versions = ['v21.0', 'v20.0', 'v19.0', 'v18.0'];\r\n    let currentVersionIndex = 0;\r\n    \r\n    const tryInitialization = () => {\r\n      const version = versions[currentVersionIndex];\r\n      \r\n      window.fbAsyncInit = function () {\r\n        try {\r\n          window.FB.init({\r\n            appId: FACEBOOK_APP_ID,\r\n            cookie: true,\r\n            xfbml: true,\r\n            version: version,\r\n            status: true\r\n          });\r\n          \r\n          console.log(`Facebook SDK initialized successfully with ${version}`);\r\n          \r\n          window.FB.getLoginStatus(function(response) {\r\n            console.log('Facebook SDK test successful:', response.status);\r\n            resolve();\r\n          }, true);\r\n          \r\n        } catch (error) {\r\n          console.error(`Facebook SDK initialization failed with ${version}:`, error);\r\n          \r\n          currentVersionIndex++;\r\n          if (currentVersionIndex < versions.length) {\r\n            console.log(`Trying Facebook SDK version ${versions[currentVersionIndex]}...`);\r\n            setTimeout(tryInitialization, 500);\r\n          } else {\r\n            reject(new Error('All Facebook SDK versions failed to initialize'));\r\n          }\r\n        }\r\n      };\r\n\r\n      if (!document.getElementById('facebook-jssdk')) {\r\n        const script = document.createElement('script');\r\n        script.id = 'facebook-jssdk';\r\n        script.src = 'https://connect.facebook.net/en_US/sdk.js';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.crossOrigin = 'anonymous';\r\n        script.onerror = () => {\r\n          console.error(`Failed to load Facebook SDK script for ${version}`);\r\n          \r\n          currentVersionIndex++;\r\n          if (currentVersionIndex < versions.length) {\r\n            console.log(`Trying Facebook SDK version ${versions[currentVersionIndex]}...`);\r\n            setTimeout(tryInitialization, 500);\r\n          } else {\r\n            reject(new Error('Failed to load Facebook SDK script'));\r\n          }\r\n        };\r\n        \r\n        document.body.appendChild(script);\r\n      }\r\n    };\r\n\r\n    tryInitialization();\r\n  });\r\n};\r\n\r\n// Post utilities\r\nexport const postTextOnly = async (selectedPage, message) => {\r\n  return new Promise((resolve, reject) => {\r\n    window.FB.api(`/${selectedPage.id}/feed`, 'POST', {\r\n      message: message,\r\n      access_token: selectedPage.access_token\r\n    }, (response) => {\r\n      if (response.error) {\r\n        reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n      } else {\r\n        resolve(response);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const postWithMedia = async (selectedPage, message, file, mediaType) => {\r\n  const fileData = await fileToBase64(file);\r\n  \r\n  if (mediaType === 'photo') {\r\n    return new Promise((resolve, reject) => {\r\n      window.FB.api(`/${selectedPage.id}/photos`, 'POST', {\r\n        caption: message,\r\n        source: fileData,\r\n        access_token: selectedPage.access_token\r\n      }, (response) => {\r\n        if (response.error) {\r\n          reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  } else if (mediaType === 'video') {\r\n    return new Promise((resolve, reject) => {\r\n      window.FB.api(`/${selectedPage.id}/videos`, 'POST', {\r\n        description: message,\r\n        source: fileData,\r\n        access_token: selectedPage.access_token\r\n      }, (response) => {\r\n        if (response.error) {\r\n          reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}; "],"names":["_ref","_mediaPreviewModal$me","_mediaPreviewModal$me2","selectedAccount","onClose","addNotification","useNotifications","strategyData","setStrategyData","useState","promptTemplate","customStrategyTemplate","brandName","hookIdea","features","location","phone","website","callToAction","imagePrompt","startDate","endDate","frequency","customCron","timeSlot","composerRows","setComposerRows","selectedRows","setSelectedRows","dragStartRow","setDragStartRow","postType","setPostType","carouselImageCount","setCarouselImageCount","currentMonth","setCurrentMonth","Date","isScheduling","setIsScheduling","scheduleProgress","setScheduleProgress","expandedCaption","setExpandedCaption","mediaPreviewModal","setMediaPreviewModal","carouselReorderModal","setCarouselReorderModal","thumbnailPreviewModal","setThumbnailPreviewModal","setScheduledGridRows","navigate","useNavigate","promptTemplates","id","name","prompt","gridRef","useRef","carouselInputRefs","useEffect","generateInitialRows","startDateParts","split","parseInt","endDateParts","rows","currentDate","dayCount","rowCount","now","shouldInclude","getDay","getDate","formattedDate","getFullYear","String","getMonth","padStart","push","caption","mediaFile","mediaPreview","thumbnailFile","thumbnailPreview","toLowerCase","carouselImages","scheduledDate","scheduledTime","status","isSelected","carouselUploading","getTime","setDate","handleStrategyChange","field","value","prev","newData","map","row","handlePostTypeChange","newPostType","handleCellEdit","rowId","hasCaption","trim","hasEnoughImages","length","hasMedia","handleViewMedia","find","r","handleThumbnailUpload","async","event","file","target","files","type","startsWith","thumbnailUploading","console","log","uploadResponse","apiClient","uploadThumbnailToCloudinary","success","data","url","thumbnailUrl","alert","error","message","handleRemoveMedia","handleViewCarouselImage","imageIndex","mediaType","isNested","handleReorderCarouselImages","newOrder","handleDragOver","e","preventDefault","getStatusIcon","getStatusClass","getPostsForDate","date","dateString","filter","_jsxs","className","children","_jsx","onClick","width","height","viewBox","fill","stroke","strokeWidth","x","y","rx","ry","cx","cy","points","x1","y1","x2","y2","min","max","onChange","handleCarouselImageCountChange","newCount","template","placeholder","style","display","alignItems","gap","disabled","title","toLocaleDateString","month","year","day","generateCalendarDays","daysInMonth","firstDayOfMonth","days","i","index","toISOString","post","postIndex","substring","newRow","Math","random","handleSelectAll","_Fragment","handleBulkDelete","includes","d","selectedComposerRows","captions","selectedTemplate","t","context","fullPrompt","JSON","stringify","captionResponse","generateInstagramCaption","content","generated_text","round","c","successCount","failedCount","errorCount","response","generateInstagramImage","image_url","ref","_row$mediaFile","_row$mediaFile$type","draggable","onDragStart","handleDragStart","onDragOver","onDrop","targetRowId","sourceIndex","findIndex","targetIndex","movedRow","splice","handleDrop","checked","handleRowSelect","handleExpandCaption","position","strokeDasharray","strokeLinecap","attributeName","from","to","dur","repeatCount","opacity","pointerEvents","slice","src","alt","handleRemoveCarouselImage","_","newImages","handleViewCarousel","handleRemoveCarouselImages","controls","handleViewThumbnail","handleRemoveThumbnail","accept","htmlFor","reader","FileReader","onload","result","readAsDataURL","handleMediaUpload","handleGenerateMedia","flexDirection","imageCount","generateInstagramCarousel","image_urls","errorMsg","handleGenerateCarousel","multiple","el","current","Array","maxImages","imageUrls","uploadImageToCloudinary","handleCarouselUpload","top","left","justifyContent","background","zIndex","margin","readyRows","processedCount","totalPosts","normalizedPostsWithMedia","Promise","all","basePost","scheduled_datetime","scheduled_date","scheduled_time","post_type","media_file","fileToBase64","media_filename","image_prompt","carouselFiles","carousel_images","carousel_filenames","idx","carousel_image_count","thumbnail_url","thumbnail_file","thumbnail_filename","bulkData","social_account_id","posts","bulkScheduleInstagramPosts","_response$scheduled_p","_response$scheduled_p2","_promptTemplates$find","scheduled_posts","some","successMessage","platform","strategyName","state","scheduledGridRows","isArray","results","forEach","failed_posts","fp","sp","errorData","hasReel","handleSaveExpandedCaption","newCaption","dataTransfer","setData","dragIndex","getData","dropIndex","draggedItem","EditPostModal","_form$scheduled_datet","onSave","form","setForm","setPosts","search","setSearch","sortBy","setSortBy","loading","setLoading","editPost","setEditPost","deletePost","setDeletePost","showConfirm","setShowConfirm","setMessage","fetchPosts","getScheduledPosts","err","formatDateTime","dateTimeString","toLocaleTimeString","hour","minute","hour12","sorted","sort","a","b","valA","valB","colSpan","postTypeDisplay","icon","label","class","charAt","toUpperCase","getPostTypeDisplay","handleEdit","handleDelete","deleteScheduledPost","p","updateScheduledPost","updated","ACCEPTED_IMAGE_TYPES","ACCEPTED_VIDEO_TYPES","InstagramPage","useLocation","isAuthenticated","authLoading","user","useAuth","testNotification","testWebSocketConnection","testApiConnection","testSimpleWebSocket","refreshNotifications","isConnected","setIsConnected","instagramAccounts","setInstagramAccounts","setSelectedAccount","activeTab","setActiveTab","sdkLoaded","setSdkLoaded","fbAccessToken","setFbAccessToken","setCaption","aiPrompt","setAiPrompt","aiGenerating","setAiGenerating","aiImageUrl","setAiImageUrl","imageSource","setImageSource","uploadedImageUrl","setUploadedImageUrl","uploadingImage","setUploadingImage","selectedImageFile","setSelectedImageFile","autoGenerateCaption","setAutoGenerateCaption","captionPrompt","setCaptionPrompt","generatingCaption","setGeneratingCaption","rateLimitCooldown","setRateLimitCooldown","showStrategyModal","setShowStrategyModal","strategyTemplates","setStrategyTemplates","setCarouselImages","setCarouselFiles","carouselCount","setCarouselCount","carouselCaption","setCarouselCaption","carouselGenerating","setCarouselGenerating","draggedIndex","setDraggedIndex","reelFile","setReelFile","reelUrl","setReelUrl","reelFilename","setReelFilename","reelCaption","setReelCaption","reelUploading","setReelUploading","reelAutoGenerateCaption","setReelAutoGenerateCaption","reelCaptionPrompt","setReelCaptionPrompt","generatingReelCaption","setGeneratingReelCaption","reelThumbnailFile","setReelThumbnailFile","reelThumbnailUrl","setReelThumbnailUrl","reelThumbnailFilename","setReelThumbnailFilename","userMedia","setUserMedia","loadingMedia","setLoadingMedia","showDriveModal","setShowDriveModal","driveFiles","setDriveFiles","loadingDriveFiles","setLoadingDriveFiles","driveAuthenticated","setDriveAuthenticated","driveAuthLoading","setDriveAuthLoading","autoReplyEnabled","setAutoReplyEnabled","autoReplyTemplate","setAutoReplyTemplate","autoReplyPosts","setAutoReplyPosts","selectedAutoReplyPosts","setSelectedAutoReplyPosts","autoReplyLoading","setAutoReplyLoading","loadingAutoReplyPosts","setLoadingAutoReplyPosts","isSelectingPosts","setIsSelectingPosts","dmAutoReplyEnabled","setDmAutoReplyEnabled","dmAutoReplyTemplate","setDmAutoReplyTemplate","dmAutoReplyLoading","setDmAutoReplyLoading","showFilePicker","setShowFilePicker","filePickerType","setFilePickerType","filePickerFormType","setFilePickerFormType","isLoadingGoogleDrive","setIsLoadingGoogleDrive","googleDriveAvailable","setGoogleDriveAvailable","showBulkComposer","setShowBulkComposer","INSTAGRAM_APP_ID","process","globalAutoReplyEnabled","setGlobalAutoReplyEnabled","globalAutoReplyLoading","setGlobalAutoReplyLoading","globalAutoReplyStatus","setGlobalAutoReplyStatus","globalAutoReplyProgress","setGlobalAutoReplyProgress","apiError","setApiError","retrying","setRetrying","toast","setToast","show","showToast","arguments","undefined","setTimeout","statusRes","getGlobalInstagramAutoReplyStatus","platform_user_id","enabled","fetchGlobalAutoReplyStatus","intervalId","pollProgress","res","getGlobalInstagramAutoReplyProgress","progress","setInterval","clearInterval","checkLoginStatus","window","FB","getLoginStatus","authResponse","accessToken","handleConnectInstagram","loadFacebookSDK","REACT_APP_FACEBOOK_APP_ID","then","checkGoogleDriveAvailability","initializeFacebookSDK","init","appId","cookie","xfbml","version","fbAsyncInit","s","js","fjs","getElementsByTagName","getElementById","createElement","parentNode","insertBefore","document","token","localStorage","getItem","setToken","getInstagramAccounts","accounts","catch","connectInstagram","allAccounts","getSocialAccounts","mappedAccounts","acc","account","username","display_name","page_name","followers_count","follower_count","media_count","profile_picture_url","loadUserMedia","_media$data","media","getInstagramMedia","instagramUserId","handleImageChange","Error","handleCarouselFilesChange","urls","dropEffect","handleDragEnd","handleReelFileChange","_res$data","uploadVideoToCloudinary","_res$data2","_res$data3","videoUrl","filename","toString","authenticateGoogleDrive","getGoogleDriveAuthorizeUrl","consent_url","popup","open","handleMessage","loadDriveFiles","removeEventListener","close","addEventListener","already_authenticated","getGoogleDriveFiles","openFilePicker","formType","closeFilePicker","handleGoogleDriveSelect","getGoogleDriveStatus","authenticated","openDriveAuthPopup","loadGoogleDriveAPI","google","picker","authResult","getGoogleDriveAuth","PickerBuilder","addView","DocsView","setIncludeFolders","setSelectFolderEnabled","setMimeTypes","setOAuthToken","access_token","setDeveloperKey","setCallback","handleGoogleDriveCallback","enableFeature","Feature","NAV_HIDDEN","MULTISELECT_ENABLED","setTitle","setSelectableMimeTypes","build","setVisible","resolve","reject","script","gapi","load","onerror","head","appendChild","authUrl","messageHandler","action","Action","PICKED","docs","fileObjects","fileContent","downloadGoogleDriveFile","blob","Blob","mimeType","fileObj","File","fileId","byteCharacters","atob","byteNumbers","charCodeAt","Uint8Array","handlePublish","timestamp","options","instagram_user_id","media_type","imageUrl","finalImageUrl","postInstagramCarousel","video_url","video_filename","is_reel","hasThumbnailUrl","hasThumbnailFilename","cleanOptions","Object","fromEntries","entries","key","originalPostType","originalOptions","cleanOptionsHasThumbnail","createUnifiedInstagramPost","updatedAccount","warn","details","loadDmAutoReplySettings","statusResponse","getInstagramDmAutoReplyStatus","loadPostsForAutoReply","getPosts","accountPosts","_post$social_account","_post$social_account2","_post$social_account3","_post$social_account4","_post$social_account5","_post$social_account6","matchesAccountId","social_account","matchesPlatformUserId","matchesUsername","isMatch","postId","postAccountId","postPlatformUserId","postUsername","selectedAccountId","selectedPlatformUserId","selectedUsername","_post$content","_post$social_account7","_post$social_account8","_post$social_account9","syncResponse","syncInstagramPosts","refreshedResponse","refreshedAccountPosts","_post$social_account0","_post$social_account1","_post$social_account10","syncError","errorMessage","rules","getAutomationRules","existingRule","rule","rule_type","_existingRule$actions","is_active","actions","_error$response","_error$response$data","detail","loadAutoReplySettings","instagramAccount","validateAutoReplyState","fetchScheduledPosts","xmlns","borderRadius","boxShadow","padding","marginBottom","border","flexWrap","overflow","objectFit","fontWeight","fontSize","color","marginTop","marginRight","disableRes","disableGlobalInstagramAutoReply","enableRes","enableGlobalInstagramAutoReply","cursor","transition","verticalAlign","marginLeft","borderTop","animation","toggleInstagramDmAutoReply","handleLogout","handleFacebookLogin","login","scope","dimensions","enhanced_prompt","cooldownInterval","imageRes","captionRes","floor","effectAllowed","draggedImage","onDragEnd","stopPropagation","indexToRemove","removeCarouselImage","finalCaption","maxHeight","_res$data4","_res$data5","_res$data6","maxWidth","media_url","IgBulkComposer","ScheduledPostHistory","fileName","byteArray","handleDriveFileSelect","thumbnailLink","size","click","onTouchStart","current_post","total_posts","current_comment","total_comments","reload","FACEBOOK_APP_ID","cleanupFacebookSDK","logout","versions","currentVersionIndex","tryInitialization","defer","crossOrigin","body"],"sourceRoot":""}