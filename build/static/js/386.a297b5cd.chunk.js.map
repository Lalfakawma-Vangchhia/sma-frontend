{"version":3,"file":"static/js/386.a297b5cd.chunk.js","mappings":"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","sources":["components/BulkComposer.js","components/AIGenerateTab.js","components/ManualPostTab.js","components/AutomateTab.js","services/facebookService.js","components/FacebookPage.js","components/FacebookUtils.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNotifications } from '../contexts/NotificationContext';\r\nimport apiClient from '../services/apiClient';\r\nimport { fileToBase64 } from './FacebookUtils';\r\nimport './BulkComposer.css';\r\nimport { MdAdd, MdSelectAll, MdDelete, MdExpandMore, MdSort } from 'react-icons/md';\r\n\r\n// 1. Add promptTemplates as a constant\r\nconst promptTemplates = [\r\n  { id: 1, name: 'Daily Motivation', prompt: 'Share an inspiring quote or motivational message for your audience' },\r\n  { id: 2, name: 'Product Showcase', prompt: 'Highlight your best products with engaging descriptions' },\r\n  { id: 3, name: 'Behind the Scenes', prompt: 'Share behind-the-scenes content about your business or team' },\r\n  { id: 4, name: 'Customer Spotlight', prompt: 'Feature customer testimonials or success stories' },\r\n  { id: 5, name: 'Industry Tips', prompt: 'Share valuable tips and insights related to your industry' },\r\n  { id: 6, name: 'Custom', prompt: 'custom' }\r\n];\r\n\r\n// Utility function to convert UTC time to IST time for display\r\n// eslint-disable-next-line no-unused-vars\r\nconst utcToIstTime = (utcTime) => {\r\n  const [hours, minutes] = utcTime.split(':');\r\n  const date = new Date();\r\n  date.setUTCHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n\r\n  // Convert to IST (UTC+5:30)\r\n  const istHours = (date.getUTCHours() + 5) % 24;\r\n  const istMinutes = (date.getUTCMinutes() + 30) % 60;\r\n  const addHour = date.getUTCMinutes() + 30 >= 60 ? 1 : 0;\r\n  const finalIstHours = (istHours + addHour) % 24;\r\n\r\n  return `${String(finalIstHours).padStart(2, '0')}:${String(istMinutes).padStart(2, '0')}`;\r\n};\r\n\r\n// Utility function to convert IST time to UTC for backend\r\n// eslint-disable-next-line no-unused-vars\r\nconst istToUtcTime = (istTime) => {\r\n  const [hours, minutes] = istTime.split(':');\r\n  let utcHours = (parseInt(hours) - 5 + 24) % 24;\r\n  let utcMinutes = parseInt(minutes) - 30;\r\n\r\n  if (utcMinutes < 0) {\r\n    utcMinutes += 60;\r\n    utcHours = (utcHours - 1 + 24) % 24;\r\n  }\r\n\r\n  return `${String(utcHours).padStart(2, '0')}:${String(utcMinutes).padStart(2, '0')}`;\r\n};\r\n\r\n// dateStr: \"2025-07-17\"\r\n// timeStr: \"11:17\"\r\n// eslint-disable-next-line no-unused-vars\r\nfunction toISTISOString(dateStr, timeStr) {\r\n  // Create a Date object in the user's local time\r\n  const [year, month, day] = dateStr.split('-').map(Number);\r\n  const [hour, minute] = timeStr.split(':').map(Number);\r\n  const localDate = new Date(year, month - 1, day, hour, minute);\r\n\r\n  // Get the UTC time value\r\n  const utc = localDate.getTime() - (localDate.getTimezoneOffset() * 60000);\r\n\r\n  // Offset for IST (+5:30)\r\n  const istOffset = 5.5 * 60 * 60000;\r\n  const istDate = new Date(utc + istOffset);\r\n\r\n  // Format as ISO string with +05:30\r\n  const pad = (n) => n.toString().padStart(2, '0');\r\n  const iso =\r\n    `${istDate.getFullYear()}-${pad(istDate.getMonth() + 1)}-${pad(istDate.getDate())}T` +\r\n    `${pad(istDate.getHours())}:${pad(istDate.getMinutes())}:00+05:30`;\r\n  return iso;\r\n}\r\n\r\nfunction BulkComposer({ selectedPage, onClose, availablePages, onPageChange }) {\r\n\r\n  const { isAuthenticated } = useAuth();\r\n  const { addNotification } = useNotifications();\r\n\r\n  // Strategy step state\r\n  const [strategyData, setStrategyData] = useState({\r\n    promptTemplate: '',\r\n    customStrategyTemplate: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    frequency: 'daily',\r\n    customCron: '',\r\n    timeSlot: '09:00'\r\n  });\r\n\r\n  // Composer grid state\r\n  const [composerRows, setComposerRows] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [dragStartRow, setDragStartRow] = useState(null);\r\n\r\n  // Calendar preview state\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n\r\n  // Queue state\r\n  const [isScheduling, setIsScheduling] = useState(false);\r\n  const [scheduleProgress, setScheduleProgress] = useState(0);\r\n\r\n  // Expanded view state\r\n  const [expandedCaption, setExpandedCaption] = useState(null);\r\n  const [mediaPreviewModal, setMediaPreviewModal] = useState(null);\r\n\r\n  // Scheduled posts state\r\n  const [scheduledPosts, setScheduledPosts] = useState([]);\r\n  const [loadingScheduledPosts, setLoadingScheduledPosts] = useState(false);\r\n  const [showScheduledPosts, setShowScheduledPosts] = useState(true);\r\n  const [expandedSchedule, setExpandedSchedule] = useState(null);\r\n  const [editingPost, setEditingPost] = useState(null);\r\n\r\n  // Add page sync state\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [isCheckingPageSync, setIsCheckingPageSync] = useState(false);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [pageSyncStatus, setPageSyncStatus] = useState('');\r\n\r\n  // 1. Add state for pagination and sorting:\r\n  const [schedulePage, setSchedulePage] = useState(1);\r\n  const [scheduleSort, setScheduleSort] = useState('desc'); // 'desc' for newest first, 'asc' for oldest first\r\n  const SCHEDULES_PER_PAGE = 5;\r\n\r\n  const initialAutoExpandDone = useRef(false);\r\n\r\n  // Group scheduled posts by schedule_batch_id (batch), fallback to date if missing\r\n  const groupedBatches = scheduledPosts.reduce((groups, post) => {\r\n    const batchKey = post.schedule_batch_id || post.scheduled_date;\r\n    if (!groups[batchKey]) {\r\n      groups[batchKey] = [];\r\n    }\r\n    groups[batchKey].push(post);\r\n    return groups;\r\n  }, {});\r\n\r\n  // Sort batches by earliest scheduled_date in each batch\r\n  const sortedBatchKeys = Object.keys(groupedBatches).sort((a, b) => {\r\n    const aDate = groupedBatches[a][0]?.scheduled_date || a;\r\n    const bDate = groupedBatches[b][0]?.scheduled_date || b;\r\n    return scheduleSort === 'desc' ? bDate.localeCompare(aDate) : aDate.localeCompare(bDate);\r\n  });\r\n  const totalPages = Math.ceil(scheduledPosts.length / SCHEDULES_PER_PAGE);\r\n  const pagedBatchKeys = sortedBatchKeys.slice((schedulePage - 1) * SCHEDULES_PER_PAGE, schedulePage * SCHEDULES_PER_PAGE);\r\n\r\n  const gridRef = useRef(null);\r\n\r\n  // Define generateInitialRows before it's used in useEffect\r\n  const generateInitialRows = useCallback(() => {\r\n    if (!strategyData.startDate) return;\r\n\r\n    // Create dates in UTC to match backend scheduler\r\n    const startDateParts = strategyData.startDate.split('-');\r\n    const startDate = new Date(Date.UTC(parseInt(startDateParts[0]), parseInt(startDateParts[1]) - 1, parseInt(startDateParts[2])));\r\n\r\n    let endDate = null;\r\n    if (strategyData.endDate) {\r\n      const endDateParts = strategyData.endDate.split('-');\r\n      endDate = new Date(Date.UTC(parseInt(endDateParts[0]), parseInt(endDateParts[1]) - 1, parseInt(endDateParts[2])));\r\n    }\r\n\r\n    const rows = [];\r\n    const maxDays = 75; // Facebook's 75-day limit\r\n    let currentDate = new Date(startDate);\r\n    let dayCount = 0;\r\n    let rowCount = 0;\r\n\r\n    // If no end date is provided, only schedule the start date (single day)\r\n    if (!endDate) {\r\n      const formattedDate = startDate.getUTCFullYear() + '-' +\r\n        String(startDate.getUTCMonth() + 1).padStart(2, '0') + '-' +\r\n        String(startDate.getUTCDate()).padStart(2, '0');\r\n\r\n      rows.push({\r\n        id: `row-0`,\r\n        caption: '',\r\n        mediaFile: null,\r\n        mediaPreview: null,\r\n        scheduledDate: formattedDate,\r\n        scheduledTime: strategyData.timeSlot,\r\n        status: 'draft',\r\n        isSelected: false\r\n      });\r\n    } else {\r\n      // Multiple day scheduling with end date\r\n      while (dayCount < maxDays && rowCount < 50) { // Limit to 50 rows max\r\n        // Stop if we have an end date and current date exceeds it\r\n        if (endDate && currentDate > endDate) {\r\n          break;\r\n        }\r\n\r\n        // Stop if beyond 75 days from now\r\n        const maxAllowedDate = new Date(Date.now() + 75 * 24 * 60 * 60 * 1000);\r\n        if (currentDate > maxAllowedDate) {\r\n          break;\r\n        }\r\n\r\n        // Apply frequency logic\r\n        let shouldInclude = false;\r\n        switch (strategyData.frequency) {\r\n          case 'daily':\r\n            shouldInclude = true;\r\n            break;\r\n          case 'weekly':\r\n            // Check if it's the same day of the week as start date\r\n            shouldInclude = currentDate.getUTCDay() === startDate.getUTCDay();\r\n            break;\r\n          case 'monthly':\r\n            // Check if it's the same day of the month as start date\r\n            shouldInclude = currentDate.getUTCDate() === startDate.getUTCDate();\r\n            break;\r\n          case 'custom':\r\n            // For custom cron, include every day for now\r\n            shouldInclude = true;\r\n            break;\r\n          default:\r\n            shouldInclude = true;\r\n        }\r\n\r\n        if (shouldInclude) {\r\n          // Format date consistently in YYYY-MM-DD format using UTC\r\n          const formattedDate = currentDate.getUTCFullYear() + '-' +\r\n            String(currentDate.getUTCMonth() + 1).padStart(2, '0') + '-' +\r\n            String(currentDate.getUTCDate()).padStart(2, '0');\r\n\r\n          rows.push({\r\n            id: `row-${rowCount}`,\r\n            caption: '',\r\n            mediaFile: null,\r\n            mediaPreview: null,\r\n            scheduledDate: formattedDate,\r\n            scheduledTime: strategyData.timeSlot,\r\n            status: 'draft',\r\n            isSelected: false\r\n          });\r\n          rowCount++;\r\n        }\r\n\r\n        // Move to next day in UTC\r\n        currentDate.setUTCDate(currentDate.getUTCDate() + 1);\r\n        dayCount++;\r\n      }\r\n    }\r\n\r\n    setComposerRows(rows);\r\n  }, [strategyData.startDate, strategyData.endDate, strategyData.frequency, strategyData.timeSlot]);\r\n\r\n  // Initialize composer with default rows\r\n  useEffect(() => {\r\n    if (strategyData.startDate && strategyData.frequency) {\r\n      generateInitialRows();\r\n    }\r\n  }, [strategyData.startDate, strategyData.endDate, strategyData.frequency, strategyData.timeSlot, generateInitialRows]);\r\n\r\n  // Convert default time slot to IST on component mount\r\n  useEffect(() => {\r\n    // Convert the default UTC time to IST when component mounts\r\n    if (strategyData.timeSlot) {\r\n      const istTime = utcToIstTime(strategyData.timeSlot);\r\n      setStrategyData(prev => ({ ...prev, timeSlot: istTime }));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // Load scheduled posts\r\n  const loadScheduledPosts = useCallback(async () => {\r\n    setLoadingScheduledPosts(true);\r\n    try {\r\n      const response = await apiClient.getBulkComposerContent(selectedPage?.internalId);\r\n      if (response && response.data) {\r\n        setScheduledPosts(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading scheduled posts:', error);\r\n      alert('Failed to load scheduled posts. Please try again.');\r\n    } finally {\r\n      setLoadingScheduledPosts(false);\r\n    }\r\n  }, [selectedPage?.internalId]);\r\n\r\n  // Load scheduled posts when component mounts or when page is selected\r\n  useEffect(() => {\r\n    if (selectedPage && selectedPage.internalId) {\r\n      loadScheduledPosts();\r\n    }\r\n  }, [selectedPage?.internalId, loadScheduledPosts, selectedPage]);\r\n\r\n  // After fetching scheduledPosts, add a debug log\r\n  useEffect(() => {\r\n    if (!loadingScheduledPosts && scheduledPosts.length > 0) {\r\n      console.log('[BulkComposer] Raw scheduledPosts:', scheduledPosts);\r\n    }\r\n  }, [loadingScheduledPosts, scheduledPosts]);\r\n\r\n  // After grouping batches, add a debug log\r\n  useEffect(() => {\r\n    console.log('[BulkComposer] Grouped batch keys:', sortedBatchKeys);\r\n    console.log('[BulkComposer] Grouped batches:', groupedBatches);\r\n  }, [sortedBatchKeys, groupedBatches]);\r\n\r\n  // Auto-expand today's schedule and recent schedules\r\n  useEffect(() => {\r\n    if (scheduledPosts.length > 0 && !initialAutoExpandDone.current) {\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const recentDates = sortedBatchKeys.slice(0, 3);\r\n      if (groupedBatches[today]) {\r\n        setExpandedSchedule(today);\r\n      } else if (recentDates.length > 0) {\r\n        setExpandedSchedule(recentDates[0]);\r\n      } else {\r\n        setExpandedSchedule(null);\r\n      }\r\n      initialAutoExpandDone.current = true;\r\n    }\r\n  }, [scheduledPosts.length, sortedBatchKeys, groupedBatches]);\r\n\r\n  // Add this useEffect after the pagination logic:\r\n  useEffect(() => { setSchedulePage(1); }, [scheduleSort, totalPages]);\r\n\r\n  const handleStrategyChange = useCallback((field, value) => {\r\n    setStrategyData(prev => {\r\n      const newData = { ...prev, [field]: value };\r\n      return newData;\r\n    });\r\n\r\n    // If prompt template is selected, apply it to all rows\r\n    if (field === 'promptTemplate' && value) {\r\n      setComposerRows(prev =>\r\n        prev.map(row => ({\r\n          ...row,\r\n          caption: value\r\n        }))\r\n      );\r\n    }\r\n\r\n    // Validate end date is not the same as start date (only if end date is provided)\r\n    if (field === 'endDate' && value && value === strategyData.startDate) {\r\n      alert('End date cannot be the same as start date. Please select a different end date or leave it empty.');\r\n      return;\r\n    }\r\n\r\n    // If start date is changed and end date is before it, clear end date\r\n    if (field === 'startDate' && strategyData.endDate && value > strategyData.endDate) {\r\n      setStrategyData(prev => ({ ...prev, endDate: '' }));\r\n    }\r\n  }, [strategyData.startDate, strategyData.endDate]);\r\n\r\n  const handleRowSelect = (rowId) => {\r\n    setSelectedRows(prev => {\r\n      if (prev.includes(rowId)) {\r\n        return prev.filter(id => id !== rowId);\r\n      } else {\r\n        return [...prev, rowId];\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedRows.length === composerRows.length) {\r\n      setSelectedRows([]);\r\n    } else {\r\n      setSelectedRows(composerRows.map(row => row.id));\r\n    }\r\n  };\r\n\r\n  const handleCellEdit = (rowId, field, value) => {\r\n    setComposerRows(prev =>\r\n      prev.map(row => {\r\n        if (row.id === rowId) {\r\n          const updatedRow = { ...row, [field]: value };\r\n          // If caption is being edited and has content, set status to ready\r\n          if (field === 'caption' && value.trim()) {\r\n            updatedRow.status = 'ready';\r\n          }\r\n          return updatedRow;\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleMediaUpload = (rowId, event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setComposerRows(prev =>\r\n          prev.map(row =>\r\n            row.id === rowId ? {\r\n              ...row,\r\n              mediaFile: file,\r\n              mediaPreview: e.target.result\r\n            } : row\r\n          )\r\n        );\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleGenerateMedia = async (rowId) => {\r\n    try {\r\n      // Get the row to use its caption as image prompt\r\n      const row = composerRows.find(r => r.id === rowId);\r\n      if (!row) {\r\n        alert('Row not found.');\r\n        return;\r\n      }\r\n\r\n      // Use the caption as the image prompt\r\n      const imagePrompt = row.caption.trim();\r\n      if (!imagePrompt) {\r\n        alert('Please add a caption first to generate an image.');\r\n        return;\r\n      }\r\n\r\n      // Generate image using Stability AI with the caption as prompt\r\n      const response = await apiClient.generateFacebookImage(imagePrompt, 'feed');\r\n\r\n      if (response.success && response.data && response.data.image_url) {\r\n        console.log(`Successfully generated image for row ${rowId}:`, response.data.image_url);\r\n        setComposerRows(prev => {\r\n          const updatedRows = prev.map(r =>\r\n            r.id === rowId ? {\r\n              ...r,\r\n              mediaFile: null, // No file object for generated images\r\n              mediaPreview: response.data.image_url,\r\n              mediaGenerated: true,\r\n              status: r.status === 'ready' ? 'ready' : 'draft' // Keep status as ready if it was ready\r\n            } : r\r\n          );\r\n          console.log('Updated rows after image generation:', updatedRows);\r\n          console.log('Updated row:', updatedRows.find(r => r.id === rowId));\r\n          return updatedRows;\r\n        });\r\n      } else {\r\n        console.log(`Failed to generate image for row ${rowId}:`, response);\r\n        alert('Failed to generate image. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating media:', error);\r\n      alert('Failed to generate image. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleGenerateAllCaptions = async () => {\r\n    console.log('=== Starting Generate Captions for Selected Rows ===');\r\n    console.log('Strategy Data:', strategyData);\r\n    console.log('Selected Rows:', selectedRows);\r\n\r\n    if (selectedRows.length === 0) {\r\n      alert('Please select at least one row to generate captions for.');\r\n      return;\r\n    }\r\n\r\n    // Check if we have a strategy template selected\r\n    if (!strategyData.promptTemplate) {\r\n      alert('Please select a strategy template first.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get only the selected rows\r\n      const selectedComposerRows = composerRows.filter(row => selectedRows.includes(row.id));\r\n\r\n      // Create contexts for each selected row (using dates as context)\r\n      const contexts = selectedComposerRows.map(row => {\r\n        const date = new Date(row.scheduledDate);\r\n        return `Post for ${date.toLocaleDateString('en-US', {\r\n          weekday: 'long',\r\n          month: 'long',\r\n          day: 'numeric'\r\n        })}`;\r\n      });\r\n\r\n      console.log('Generated contexts for selected rows:', contexts);\r\n\r\n      let response;\r\n\r\n      if (strategyData.promptTemplate === 'custom') {\r\n        console.log('Using custom strategy template');\r\n        // Use custom strategy template\r\n        if (!strategyData.customStrategyTemplate.trim()) {\r\n          alert('Please enter a custom strategy template first.');\r\n          return;\r\n        }\r\n\r\n        console.log('Calling generateBulkCaptions with:', {\r\n          customStrategy: strategyData.customStrategyTemplate,\r\n          contexts: contexts,\r\n          maxLength: 2000\r\n        });\r\n\r\n        response = await apiClient.generateFacebookBulkCaptions(\r\n          strategyData.customStrategyTemplate,\r\n          contexts,\r\n          2000\r\n        );\r\n      } else {\r\n        console.log('Using predefined strategy template');\r\n        // Use predefined strategy template\r\n        const selectedTemplate = promptTemplates.find(t => t.prompt === strategyData.promptTemplate);\r\n        console.log('Selected template:', selectedTemplate);\r\n\r\n        if (!selectedTemplate) {\r\n          alert('Invalid strategy template selected.');\r\n          return;\r\n        }\r\n\r\n        // Generate captions using the predefined template for selected rows only\r\n        const captions = [];\r\n        for (let i = 0; i < contexts.length; i++) {\r\n          try {\r\n            console.log(`Generating caption ${i + 1}/${contexts.length} for context:`, contexts[i]);\r\n            const context = contexts[i];\r\n            const captionResponse = await apiClient.generateFacebookCaptionWithStrategy(\r\n              selectedTemplate.prompt,\r\n              context,\r\n              2000\r\n            );\r\n\r\n            console.log(`Caption ${i + 1} response:`, captionResponse);\r\n\r\n            if (captionResponse.success) {\r\n              captions.push({\r\n                content: captionResponse.content,\r\n                context: context,\r\n                success: true\r\n              });\r\n            } else {\r\n              captions.push({\r\n                content: `Failed to generate caption for: ${context}`,\r\n                context: context,\r\n                success: false,\r\n                error: captionResponse.error || 'Unknown error'\r\n              });\r\n            }\r\n          } catch (error) {\r\n            console.error(`Error generating caption for context ${contexts[i]}:`, error);\r\n            captions.push({\r\n              content: `Failed to generate caption for: ${contexts[i]}`,\r\n              context: contexts[i],\r\n              success: false,\r\n              error: error.message\r\n            });\r\n          }\r\n        }\r\n\r\n        response = {\r\n          success: true,\r\n          captions: captions,\r\n          total_generated: captions.filter(c => c.success).length\r\n        };\r\n      }\r\n\r\n      console.log('Final response:', response);\r\n\r\n      if (response.success && response.captions) {\r\n        // Update only selected rows with generated captions\r\n        setComposerRows(prev =>\r\n          prev.map(row => {\r\n            if (selectedRows.includes(row.id)) {\r\n              // Find the corresponding caption for this selected row\r\n              const selectedIndex = selectedComposerRows.findIndex(selectedRow => selectedRow.id === row.id);\r\n              const generatedCaption = response.captions[selectedIndex];\r\n              if (generatedCaption && generatedCaption.success) {\r\n                return {\r\n                  ...row,\r\n                  caption: generatedCaption.content,\r\n                  status: 'ready' // Update status to ready\r\n                };\r\n              }\r\n            }\r\n            return row;\r\n          })\r\n        );\r\n\r\n        alert(`Successfully generated ${response.total_generated} captions for selected rows!`);\r\n      } else {\r\n        alert('Failed to generate captions. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating captions:', error);\r\n      alert('Failed to generate captions. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Generate images for all selected rows\r\n  const handleGenerateAllImages = async () => {\r\n    if (selectedRows.length === 0) {\r\n      alert('Please select at least one row to generate images.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const selectedComposerRows = composerRows.filter(row => selectedRows.includes(row.id));\r\n\r\n      for (let i = 0; i < selectedComposerRows.length; i++) {\r\n        const row = selectedComposerRows[i];\r\n\r\n        if (!row.caption || !row.caption.trim()) {\r\n          console.log(`Skipping image generation for row ${row.id} - no caption available`);\r\n          continue;\r\n        }\r\n\r\n        console.log(`Generating image for row ${row.id} with caption: ${row.caption}`);\r\n\r\n        // Use the caption as the image prompt\r\n        const imagePrompt = row.caption.trim();\r\n\r\n        // Generate image using Stability AI with the caption as prompt\r\n        const response = await apiClient.generateFacebookImage(imagePrompt, 'feed');\r\n\r\n        if (response.success && response.data && response.data.image_url) {\r\n          console.log(`Successfully generated image for row ${row.id}:`, response.data.image_url);\r\n          setComposerRows(prev => {\r\n            const updatedRows = prev.map(r =>\r\n              r.id === row.id ? {\r\n                ...r,\r\n                mediaFile: null, // No file object for generated images\r\n                mediaPreview: response.data.image_url,\r\n                mediaGenerated: true,\r\n                status: r.status === 'ready' ? 'ready' : 'draft' // Keep status as ready if it was ready\r\n              } : r\r\n            );\r\n            console.log('Updated rows:', updatedRows);\r\n            console.log('Row after update:', updatedRows.find(r => r.id === row.id));\r\n            return updatedRows;\r\n          });\r\n        } else {\r\n          console.log(`Failed to generate image for row ${row.id}:`, response);\r\n        }\r\n      }\r\n\r\n      alert('Image generation completed!');\r\n    } catch (error) {\r\n      console.error('Error generating images:', error);\r\n      alert('Failed to generate images. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleExpandCaption = (rowId) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row) {\r\n      setExpandedCaption({\r\n        rowId,\r\n        caption: row.caption,\r\n        scheduledDate: row.scheduledDate,\r\n        scheduledTime: row.scheduledTime\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewMedia = (rowId) => {\r\n    const row = composerRows.find(r => r.id === rowId);\r\n    if (row && row.mediaPreview) {\r\n      setMediaPreviewModal({\r\n        rowId,\r\n        mediaUrl: row.mediaPreview,\r\n        mediaType: (row.mediaFile?.type?.startsWith('image/') || (row.mediaPreview && !row.mediaFile)) ? 'image' : 'video',\r\n        caption: row.caption\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSaveExpandedCaption = (newCaption) => {\r\n    if (expandedCaption) {\r\n      setComposerRows(prev =>\r\n        prev.map(row =>\r\n          row.id === expandedCaption.rowId ? {\r\n            ...row,\r\n            caption: newCaption\r\n          } : row\r\n        )\r\n      );\r\n      setExpandedCaption(null);\r\n    }\r\n  };\r\n\r\n  const handleBulkDelete = () => {\r\n    setComposerRows(prev => prev.filter(row => !selectedRows.includes(row.id)));\r\n    setSelectedRows([]);\r\n  };\r\n\r\n\r\n\r\n  const handleDragStart = (rowId) => {\r\n    setDragStartRow(rowId);\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (targetRowId) => {\r\n    if (dragStartRow && dragStartRow !== targetRowId) {\r\n      const rows = [...composerRows];\r\n      const sourceIndex = rows.findIndex(row => row.id === dragStartRow);\r\n      const targetIndex = rows.findIndex(row => row.id === targetRowId);\r\n\r\n      const [movedRow] = rows.splice(sourceIndex, 1);\r\n      rows.splice(targetIndex, 0, movedRow);\r\n\r\n      setComposerRows(rows);\r\n    }\r\n    setDragStartRow(null);\r\n  };\r\n\r\n  const handleScheduleAll = async () => {\r\n    // More robust checking for selectedPage and its database ID\r\n    if (!selectedPage || !selectedPage.internalId || composerRows.length === 0) {\r\n      console.log('Selected Page Debug:', selectedPage);\r\n\r\n      if (!selectedPage) {\r\n        alert('Please select a page first before scheduling posts.');\r\n        return;\r\n      }\r\n\r\n      if (!selectedPage.internalId) {\r\n        // Try to automatically sync the page first\r\n        const shouldRetry = await new Promise((resolve) => {\r\n          const confirmed = window.confirm(\r\n            `The selected page \"${selectedPage.name}\" is not properly synced with the database.\\n\\n` +\r\n            `Would you like to try syncing it automatically?\\n\\n` +\r\n            `Click \"OK\" to try syncing, or \"Cancel\" to abort scheduling.`\r\n          );\r\n          resolve(confirmed);\r\n        });\r\n\r\n        if (shouldRetry) {\r\n          const syncSuccess = await checkPageSync();\r\n          if (!syncSuccess) {\r\n            const manualRetry = window.confirm(\r\n              `Automatic sync failed. This usually happens when:\\n\\n` +\r\n              `1. The page was recently connected\\n` +\r\n              `2. Facebook permissions need to be refreshed\\n\\n` +\r\n              `Would you like to:\\n` +\r\n              `• Click \"OK\" to disconnect and reconnect Facebook\\n` +\r\n              `• Click \"Cancel\" to try manual sync later`\r\n            );\r\n\r\n            if (manualRetry) {\r\n              alert('Please use the \"Disconnect Facebook\" button in the main interface, then reconnect Facebook and try again.');\r\n            }\r\n            return;\r\n          }\r\n          // If sync was successful, continue with scheduling\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (composerRows.length === 0) {\r\n        alert('No posts to schedule. Please create some posts first.');\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Check authentication\r\n    if (!isAuthenticated) {\r\n      alert('Please log in to schedule posts.');\r\n      return;\r\n    }\r\n\r\n    // Filter only ready posts\r\n    const readyPosts = composerRows.filter(row => row.status === 'ready' && row.caption.trim());\r\n\r\n    console.log('=== Bulk Schedule Debug Info ===');\r\n    console.log('Selected Page:', selectedPage);\r\n    console.log('Using Database ID (internalId):', selectedPage.internalId);\r\n    console.log('Facebook Page ID (for reference):', selectedPage.id);\r\n    console.log('Total Composer Rows:', composerRows.length);\r\n    console.log('Ready Posts:', readyPosts.length);\r\n    console.log('Ready Posts Data:', readyPosts);\r\n\r\n    if (readyPosts.length === 0) {\r\n      alert('No posts are ready to be scheduled. Please generate captions first.');\r\n      return;\r\n    }\r\n\r\n    setIsScheduling(true);\r\n    setScheduleProgress(0);\r\n\r\n    try {\r\n      // Use the database ID (internalId) not the Facebook page ID\r\n      const pageId = selectedPage.internalId;\r\n\r\n      console.log('Using database social_account_id:', pageId);\r\n\r\n      // Prepare bulk data with media files\r\n      const postsWithMedia = await Promise.all(\r\n        readyPosts.map(async (row) => {\r\n          let mediaFile = null;\r\n\r\n          // Handle uploaded files\r\n          if (row.mediaFile) {\r\n            try {\r\n              mediaFile = await fileToBase64(row.mediaFile);\r\n              console.log('Converted uploaded file to base64 for row:', row.id);\r\n            } catch (error) {\r\n              console.error('Error converting uploaded file to base64:', error);\r\n            }\r\n          }\r\n          // Handle generated images\r\n          else if (row.mediaPreview && !row.mediaFile) {\r\n            // For generated images, we need to fetch the image and convert to base64\r\n            try {\r\n              console.log('Fetching generated image for row:', row.id, 'URL:', row.mediaPreview);\r\n              const response = await fetch(row.mediaPreview);\r\n              if (!response.ok) {\r\n                throw new Error(`Failed to fetch image: ${response.status}`);\r\n              }\r\n              const blob = await response.blob();\r\n              mediaFile = await new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onloadend = () => {\r\n                  if (reader.result) {\r\n                    resolve(reader.result);\r\n                  } else {\r\n                    reject(new Error('Failed to convert image to base64'));\r\n                  }\r\n                };\r\n                reader.onerror = () => reject(new Error('FileReader error'));\r\n                reader.readAsDataURL(blob);\r\n              });\r\n              console.log('Converted generated image to base64 for row:', row.id);\r\n            } catch (error) {\r\n              console.error('Error converting generated image to base64:', error);\r\n              // Don't fail the entire post if image conversion fails\r\n              mediaFile = null;\r\n            }\r\n          }\r\n\r\n          // For Instagram bulk schedule, send scheduled_time in IST (as selected in UI)\r\n          const postData = {\r\n            caption: row.caption,\r\n            scheduled_date: row.scheduledDate,\r\n            scheduled_time: row.scheduledTime, // Send IST time directly\r\n            media_file: mediaFile,\r\n            media_filename: row.mediaFile ? row.mediaFile.name : (row.mediaPreview ? 'generated_image.jpg' : null)\r\n          };\r\n\r\n          // Validate that the scheduled datetime is in the future\r\n          const scheduledDateTime = new Date(`${postData.scheduled_date}T${postData.scheduled_time}:00Z`);\r\n          const now = new Date();\r\n          if (scheduledDateTime <= now) {\r\n            console.warn(`Post for row ${row.id} is scheduled in the past:`, scheduledDateTime);\r\n            // You might want to skip this post or show a warning\r\n          }\r\n\r\n          console.log('Prepared post data for row:', row.id, {\r\n            caption: postData.caption?.substring(0, 50) + '...',\r\n            scheduled_date: postData.scheduled_date,\r\n            scheduled_time: postData.scheduled_time,\r\n            scheduled_datetime_utc: scheduledDateTime.toISOString(),\r\n            has_media: !!postData.media_file,\r\n            media_filename: postData.media_filename\r\n          });\r\n\r\n          return postData;\r\n        })\r\n      );\r\n\r\n      const requestPayload = {\r\n        social_account_id: pageId,\r\n        posts: postsWithMedia\r\n      };\r\n\r\n      console.log('=== Sending to Backend ===');\r\n      console.log('Database Page ID (social_account_id):', pageId);\r\n      console.log('Number of posts:', postsWithMedia.length);\r\n      console.log('Request payload structure:', {\r\n        social_account_id: requestPayload.social_account_id,\r\n        posts_count: requestPayload.posts.length,\r\n        first_post_sample: requestPayload.posts[0] ? {\r\n          caption: requestPayload.posts[0].caption?.substring(0, 50) + '...',\r\n          scheduled_date: requestPayload.posts[0].scheduled_date,\r\n          scheduled_time: requestPayload.posts[0].scheduled_time,\r\n          has_media: !!requestPayload.posts[0].media_file,\r\n          media_filename: requestPayload.posts[0].media_filename\r\n        } : 'No posts'\r\n      });\r\n\r\n      // Additional debugging for timezone handling\r\n      console.log('=== Timezone Debug Info ===');\r\n      console.log('Current UTC time:', new Date().toISOString());\r\n      console.log('Current local time:', new Date().toString());\r\n      console.log('Sample post scheduled datetime:', postsWithMedia[0] ?\r\n        new Date(`${postsWithMedia[0].scheduled_date}T${postsWithMedia[0].scheduled_time}:00Z`).toISOString() : 'No posts');\r\n\r\n      // Send the bulk schedule request\r\n      const response = await apiClient.bulkSchedulePosts(requestPayload);\r\n\r\n      console.log('=== Backend Response ===');\r\n      console.log('Full response:', response);\r\n\r\n      // Update status of scheduled posts\r\n      setComposerRows(prev =>\r\n        prev.map(row => {\r\n          if (readyPosts.some(readyPost => readyPost.id === row.id)) {\r\n            return { ...row, status: 'scheduled' };\r\n          }\r\n          return row;\r\n        })\r\n      );\r\n\r\n      setScheduleProgress(100);\r\n\r\n      // Show success message with details\r\n      const successCount = Array.isArray(response.results) ? response.results.filter(r => r.success).length : readyPosts.length;\r\n      const failedCount = Array.isArray(response.results) ? response.results.filter(r => !r.success).length : 0;\r\n\r\n      console.log('=== Results Summary ===');\r\n      console.log('Success count:', successCount);\r\n      console.log('Failed count:', failedCount);\r\n\r\n      if (response.results && Array.isArray(response.results)) {\r\n        console.log('Detailed results:', response.results);\r\n        response.results.forEach((result, index) => {\r\n          if (!result.success) {\r\n            console.error(`Post ${index + 1} failed:`, result.error || result.message || 'Unknown error');\r\n          }\r\n        });\r\n      }\r\n\r\n      if (failedCount > 0) {\r\n        alert(`Scheduled ${successCount} posts successfully. ${failedCount} posts failed. Check console for details.`);\r\n      } else {\r\n        alert(`Successfully scheduled ${successCount} posts!`);\r\n\r\n        // Add success notification for bulk scheduling\r\n        if (successCount > 0) {\r\n          addNotification({\r\n            type: 'success',\r\n            platform: 'facebook',\r\n            strategyName: strategyData.promptTemplate || 'Bulk Schedule',\r\n            message: `Successfully scheduled ${successCount} Facebook posts! You'll receive alerts 10 minutes before each post goes live.`\r\n          });\r\n        }\r\n      }\r\n\r\n      // Reload scheduled posts to show the newly scheduled content\r\n      await loadScheduledPosts();\r\n\r\n      // Don't auto-close the modal anymore - let user choose when to close\r\n      // onClose();\r\n    } catch (error) {\r\n      console.error('=== Frontend Error ===');\r\n      console.error('Error scheduling posts:', error);\r\n      console.error('Error details:', {\r\n        message: error.message,\r\n        stack: error.stack,\r\n        name: error.name\r\n      });\r\n\r\n      // Provide better error messages based on error type\r\n      if (error.message?.includes('social_account_id') || error.message?.includes('not found')) {\r\n        const retrySync = window.confirm(\r\n          `Page synchronization error detected.\\n\\n` +\r\n          `Error: ${error.message}\\n\\n` +\r\n          `Would you like to try syncing the page again?`\r\n        );\r\n\r\n        if (retrySync) {\r\n          await checkPageSync();\r\n        }\r\n      } else {\r\n        alert(`Error scheduling posts: ${error.message || 'Please try again.'}`);\r\n      }\r\n    } finally {\r\n      setIsScheduling(false);\r\n      setScheduleProgress(0);\r\n    }\r\n  };\r\n\r\n  const handleRemoveMedia = (rowId) => {\r\n    setComposerRows(prev =>\r\n      prev.map(row =>\r\n        row.id === rowId ? {\r\n          ...row,\r\n          mediaFile: null,\r\n          mediaPreview: null,\r\n          mediaGenerated: false // Reset generated status\r\n        } : row\r\n      )\r\n    );\r\n  };\r\n\r\n  // Calendar helper functions\r\n  const getDaysInMonth = (year, month) => {\r\n    return new Date(year, month + 1, 0).getDate();\r\n  };\r\n\r\n  const getFirstDayOfMonth = (year, month) => {\r\n    return new Date(year, month, 1).getDay();\r\n  };\r\n\r\n  const generateCalendarDays = (year, month) => {\r\n    const daysInMonth = getDaysInMonth(year, month);\r\n    const firstDayOfMonth = getFirstDayOfMonth(year, month);\r\n    const days = [];\r\n\r\n    // Add empty cells for days before the first day of the month\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n      days.push({ day: null, date: null });\r\n    }\r\n\r\n    // Add days of the month\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      const date = new Date(year, month, i);\r\n      days.push({ day: i, date: date });\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  const getPostsForDate = (date) => {\r\n    // Format date consistently to avoid timezone issues\r\n    const dateString = date.getFullYear() + '-' +\r\n      String(date.getMonth() + 1).padStart(2, '0') + '-' +\r\n      String(date.getDate()).padStart(2, '0');\r\n    const postsForDate = composerRows.filter(row => row.scheduledDate === dateString);\r\n    if (postsForDate.length > 0) {\r\n      console.log('Found posts for date:', dateString, 'Count:', postsForDate.length);\r\n    }\r\n    return postsForDate;\r\n  };\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case 'published':\r\n        return (\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <path d=\"M20 6L9 17l-5-5\" />\r\n          </svg>\r\n        );\r\n      case 'failed':\r\n        return (\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n          </svg>\r\n        );\r\n      case 'scheduled':\r\n        return (\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n            <polyline points=\"12,6 12,12 16,14\" />\r\n          </svg>\r\n        );\r\n      case 'ready':\r\n        return (\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <path d=\"M9 12l2 2 4-4\" />\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n          </svg>\r\n        );\r\n      default:\r\n        return (\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\r\n            <path d=\"m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\r\n          </svg>\r\n        );\r\n    }\r\n  };\r\n\r\n  const getStatusClass = (status) => {\r\n    switch (status) {\r\n      case 'published':\r\n        return 'status-published';\r\n      case 'failed':\r\n        return 'status-failed';\r\n      case 'scheduled':\r\n        return 'status-scheduled';\r\n      case 'ready':\r\n        return 'status-ready';\r\n      default:\r\n        return 'status-draft';\r\n    }\r\n  };\r\n\r\n  // Handle schedule expansion\r\n  const toggleScheduleExpansion = (dateKey) => {\r\n    setExpandedSchedule(prev => {\r\n      if (prev === dateKey) {\r\n        return null;\r\n      }\r\n      return dateKey;\r\n    });\r\n  };\r\n\r\n  // Handle post editing\r\n  const startEditingPost = (post) => {\r\n    setEditingPost({\r\n      id: post.id,\r\n      caption: post.caption,\r\n      original: post\r\n    });\r\n  };\r\n\r\n  const savePostEdit = async () => {\r\n    if (!editingPost) return;\r\n\r\n    try {\r\n      // Call API to update post caption\r\n      await apiClient.updateBulkComposerPost(editingPost.id, editingPost.caption);\r\n\r\n      // Update local state\r\n      setScheduledPosts(prev =>\r\n        prev.map(post =>\r\n          post.id === editingPost.id\r\n            ? { ...post, caption: editingPost.caption }\r\n            : post\r\n        )\r\n      );\r\n\r\n      setEditingPost(null);\r\n      alert('Post updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating post:', error);\r\n      alert('Failed to update post. Please try again.');\r\n    }\r\n  };\r\n\r\n  const cancelPostEdit = () => {\r\n    setEditingPost(null);\r\n  };\r\n\r\n  const cancelScheduledPost = async (postId, postCaption) => {\r\n    if (!window.confirm(`Are you sure you want to cancel this scheduled post?\\n\\n\"${postCaption.substring(0, 100)}...\"`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await apiClient.cancelBulkComposerPost(postId);\r\n\r\n      // Remove from local state\r\n      setScheduledPosts(prev => prev.filter(post => post.id !== postId));\r\n\r\n      alert('Scheduled post canceled successfully!');\r\n    } catch (error) {\r\n      console.error('Error canceling post:', error);\r\n      alert('Failed to cancel post. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Add page synchronization checking function\r\n  const checkPageSync = useCallback(async () => {\r\n    if (!selectedPage) return false;\r\n\r\n    setIsCheckingPageSync(true);\r\n    setPageSyncStatus('Checking page synchronization...');\r\n\r\n    try {\r\n      const socialAccounts = await apiClient.getSocialAccounts();\r\n      const facebookAccounts = socialAccounts.filter(acc =>\r\n        acc.platform === 'facebook' && acc.is_connected\r\n      );\r\n\r\n      const matchingAccount = facebookAccounts.find(acc =>\r\n        acc.platform_user_id === selectedPage.id\r\n      );\r\n\r\n      if (matchingAccount) {\r\n        // Update the selected page with internal ID\r\n        if (onPageChange) {\r\n          const updatedPage = {\r\n            ...selectedPage,\r\n            internalId: matchingAccount.id\r\n          };\r\n          onPageChange(updatedPage);\r\n        }\r\n        setPageSyncStatus('✓ Page is synchronized');\r\n        return true;\r\n      } else {\r\n        setPageSyncStatus('⚠ Page is not synchronized with database');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking page sync:', error);\r\n      setPageSyncStatus('✗ Failed to check page synchronization');\r\n      return false;\r\n    } finally {\r\n      setIsCheckingPageSync(false);\r\n    }\r\n  }, [selectedPage, onPageChange]);\r\n\r\n  // Handle page selection change\r\n  // eslint-disable-next-line no-unused-vars\r\n  const handlePageSelect = (pageId) => {\r\n    if (onPageChange && availablePages) {\r\n      const newPage = availablePages.find(p => p.id === pageId);\r\n      if (newPage) {\r\n        onPageChange(newPage);\r\n        // Reset composer state when page changes\r\n        setComposerRows([]);\r\n        setSelectedRows([]);\r\n        setScheduledPosts([]);\r\n        setPageSyncStatus('');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Auto-check page sync when selectedPage changes (moved here after checkPageSync definition)\r\n  useEffect(() => {\r\n    if (selectedPage && !selectedPage.internalId) {\r\n      // Delay the sync check to allow for any ongoing backend sync\r\n      const timer = setTimeout(() => {\r\n        checkPageSync();\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(timer);\r\n    } else if (selectedPage && selectedPage.internalId) {\r\n      setPageSyncStatus('✓ Page is synchronized');\r\n    }\r\n  }, [selectedPage, checkPageSync]);\r\n\r\n  return (\r\n    <div className=\"bulk-composer-panel\">\r\n      <div className=\"bulk-composer-header\">\r\n        <div className=\"header-content\">\r\n          <h2>Bulk Composer</h2>\r\n          <p className=\"header-subtitle\">Create and schedule multiple social media posts efficiently</p>\r\n        </div>\r\n\r\n        {!isAuthenticated && (\r\n          <div className=\"auth-warning\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\r\n              <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\r\n            </svg>\r\n            <span>Please log in to schedule posts</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"bulk-composer-scrollable-content\">\r\n        {/* Strategy and Calendar Combined */}\r\n        <div className=\"strategy-calendar-section\">\r\n          <div className=\"strategy-step\">\r\n            <h3>\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n              </svg>\r\n              Step 1: Strategy & Schedule\r\n            </h3>\r\n            <div className=\"strategy-form\">\r\n              <div className=\"form-group\">\r\n                <label>Strategy Template</label>\r\n                <select\r\n                  value={strategyData.promptTemplate}\r\n                  onChange={(e) => handleStrategyChange('promptTemplate', e.target.value)}\r\n                  className=\"form-select\"\r\n                >\r\n                  <option value=\"\">Select a template...</option>\r\n                  {promptTemplates.map(template => (\r\n                    <option key={template.id} value={template.prompt}>\r\n                      {template.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {strategyData.promptTemplate === 'custom' && (\r\n                <div className=\"form-group\">\r\n                  <label>Custom Strategy Template</label>\r\n                  <textarea\r\n                    value={strategyData.customStrategyTemplate}\r\n                    onChange={(e) => handleStrategyChange('customStrategyTemplate', e.target.value)}\r\n                    placeholder=\"Enter your custom strategy template. This will be used by AI to generate captions that follow your specific style and approach...\"\r\n                    className=\"form-textarea\"\r\n                    rows=\"3\"\r\n                  />\r\n                  <small className=\"form-help\">\r\n                    Describe your content strategy, tone, style, and any specific requirements for your posts.\r\n                  </small>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Start Date</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={strategyData.startDate}\r\n                    onChange={(e) => handleStrategyChange('startDate', e.target.value)}\r\n                    className=\"form-input\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>End Date (Optional)</label>\r\n                  <div className=\"end-date-container\">\r\n                    <input\r\n                      type=\"date\"\r\n                      value={strategyData.endDate}\r\n                      onChange={(e) => handleStrategyChange('endDate', e.target.value)}\r\n                      className=\"form-input\"\r\n                      min={strategyData.startDate}\r\n                      disabled={!strategyData.startDate}\r\n                    />\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleStrategyChange('endDate', '')}\r\n                      className=\"btn btn-secondary btn-small\"\r\n                      disabled={!strategyData.endDate}\r\n                      title=\"Clear end date (single day schedule)\"\r\n                    >\r\n                      <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                      </svg>\r\n                      Clear\r\n                    </button>\r\n                  </div>\r\n                  <small className=\"form-help\">\r\n                    Leave empty for single day schedule\r\n                  </small>\r\n                </div>\r\n\r\n                {/* Time Slot should be just below End Date */}\r\n                <div className=\"form-group\">\r\n                  <label>Time Slot (IST - Indian Standard Time)</label>\r\n                  <input\r\n                    type=\"time\"\r\n                    value={strategyData.timeSlot}\r\n                    onChange={(e) => handleStrategyChange('timeSlot', e.target.value)}\r\n                    className=\"form-input\"\r\n                  />\r\n                  <small className=\"form-help\">\r\n                    All times are in IST (UTC+5:30).\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              {strategyData.frequency === 'custom' && (\r\n                <div className=\"form-group\">\r\n                  <label>Custom Cron Expression</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={strategyData.customCron}\r\n                    onChange={(e) => handleStrategyChange('customCron', e.target.value)}\r\n                    placeholder=\"0 9 * * * (daily at 9 AM)\"\r\n                    className=\"form-input\"\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Calendar Preview */}\r\n          <div className=\"calendar-preview-section\">\r\n            <h3>\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\" />\r\n                <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\" />\r\n                <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\" />\r\n              </svg>\r\n              Calendar Preview\r\n            </h3>\r\n            <div className=\"calendar-container\">\r\n              <div className=\"calendar-header\">\r\n                <button\r\n                  onClick={() => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1))}\r\n                  className=\"btn btn-secondary btn-small\"\r\n                >\r\n                  <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <polyline points=\"15,18 9,12 15,6\" />\r\n                  </svg>\r\n                </button>\r\n                <h4>{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</h4>\r\n                <button\r\n                  onClick={() => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1))}\r\n                  className=\"btn btn-secondary btn-small\"\r\n                >\r\n                  <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <polyline points=\"9,18 15,12 9,6\" />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              <div className=\"calendar-grid\">\r\n                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\r\n                  <div key={day} className=\"calendar-day-header\">{day}</div>\r\n                ))}\r\n                {generateCalendarDays(currentMonth.getFullYear(), currentMonth.getMonth()).map((day, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className={`calendar-day ${day.date ? 'clickable' : ''} ${day.date && getPostsForDate(day.date).length > 0 ? 'has-posts' : ''}`}\r\n                  >\r\n                    <span className=\"day-number\">{day.day}</span>\r\n                    {day.date && getPostsForDate(day.date).length > 0 && (\r\n                      <div className=\"post-indicators\">\r\n                        {getPostsForDate(day.date).map((post, postIndex) => (\r\n                          <div\r\n                            key={postIndex}\r\n                            className=\"post-dot\"\r\n                            title={`${post.scheduledTime} - ${post.caption.substring(0, 30)}...`}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            {/* Frequency moved here for cleaner UI */}\r\n            <div className=\"form-row calendar-options-row\">\r\n              <div className=\"form-group\">\r\n                <label>Frequency</label>\r\n                <select\r\n                  value={strategyData.frequency}\r\n                  onChange={(e) => handleStrategyChange('frequency', e.target.value)}\r\n                  className=\"form-select\"\r\n                >\r\n                  <option value=\"daily\">Daily</option>\r\n                  <option value=\"weekly\">Weekly</option>\r\n                  <option value=\"monthly\">Monthly</option>\r\n                  <option value=\"custom\">Custom Cron</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            {strategyData.frequency === 'custom' && (\r\n              <div className=\"form-group\">\r\n                <label>Custom Cron Expression</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={strategyData.customCron}\r\n                  onChange={(e) => handleStrategyChange('customCron', e.target.value)}\r\n                  placeholder=\"0 9 * * * (daily at 9 AM)\"\r\n                  className=\"form-input\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Composer Grid */}\r\n        <div className=\"composer-grid-section\">\r\n          <div className=\"composer-header\">\r\n            <h3>\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                <line x1=\"9\" y1=\"9\" x2=\"9\" y2=\"15\" />\r\n                <line x1=\"15\" y1=\"9\" x2=\"15\" y2=\"15\" />\r\n                <line x1=\"9\" y1=\"12\" x2=\"15\" y2=\"12\" />\r\n              </svg>\r\n              Step 2: Content Grid\r\n            </h3>\r\n            <div className=\"composer-controls\">\r\n              <button\r\n                onClick={() => {\r\n                  const newRow = {\r\n                    id: `row-${Date.now()}-${Math.random()}`,\r\n                    caption: '',\r\n                    mediaFile: null,\r\n                    mediaPreview: null,\r\n                    scheduledDate: new Date().toISOString().split('T')[0],\r\n                    scheduledTime: strategyData.timeSlot,\r\n                    status: 'draft',\r\n                    isSelected: false\r\n                  };\r\n                  setComposerRows(prev => [...prev, newRow]);\r\n                }}\r\n                className=\"btn btn-primary btn-small\"\r\n              >\r\n                <MdAdd size={16} />\r\n              </button>\r\n              <button\r\n                onClick={handleSelectAll}\r\n                className=\"btn btn-secondary btn-small\"\r\n              >\r\n                {selectedRows.length === composerRows.length ? <MdSelectAll size={16} /> : <MdSelectAll size={16} />}\r\n              </button>\r\n              <button\r\n                onClick={handleBulkDelete}\r\n                disabled={selectedRows.length === 0}\r\n                className=\"btn btn-danger btn-small\"\r\n              >\r\n                <MdDelete size={16} />\r\n              </button>\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={handleGenerateAllCaptions}\r\n                disabled={composerRows.length === 0 || selectedRows.length === 0}\r\n              >\r\n                Generate Captions\r\n              </button>\r\n              <button\r\n                className=\"btn btn-secondary\"\r\n                onClick={handleGenerateAllImages}\r\n                disabled={composerRows.length === 0 || selectedRows.length === 0}\r\n              >\r\n                Generate Images\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"composer-grid-container\">\r\n            <div className=\"composer-grid\" ref={gridRef}>\r\n              <div className=\"grid-header grid-row\">\r\n                <div className=\"grid-cell header-cell\"></div>\r\n                <div className=\"grid-cell header-cell\" title=\"Caption\">\r\n                  <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                    <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"9\" />\r\n                    <line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\" />\r\n                  </svg>\r\n                  <span className=\"header-label\">Caption</span>\r\n                </div>\r\n                <div className=\"grid-cell header-cell\" title=\"Media\">\r\n                  <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\r\n                    <polyline points=\"21,15 16,10 5,21\" />\r\n                  </svg>\r\n                  <span className=\"header-label\">Media</span>\r\n                </div>\r\n                <div className=\"grid-cell header-cell\" title=\"Date\">\r\n                  <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n                    <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\" />\r\n                    <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\" />\r\n                    <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\" />\r\n                  </svg>\r\n                  <span className=\"header-label\">Date</span>\r\n                </div>\r\n                <div className=\"grid-cell header-cell\" title=\"Time\">\r\n                  <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <polyline points=\"12,6 12,12 16,14\" />\r\n                  </svg>\r\n                  <span className=\"header-label\">Time</span>\r\n                </div>\r\n                <div className=\"grid-cell header-cell\" title=\"Status\">\r\n                  <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <path d=\"M9 12l2 2 4-4\" />\r\n                  </svg>\r\n                  <span className=\"header-label\">Status</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid-body\">\r\n                {composerRows.map((row, index) => (\r\n                  <div\r\n                    key={row.id}\r\n                    className={`grid-row ${row.isSelected ? 'selected' : ''}`}\r\n                    draggable\r\n                    onDragStart={() => handleDragStart(row.id)}\r\n                    onDragOver={handleDragOver}\r\n                    onDrop={() => handleDrop(row.id)}\r\n                  >\r\n                    <div className=\"grid-cell\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedRows.includes(row.id)}\r\n                        onChange={() => handleRowSelect(row.id)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"grid-cell caption-cell\">\r\n                      <div className=\"caption-container\">\r\n                        <textarea\r\n                          value={row.caption}\r\n                          onChange={(e) => handleCellEdit(row.id, 'caption', e.target.value)}\r\n                          placeholder=\"Enter your post caption...\"\r\n                          className=\"caption-input\"\r\n                          rows=\"3\"\r\n                          style={{ resize: 'none' }}\r\n                        />\r\n                        <button\r\n                          onClick={() => handleExpandCaption(row.id)}\r\n                          className=\"expand-btn\"\r\n                          title=\"Expand caption\"\r\n                        >\r\n                          <MdExpandMore size={16} />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"grid-cell media-cell\">\r\n                      <div className=\"media-options\">\r\n                        {!row.mediaPreview && !row.mediaFile ? (\r\n                          <div className=\"media-option-group\">\r\n                            <input\r\n                              type=\"file\"\r\n                              accept=\"image/*,video/*\"\r\n                              onChange={(e) => handleMediaUpload(row.id, e)}\r\n                              className=\"media-input\"\r\n                              id={`media-upload-${row.id}`}\r\n                            />\r\n                            <label htmlFor={`media-upload-${row.id}`} className=\"media-option-btn upload-btn\">\r\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\r\n                                <polyline points=\"7,10 12,15 17,10\" />\r\n                                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\r\n                              </svg>\r\n                              Upload\r\n                            </label>\r\n                            <button\r\n                              onClick={() => handleGenerateMedia(row.id)}\r\n                              className=\"media-option-btn generate-btn\"\r\n                            >\r\n                              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                              </svg>\r\n                              Generate\r\n                            </button>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"media-preview\">\r\n                            {(() => {\r\n                              console.log(`Rendering media for row ${row.id}:`, {\r\n                                mediaFile: row.mediaFile,\r\n                                mediaPreview: row.mediaPreview,\r\n                                mediaGenerated: row.mediaGenerated,\r\n                                hasMediaPreview: !!row.mediaPreview,\r\n                                hasMediaFile: !!row.mediaFile\r\n                              });\r\n\r\n                              // For generated images (no mediaFile, but has mediaPreview)\r\n                              if (row.mediaPreview && !row.mediaFile) {\r\n                                console.log(`Rendering generated image for row ${row.id}:`, row.mediaPreview);\r\n                                return <img src={row.mediaPreview} alt=\"Generated Preview\" />;\r\n                              }\r\n\r\n                              // For uploaded files\r\n                              if (row.mediaFile?.type?.startsWith('image/')) {\r\n                                console.log(`Rendering uploaded image for row ${row.id}:`, row.mediaPreview);\r\n                                return <img src={row.mediaPreview} alt=\"Uploaded Preview\" />;\r\n                              }\r\n\r\n                              // For videos\r\n                              console.log(`Rendering video for row ${row.id}:`, row.mediaPreview);\r\n                              return <video src={row.mediaPreview} controls />;\r\n                            })()}\r\n                            <button\r\n                              onClick={() => handleViewMedia(row.id)}\r\n                              className=\"view-media-btn\"\r\n                              title=\"View media\"\r\n                            >\r\n                              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\r\n                                <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                              </svg>\r\n                            </button>\r\n                            <button\r\n                              onClick={() => handleRemoveMedia(row.id)}\r\n                              className=\"remove-media-btn\"\r\n                              title=\"Remove media\"\r\n                            >\r\n                              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                              </svg>\r\n                            </button>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"grid-cell date-cell\">\r\n                      <input\r\n                        type=\"date\"\r\n                        value={row.scheduledDate}\r\n                        onChange={(e) => handleCellEdit(row.id, 'scheduledDate', e.target.value)}\r\n                        className=\"date-input\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"grid-cell time-cell\">\r\n                      <input\r\n                        type=\"time\"\r\n                        value={row.scheduledTime}\r\n                        onChange={(e) => handleCellEdit(row.id, 'scheduledTime', e.target.value)}\r\n                        className=\"time-input\"\r\n                        style={{ width: '90px' }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"grid-cell status-cell\">\r\n                      <span className={`status-badge ${getStatusClass(row.status)}`}>\r\n                        {getStatusIcon(row.status)} {row.status}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Queue Confirmation */}\r\n        <div className=\"queue-confirmation\">\r\n          <h3>\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <polyline points=\"12,6 12,12 16,14\" />\r\n            </svg>\r\n            Step 3: Schedule & Publish\r\n          </h3>\r\n          <div className=\"confirmation-stats\">\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Total Posts:</span>\r\n              <span className=\"stat-value\">{composerRows.length}</span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">With Captions:</span>\r\n              <span className=\"stat-value\">{composerRows.filter(row => row.caption.trim()).length}</span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">Ready to Schedule:</span>\r\n              <span className=\"stat-value\">{composerRows.filter(row => row.status === 'ready').length}</span>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              <span className=\"stat-label\">With Media:</span>\r\n              <span className=\"stat-value\">{composerRows.filter(row => row.mediaFile || row.mediaPreview).length}</span>\r\n            </div>\r\n          </div>\r\n\r\n          {isScheduling && (\r\n            <div className=\"schedule-progress\">\r\n              <div className=\"progress-bar\">\r\n                <div\r\n                  className=\"progress-fill\"\r\n                  style={{ width: `${scheduleProgress}%` }}\r\n                />\r\n              </div>\r\n              <span className=\"progress-text\">Scheduling posts... {Math.round(scheduleProgress)}%</span>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"confirmation-actions\">\r\n            <button\r\n              onClick={handleScheduleAll}\r\n              disabled={isScheduling || composerRows.filter(row => row.status === 'ready').length === 0 || !isAuthenticated}\r\n              className=\"btn btn-primary btn-large\"\r\n            >\r\n              {isScheduling ? (\r\n                <>\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                  Scheduling...\r\n                </>\r\n              ) : !isAuthenticated ? (\r\n                <>\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4\" />\r\n                    <polyline points=\"10,17 15,12 10,7\" />\r\n                    <line x1=\"15\" y1=\"12\" x2=\"3\" y2=\"12\" />\r\n                  </svg>\r\n                  Please Log In to Schedule\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <polyline points=\"12,6 12,12 16,14\" />\r\n                  </svg>\r\n                  Schedule Ready Posts ({composerRows.filter(row => row.status === 'ready').length})\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Scheduled Posts View */}\r\n        <div className=\"scheduled-posts-section\">\r\n          <div className=\"scheduled-posts-header\">\r\n            <h3>\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\" />\r\n                <polyline points=\"14,2 14,8 20,8\" />\r\n                <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\" />\r\n                <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\" />\r\n                <polyline points=\"10,9 9,9 8,9\" />\r\n              </svg>\r\n              Scheduled Posts\r\n            </h3>\r\n            <div className=\"scheduled-posts-controls\">\r\n              <button\r\n                onClick={() => setShowScheduledPosts(!showScheduledPosts)}\r\n                className=\"btn btn-secondary btn-small\"\r\n              >\r\n                {showScheduledPosts ? 'Hide' : 'Show'} Scheduled Posts ({scheduledPosts.length})\r\n              </button>\r\n              <button\r\n                onClick={loadScheduledPosts}\r\n                disabled={loadingScheduledPosts}\r\n                className=\"btn btn-secondary btn-small\"\r\n              >\r\n                {loadingScheduledPosts ? (\r\n                  <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                ) : (\r\n                  <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M23 4v6h-6\" />\r\n                    <path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\" />\r\n                  </svg>\r\n                )}\r\n                Refresh\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {showScheduledPosts && (\r\n            <div className=\"scheduled-posts-container\">\r\n              {loadingScheduledPosts ? (\r\n                <div className=\"loading-scheduled-posts\">\r\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                  Loading scheduled posts...\r\n                </div>\r\n              ) : pagedBatchKeys.length > 0 ? (\r\n                <div className=\"scheduled-posts-list\">\r\n                  {pagedBatchKeys.length > 0 && (\r\n                    <div className=\"schedule-pagination-controls\">\r\n                      <button onClick={() => setSchedulePage(p => Math.max(1, p - 1))} disabled={schedulePage === 1}>Prev</button>\r\n                      <span>Page {schedulePage} of {totalPages}</span>\r\n                      <button onClick={() => setSchedulePage(p => Math.min(totalPages, p + 1))} disabled={schedulePage === totalPages}>Next</button>\r\n                      <span style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n                        <MdSort size={20} />\r\n                        <select value={scheduleSort} onChange={e => { setScheduleSort(e.target.value); }}>\r\n                          <option value=\"desc\">Newest First</option>\r\n                          <option value=\"asc\">Oldest First</option>\r\n                        </select>\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                  {pagedBatchKeys.map((batchKey, idx) => {\r\n                    const batchPosts = groupedBatches[batchKey];\r\n                    const isExpanded = expandedSchedule === batchKey;\r\n                    // Get date range for summary\r\n                    const dates = batchPosts.map(p => p.scheduled_date).sort();\r\n                    const dateRange = dates.length > 1 ? `${dates[0]} - ${dates[dates.length - 1]}` : dates[0];\r\n                    return (\r\n                      <div key={batchKey} className={`scheduled-post-group${isExpanded ? ' expanded' : ''}`}>\r\n                        <div className=\"schedule-group-header\">\r\n                          <div className=\"schedule-info\">\r\n                            <h4 className=\"schedule-date\">\r\n                              {dateRange}\r\n                            </h4>\r\n                            <div className=\"schedule-stats\">\r\n                              <span className=\"post-count\">{batchPosts.length} scheduled</span>\r\n                              <span className=\"status-breakdown\">\r\n                                {(() => {\r\n                                  const statuses = batchPosts.reduce((acc, post) => {\r\n                                    acc[post.status] = (acc[post.status] || 0) + 1;\r\n                                    return acc;\r\n                                  }, {});\r\n                                  return Object.entries(statuses).map(([status, count]) => (\r\n                                    <span key={status} className={`status-chip ${status.toLowerCase()}`}>{count} {status}</span>\r\n                                  ));\r\n                                })()}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"expand-controls\">\r\n                            <button\r\n                              onClick={() => toggleScheduleExpansion(batchKey)}\r\n                              className={`expand-btn${isExpanded ? ' expanded' : ''}`}\r\n                              title={isExpanded ? 'Collapse' : 'Expand'}\r\n                            >\r\n                              <MdExpandMore size={16} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        {isExpanded && (\r\n                          <div className=\"schedule-content-grid\">\r\n                            <div className=\"content-grid-header\">\r\n                              <div className=\"grid-header-cell\">Status</div>\r\n                              <div className=\"grid-header-cell\">Caption</div>\r\n                              <div className=\"grid-header-cell\">Time</div>\r\n                              <div className=\"grid-header-cell\">Media</div>\r\n                              <div className=\"grid-header-cell\">Actions</div>\r\n                            </div>\r\n                            {batchPosts\r\n                              .sort((a, b) => a.scheduled_time.localeCompare(b.scheduled_time))\r\n                              .map((post) => (\r\n                                <div key={post.id} className=\"content-grid-row\">\r\n                                  <div className=\"grid-cell status-cell\">\r\n                                    <span className={`post-status-badge ${post.status.toLowerCase()}`}>{getStatusIcon(post.status)} {post.status}</span>\r\n                                  </div>\r\n                                  <div className=\"grid-cell caption-cell\">\r\n                                    {editingPost && editingPost.id === post.id ? (\r\n                                      <textarea\r\n                                        value={editingPost.caption}\r\n                                        onChange={(e) => setEditingPost(prev => ({ ...prev, caption: e.target.value }))}\r\n                                        className=\"inline-caption-editor\"\r\n                                        rows=\"4\"\r\n                                        placeholder=\"Enter your caption...\"\r\n                                      />\r\n                                    ) : (\r\n                                      <div className=\"caption-preview\" onClick={() => post.status === 'scheduled' ? startEditingPost(post) : null} style={{ cursor: post.status === 'scheduled' ? 'pointer' : 'not-allowed', opacity: post.status === 'scheduled' ? 1 : 0.6 }}>\r\n                                        {post.caption.length > 100 ? `${post.caption.substring(0, 100)}...` : post.caption}\r\n                                      </div>\r\n                                    )}\r\n                                  </div>\r\n                                  <div className=\"grid-cell time-cell\">\r\n                                    <span className=\"schedule-time\">{post.scheduled_time}</span>\r\n                                  </div>\r\n                                  <div className=\"grid-cell media-cell\">\r\n                                    {post.media_file ? (\r\n                                      post.media_file.startsWith('data:image') || post.media_file.match(/\\.(jpg|jpeg|png|gif|webp)$/i) ? (\r\n                                        <img src={post.media_file} alt=\"Media\" style={{ maxWidth: 60, maxHeight: 60, borderRadius: 6, border: '1px solid #eee' }} />\r\n                                      ) : post.media_file.startsWith('data:video') || post.media_file.match(/\\.(mp4|webm|ogg)$/i) ? (\r\n                                        <video src={post.media_file} controls style={{ maxWidth: 80, maxHeight: 60, borderRadius: 6, border: '1px solid #eee' }} />\r\n                                      ) : (\r\n                                        <a href={post.media_file} target=\"_blank\" rel=\"noopener noreferrer\">View Media</a>\r\n                                      )\r\n                                    ) : (\r\n                                      <span className=\"no-media\">Text only</span>\r\n                                    )}\r\n                                  </div>\r\n                                  <div className=\"grid-cell actions-cell\">\r\n                                    {editingPost && editingPost.id === post.id ? (\r\n                                      <div className=\"edit-actions\">\r\n                                        <button onClick={savePostEdit} className=\"btn btn-success btn-small\">\r\n                                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                            <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\" />\r\n                                            <polyline points=\"17,21 17,13 7,13 7,21\" />\r\n                                            <polyline points=\"7,3 7,8 15,8\" />\r\n                                          </svg>\r\n                                          <span>Save</span>\r\n                                        </button>\r\n                                        <button onClick={cancelPostEdit} className=\"btn btn-secondary btn-small\">\r\n                                          <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n                                          </svg>\r\n                                          <span>Cancel</span>\r\n                                        </button>\r\n                                      </div>\r\n                                    ) : (\r\n                                      post.status === 'scheduled' && (\r\n                                        <div className=\"post-actions\">\r\n                                          <button onClick={() => startEditingPost(post)} className=\"btn btn-primary btn-small\" title=\"Edit caption\">\r\n                                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\r\n                                              <path d=\"m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\r\n                                            </svg>\r\n                                          </button>\r\n                                          <button onClick={() => cancelScheduledPost(post.id, post.caption)} className=\"btn btn-danger btn-small\" title=\"Cancel scheduled post\">\r\n                                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                                              <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\r\n                                              <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\r\n                                            </svg>\r\n                                          </button>\r\n                                        </div>\r\n                                      )\r\n                                    )}\r\n                                  </div>\r\n                                  {post.error_message && (\r\n                                    <div className=\"grid-cell error-cell full-width\">\r\n                                      <div className=\"error-message\">\r\n                                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                                          <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                                          <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\r\n                                          <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\r\n                                        </svg>\r\n                                        {post.error_message}\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              ))}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              ) : (\r\n                <div className=\"no-scheduled-posts\">\r\n                  <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <polyline points=\"12,6 12,12 16,14\" />\r\n                  </svg>\r\n                  <p>No scheduled posts yet. Create and schedule some posts above!</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Expanded Caption Modal */}\r\n      {expandedCaption && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Edit Caption</h3>\r\n              <button\r\n                onClick={() => setExpandedCaption(null)}\r\n                className=\"modal-close\"\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <div className=\"caption-info\">\r\n                <p><strong>Scheduled:</strong> {expandedCaption.scheduledDate} at {expandedCaption.scheduledTime}</p>\r\n              </div>\r\n              <textarea\r\n                value={expandedCaption.caption}\r\n                onChange={(e) => setExpandedCaption(prev => ({ ...prev, caption: e.target.value }))}\r\n                className=\"expanded-caption-textarea\"\r\n                rows=\"10\"\r\n                placeholder=\"Enter your caption...\"\r\n              />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                onClick={() => setExpandedCaption(null)}\r\n                className=\"btn btn-secondary\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                onClick={() => handleSaveExpandedCaption(expandedCaption.caption)}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Save Changes\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Media Preview Modal */}\r\n      {mediaPreviewModal && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content media-preview-modal\">\r\n            <div className=\"modal-header\">\r\n              <h3>Media Preview</h3>\r\n              <button\r\n                onClick={() => setMediaPreviewModal(null)}\r\n                className=\"modal-close\"\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {mediaPreviewModal.mediaType === 'image' ? (\r\n                <img\r\n                  src={mediaPreviewModal.mediaUrl}\r\n                  alt=\"Media preview\"\r\n                  className=\"modal-media\"\r\n                />\r\n              ) : (\r\n                <video\r\n                  src={mediaPreviewModal.mediaUrl}\r\n                  controls\r\n                  className=\"modal-media\"\r\n                />\r\n              )}\r\n              {mediaPreviewModal.caption && (\r\n                <div className=\"modal-caption\">\r\n                  <h4>Caption:</h4>\r\n                  <p>{mediaPreviewModal.caption}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                onClick={() => setMediaPreviewModal(null)}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BulkComposer; ","import React from 'react';\r\nimport './AIGenerateTab.css';\r\n\r\nconst AIGenerateTab = ({ \r\n  formData, \r\n  setFormData, \r\n  onGenerate, \r\n  onGenerateImage, \r\n  onGenerateImageWithCaption, \r\n  onPublish, \r\n  isPublishing,\r\n  postHistory,\r\n  isLoadingPosts,\r\n  onRefreshPosts\r\n}) => {\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleMediaTypeChange = (type) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      mediaType: type,\r\n      mediaFile: null,\r\n      generatedImageUrl: type === 'ai_image' ? prev.generatedImageUrl : null,\r\n      generatedImageFilename: type === 'ai_image' ? prev.generatedImageFilename : null,\r\n      imagePrompt: type === 'ai_image' ? prev.imagePrompt : ''\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"ai-generate-container\">\r\n      <div className=\"ai-generate-form\">\r\n        <div className=\"form-header\">\r\n          <div className=\"form-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n            </svg>\r\n          </div>\r\n          <div className=\"form-title-section\">\r\n            <h3 className=\"form-title\">AI Content Generation</h3>\r\n            <p className=\"form-subtitle\">Create engaging posts with AI assistance</p>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Content Prompt */}\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">\r\n            <span className=\"label-text\">Content Prompt</span>\r\n            <span className=\"label-hint\">Describe what you want to post about</span>\r\n          </label>\r\n          <div className=\"textarea-container\">\r\n            <textarea\r\n              name=\"prompt\"\r\n              value={formData.prompt}\r\n              onChange={handleInputChange}\r\n              placeholder=\"e.g., Create a motivational post about achieving goals in 2024...\"\r\n              className=\"form-textarea\"\r\n              rows=\"3\"\r\n            />\r\n            <div className=\"textarea-counter\">\r\n              {formData.prompt.length}/500\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Generate Content Button */}\r\n        <div className=\"form-group\">\r\n          <button\r\n            onClick={onGenerate}\r\n            disabled={!formData.prompt.trim() || formData.isGenerating}\r\n            className=\"action-btn primary\"\r\n          >\r\n            <div className=\"btn-content\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n              </svg>\r\n              <span>{formData.isGenerating ? 'Generating...' : 'Generate Content'}</span>\r\n            </div>\r\n            {formData.isGenerating && (\r\n              <div className=\"btn-loading\">\r\n                <div className=\"loading-spinner\"></div>\r\n              </div>\r\n            )}\r\n          </button>\r\n        </div>\r\n\r\n        {/* Generated Content Display */}\r\n        {formData.generatedContent && (\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">\r\n              <span className=\"label-text\">Generated Content</span>\r\n              <span className=\"label-hint\">Review and edit if needed</span>\r\n            </label>\r\n            <div className=\"generated-content-container\">\r\n              <textarea\r\n                value={formData.generatedContent}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, generatedContent: e.target.value }))}\r\n                className=\"form-textarea generated-content\"\r\n                rows=\"4\"\r\n              />\r\n              <div className=\"content-actions\">\r\n                <button\r\n                  onClick={onGenerate}\r\n                  disabled={formData.isGenerating}\r\n                  className=\"action-btn secondary small\"\r\n                >\r\n                  <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M23 4v6h-6\"/>\r\n                    <path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\"/>\r\n                  </svg>\r\n                  Regenerate\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Media Options */}\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">\r\n            <span className=\"label-text\">Media Options</span>\r\n            <span className=\"label-hint\">Add visual content to your post</span>\r\n          </label>\r\n          <div className=\"media-options\">\r\n            <button\r\n              type=\"button\"\r\n              className={`media-option ${formData.mediaType === 'none' ? 'active' : ''}`}\r\n              onClick={() => handleMediaTypeChange('none')}\r\n            >\r\n              <div className=\"media-option-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/>\r\n                  <polyline points=\"14,2 14,8 20,8\"/>\r\n                  <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"/>\r\n                  <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"/>\r\n                </svg>\r\n              </div>\r\n              <div className=\"media-option-content\">\r\n                <span className=\"media-option-title\">Text Only</span>\r\n                <span className=\"media-option-desc\">No media attachment</span>\r\n              </div>\r\n            </button>\r\n            \r\n            <button\r\n              type=\"button\"\r\n              className={`media-option ${formData.mediaType === 'ai_image' ? 'active' : ''}`}\r\n              onClick={() => handleMediaTypeChange('ai_image')}\r\n            >\r\n              <div className=\"media-option-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n                </svg>\r\n              </div>\r\n              <div className=\"media-option-content\">\r\n                <span className=\"media-option-title\">AI Image</span>\r\n                <span className=\"media-option-desc\">Generate with AI</span>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* AI Image Generation */}\r\n        {formData.mediaType === 'ai_image' && (\r\n          <div className=\"ai-image-section\">\r\n            <div className=\"form-group\">\r\n              <label className=\"form-label\">\r\n                <span className=\"label-text\">Image Prompt</span>\r\n                <span className=\"label-hint\">Describe the image you want to generate</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"imagePrompt\"\r\n                value={formData.imagePrompt}\r\n                onChange={handleInputChange}\r\n                placeholder=\"e.g., A modern office workspace with natural lighting...\"\r\n                className=\"form-input\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n              <button\r\n                onClick={() => onGenerateImage('auto')}\r\n                disabled={!formData.imagePrompt.trim() || formData.isGeneratingImage}\r\n                className=\"action-btn secondary\"\r\n              >\r\n                <div className=\"btn-content\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n                    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/>\r\n                    <polyline points=\"21,15 16,10 5,21\"/>\r\n                  </svg>\r\n                  <span>{formData.isGeneratingImage ? 'Generating...' : 'Generate Image'}</span>\r\n                </div>\r\n                {formData.isGeneratingImage && (\r\n                  <div className=\"btn-loading\">\r\n                    <div className=\"loading-spinner\"></div>\r\n                  </div>\r\n                )}\r\n              </button>\r\n            </div>\r\n            \r\n            {formData.generatedImageUrl && (\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">\r\n                  <span className=\"label-text\">Generated Image</span>\r\n                </label>\r\n                <div className=\"image-preview-container\">\r\n                  <img \r\n                    src={formData.generatedImageUrl} \r\n                    alt=\"Generated\" \r\n                    className=\"preview-image\"\r\n                  />\r\n                  <div className=\"image-actions\">\r\n                    <button\r\n                      onClick={() => onGenerateImage('auto')}\r\n                      disabled={formData.isGeneratingImage}\r\n                      className=\"action-btn secondary small\"\r\n                    >\r\n                      <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                        <path d=\"M23 4v6h-6\"/>\r\n                        <path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\"/>\r\n                      </svg>\r\n                      Regenerate\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"quick-actions\">\r\n          <button\r\n            onClick={onGenerateImageWithCaption}\r\n            disabled={!formData.prompt.trim() || formData.isGenerating || formData.isGeneratingImage}\r\n            className=\"action-btn success\"\r\n          >\r\n            <div className=\"btn-content\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n              </svg>\r\n              <span>Generate Content + Image</span>\r\n            </div>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Publish Button */}\r\n        <div className=\"publish-section\">\r\n          <button\r\n            onClick={onPublish}\r\n            disabled={!formData.generatedContent || isPublishing}\r\n            className=\"publish-btn\"\r\n          >\r\n            <div className=\"btn-content\">\r\n              <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M22 2L11 13\"/>\r\n                <polygon points=\"22,2 15,22 11,13 2,9\"/>\r\n              </svg>\r\n              <span>{isPublishing ? 'Publishing...' : 'Publish Post'}</span>\r\n            </div>\r\n            {isPublishing && (\r\n              <div className=\"btn-loading\">\r\n                <div className=\"loading-spinner\"></div>\r\n              </div>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Post History */}\r\n      <div className=\"post-history-section\">\r\n        <div className=\"post-history-header\">\r\n          <div className=\"history-title\">\r\n            <h4>Recent AI Posts</h4>\r\n            <span className=\"post-count\">{postHistory.length} posts</span>\r\n          </div>\r\n          <button\r\n            onClick={onRefreshPosts}\r\n            disabled={isLoadingPosts}\r\n            className=\"refresh-btn\"\r\n          >\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <path d=\"M23 4v6h-6\"/>\r\n              <path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\"/>\r\n            </svg>\r\n            {!isLoadingPosts && 'Refresh'}\r\n          </button>\r\n        </div>\r\n        \r\n        {isLoadingPosts ? (\r\n          <div className=\"loading-posts\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <span>Loading posts...</span>\r\n          </div>\r\n        ) : postHistory.length > 0 ? (\r\n          <div className=\"posts-list\">\r\n            {postHistory.map((post, index) => (\r\n              <div key={index} className=\"post-item\">\r\n                <div className=\"post-content\">\r\n                  <p className=\"post-text\">{post.content}</p>\r\n                  {post.media_urls && post.media_urls.length > 0 && (\r\n                    <div className=\"post-media\">\r\n                      <img src={post.media_urls[0]} alt=\"Post media\" className=\"post-image\" />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-date\">\r\n                    {new Date(post.created_at || post.next_execution).toLocaleDateString()}\r\n                  </span>\r\n                  <span className={`post-status ${post.status}`}>{post.status}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-posts\">\r\n            <div className=\"no-posts-icon\">\r\n              <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\">\r\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n              </svg>\r\n            </div>\r\n            <h4>No AI posts yet</h4>\r\n            <p>Create your first AI-generated post to get started</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIGenerateTab;","import React from 'react';\r\nimport './ManualPostTab.css';\r\n\r\nconst ManualPostTab = ({ \r\n  formData, \r\n  setFormData, \r\n  onPublish, \r\n  isPublishing,\r\n  postHistory,\r\n  isLoadingPosts,\r\n  onRefreshPosts,\r\n  onMediaTypeChange\r\n}) => {\r\n  const handleInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: files ? files[0] : value\r\n    }));\r\n  };\r\n\r\n  const handleMediaTypeSelect = (type) => {\r\n    if (onMediaTypeChange) {\r\n      onMediaTypeChange(type, 'manual');\r\n    } else {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        mediaType: type,\r\n        mediaFile: null\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"manual-post-container\">\r\n      <div className=\"manual-post-form\">\r\n        <div className=\"form-header\">\r\n          <div className=\"form-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"/>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"/>\r\n            </svg>\r\n          </div>\r\n          <div className=\"form-title-section\">\r\n            <h3 className=\"form-title\">Manual Post</h3>\r\n            <p className=\"form-subtitle\">Create and share your own content</p>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Message Input */}\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">\r\n            <span className=\"label-text\">Post Message</span>\r\n            <span className=\"label-hint\">Share what's on your mind</span>\r\n          </label>\r\n          <div className=\"textarea-container\">\r\n            <textarea\r\n              name=\"message\"\r\n              value={formData.message}\r\n              onChange={handleInputChange}\r\n              placeholder=\"What's happening? Share your thoughts, updates, or announcements...\"\r\n              className=\"form-textarea\"\r\n              rows=\"5\"\r\n            />\r\n            <div className=\"textarea-counter\">\r\n              {formData.message.length}/2000\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Media Options */}\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">\r\n            <span className=\"label-text\">Add Media</span>\r\n            <span className=\"label-hint\">Enhance your post with visual content</span>\r\n          </label>\r\n          <div className=\"media-options\">\r\n            <button\r\n              type=\"button\"\r\n              className={`media-option ${formData.mediaType === 'none' ? 'active' : ''}`}\r\n              onClick={() => handleMediaTypeSelect('none')}\r\n            >\r\n              <div className=\"media-option-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/>\r\n                  <polyline points=\"14,2 14,8 20,8\"/>\r\n                  <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"/>\r\n                  <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"/>\r\n                </svg>\r\n              </div>\r\n              <div className=\"media-option-content\">\r\n                <span className=\"media-option-title\">Text Only</span>\r\n                <span className=\"media-option-desc\">No media attachment</span>\r\n              </div>\r\n            </button>\r\n            \r\n            <button\r\n              type=\"button\"\r\n              className={`media-option ${formData.mediaType === 'photo' ? 'active' : ''}`}\r\n              onClick={() => handleMediaTypeSelect('photo')}\r\n            >\r\n              <div className=\"media-option-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n                  <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/>\r\n                  <polyline points=\"21,15 16,10 5,21\"/>\r\n                </svg>\r\n              </div>\r\n              <div className=\"media-option-content\">\r\n                <span className=\"media-option-title\">Upload Photo</span>\r\n                <span className=\"media-option-desc\">Add an image</span>\r\n              </div>\r\n            </button>\r\n            \r\n            <button\r\n              type=\"button\"\r\n              className={`media-option ${formData.mediaType === 'video' ? 'active' : ''}`}\r\n              onClick={() => handleMediaTypeSelect('video')}\r\n            >\r\n              <div className=\"media-option-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <polygon points=\"23,7 16,12 23,17 23,7\"/>\r\n                  <rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"/>\r\n                </svg>\r\n              </div>\r\n              <div className=\"media-option-content\">\r\n                <span className=\"media-option-title\">Upload Video</span>\r\n                <span className=\"media-option-desc\">Add a video</span>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Photo Upload */}\r\n        {formData.mediaType === 'photo' && (\r\n          <div className=\"media-upload-section\">\r\n            <div className=\"form-group\">\r\n              <label className=\"form-label\">\r\n                <span className=\"label-text\">Upload Photo</span>\r\n                <span className=\"label-hint\">Select an image file (JPG, PNG, GIF)</span>\r\n              </label>\r\n              <div className=\"file-upload-area\">\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"mediaFile\"\r\n                  accept=\"image/*\"\r\n                  onChange={handleInputChange}\r\n                  className=\"file-input\"\r\n                  id=\"photo-upload\"\r\n                />\r\n                <label htmlFor=\"photo-upload\" className=\"file-upload-label\">\r\n                  <div className=\"upload-icon\">\r\n                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                      <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n                      <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/>\r\n                      <polyline points=\"21,15 16,10 5,21\"/>\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"upload-text\">\r\n                    <span className=\"upload-title\">Click to upload photo</span>\r\n                    <span className=\"upload-subtitle\">or drag and drop</span>\r\n                  </div>\r\n                </label>\r\n              </div>\r\n              {formData.mediaFile && (\r\n                <div className=\"media-preview\">\r\n                  <div className=\"preview-header\">\r\n                    <span className=\"preview-title\">Selected Photo</span>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => setFormData(prev => ({ ...prev, mediaFile: null }))}\r\n                      className=\"remove-media-btn\"\r\n                    >\r\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"image-preview-container\">\r\n                    <img \r\n                      src={URL.createObjectURL(formData.mediaFile)} \r\n                      alt=\"Preview\" \r\n                      className=\"preview-image\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"media-info\">\r\n                    <span className=\"file-name\">{formData.mediaFile.name}</span>\r\n                    <span className=\"file-size\">\r\n                      {(formData.mediaFile.size / (1024 * 1024)).toFixed(2)} MB\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Video Upload */}\r\n        {formData.mediaType === 'video' && (\r\n          <div className=\"media-upload-section\">\r\n            <div className=\"form-group\">\r\n              <label className=\"form-label\">\r\n                <span className=\"label-text\">Upload Video</span>\r\n                <span className=\"label-hint\">Select a video file (MP4, MOV, AVI)</span>\r\n              </label>\r\n              <div className=\"file-upload-area\">\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"mediaFile\"\r\n                  accept=\"video/*\"\r\n                  onChange={handleInputChange}\r\n                  className=\"file-input\"\r\n                  id=\"video-upload\"\r\n                />\r\n                <label htmlFor=\"video-upload\" className=\"file-upload-label\">\r\n                  <div className=\"upload-icon\">\r\n                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                      <polygon points=\"23,7 16,12 23,17 23,7\"/>\r\n                      <rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"/>\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"upload-text\">\r\n                    <span className=\"upload-title\">Click to upload video</span>\r\n                    <span className=\"upload-subtitle\">or drag and drop</span>\r\n                  </div>\r\n                </label>\r\n              </div>\r\n              {formData.mediaFile && (\r\n                <div className=\"media-preview\">\r\n                  <div className=\"preview-header\">\r\n                    <span className=\"preview-title\">Selected Video</span>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => setFormData(prev => ({ ...prev, mediaFile: null }))}\r\n                      className=\"remove-media-btn\"\r\n                    >\r\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"video-preview-container\">\r\n                    <video \r\n                      src={URL.createObjectURL(formData.mediaFile)} \r\n                      controls\r\n                      className=\"preview-video\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"media-info\">\r\n                    <span className=\"file-name\">{formData.mediaFile.name}</span>\r\n                    <span className=\"file-size\">\r\n                      {(formData.mediaFile.size / (1024 * 1024)).toFixed(2)} MB\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Publish Button */}\r\n        <div className=\"publish-section\">\r\n          <button\r\n            onClick={onPublish}\r\n            disabled={!formData.message.trim() || isPublishing}\r\n            className=\"publish-btn\"\r\n          >\r\n            <div className=\"btn-content\">\r\n              <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M22 2L11 13\"/>\r\n                <polygon points=\"22,2 15,22 11,13 2,9\"/>\r\n              </svg>\r\n              <span>{isPublishing ? 'Publishing...' : 'Publish Post'}</span>\r\n            </div>\r\n            {isPublishing && (\r\n              <div className=\"btn-loading\">\r\n                <div className=\"loading-spinner\"></div>\r\n              </div>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Post History */}\r\n      <div className=\"post-history-section\">\r\n        <div className=\"post-history-header\">\r\n          <div className=\"history-title\">\r\n            <h4>Recent Manual Posts</h4>\r\n            <span className=\"post-count\">{postHistory.length} posts</span>\r\n          </div>\r\n          <button\r\n            onClick={onRefreshPosts}\r\n            disabled={isLoadingPosts}\r\n            className=\"refresh-btn\"\r\n          >\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <path d=\"M23 4v6h-6\"/>\r\n              <path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\"/>\r\n            </svg>\r\n            {!isLoadingPosts && 'Refresh'}\r\n          </button>\r\n        </div>\r\n        \r\n        {isLoadingPosts ? (\r\n          <div className=\"loading-posts\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <span>Loading posts...</span>\r\n          </div>\r\n        ) : postHistory.length > 0 ? (\r\n          <div className=\"posts-list\">\r\n            {postHistory.map((post, index) => (\r\n              <div key={index} className=\"post-item\">\r\n                <div className=\"post-content\">\r\n                  <p className=\"post-text\">{post.content}</p>\r\n                  {post.media_urls && post.media_urls.length > 0 && (\r\n                    <div className=\"post-media\">\r\n                      <img src={post.media_urls[0]} alt=\"Post media\" className=\"post-image\" />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-date\">\r\n                    {new Date(post.created_at || post.next_execution).toLocaleDateString()}\r\n                  </span>\r\n                  <span className={`post-status ${post.status}`}>{post.status}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-posts\">\r\n            <div className=\"no-posts-icon\">\r\n              <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\">\r\n                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"/>\r\n                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"/>\r\n              </svg>\r\n            </div>\r\n            <h4>No manual posts yet</h4>\r\n            <p>Create your first manual post to get started</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManualPostTab;","import React from 'react';\r\nimport './AutomateTab.css';\r\n\r\nconst AutomateTab = ({ \r\n  autoReplySettings,\r\n  autoReplyMessageRule,\r\n  autoReplyMessagesEnabled,\r\n  autoReplyMessagesLoading,\r\n  autoReplyMessagesError,\r\n  onToggleAutoReplyMessages\r\n}) => {\r\n  return (\r\n    <div className=\"automate-container\">\r\n      <div className=\"automate-header\">\r\n        <div className=\"automate-icon\">\r\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n            <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"/>\r\n          </svg>\r\n        </div>\r\n        <div className=\"automate-title-section\">\r\n          <h3 className=\"automate-title\">Automation Settings</h3>\r\n          <p className=\"automate-subtitle\">Configure automated responses and interactions</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"automation-cards\">\r\n        {/* Auto-Reply Comments Card */}\r\n        <div className=\"automation-card\">\r\n          <div className=\"automation-card-header\">\r\n            <div className=\"automation-card-icon comments\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"automation-card-content\">\r\n              <h4 className=\"automation-card-title\">Auto-Reply Comments</h4>\r\n              <p className=\"automation-card-description\">\r\n                Automatically respond to comments on your posts with AI-generated replies\r\n              </p>\r\n            </div>\r\n            <div className=\"automation-status\">\r\n              <div className=\"status-indicator always-on\">\r\n                <div className=\"status-dot active\"></div>\r\n                <span className=\"status-text\">Always On</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"automation-card-body\">\r\n            <div className=\"feature-highlight\">\r\n              <div className=\"highlight-icon\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"/>\r\n                  <polyline points=\"22,4 12,14.01 9,11.01\"/>\r\n                </svg>\r\n              </div>\r\n              <div className=\"highlight-content\">\r\n                <span className=\"highlight-title\">Smart AI Responses</span>\r\n                <span className=\"highlight-description\">\r\n                  Every new post automatically gets AI-powered comment replies to boost engagement\r\n                </span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"automation-info\">\r\n              <div className=\"info-icon\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n                  <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"/>\r\n                  <circle cx=\"12\" cy=\"16\" r=\"1\"/>\r\n                </svg>\r\n              </div>\r\n              <span className=\"info-text\">\r\n                This feature is enabled by default for all posts to maximize engagement and interaction with your audience.\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Auto-Reply Messages Card */}\r\n        <div className=\"automation-card\">\r\n          <div className=\"automation-card-header\">\r\n            <div className=\"automation-card-icon messages\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"/>\r\n                <polyline points=\"22,6 12,13 2,6\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"automation-card-content\">\r\n              <h4 className=\"automation-card-title\">Auto-Reply Messages</h4>\r\n              <p className=\"automation-card-description\">\r\n                Automatically respond to direct messages with customized replies\r\n              </p>\r\n            </div>\r\n            <div className=\"automation-toggle\">\r\n              <label className=\"toggle-switch\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={autoReplyMessagesEnabled}\r\n                  disabled={autoReplyMessagesLoading || !autoReplyMessageRule}\r\n                  onChange={onToggleAutoReplyMessages}\r\n                />\r\n                <span className=\"toggle-slider\"></span>\r\n              </label>\r\n              <div className=\"toggle-status\">\r\n                <span className={`status-text ${autoReplyMessagesEnabled ? 'enabled' : 'disabled'}`}>\r\n                  {autoReplyMessagesEnabled ? 'On' : 'Off'}\r\n                </span>\r\n                {autoReplyMessagesLoading && (\r\n                  <div className=\"loading-spinner small\"></div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"automation-card-body\">\r\n            {autoReplyMessagesError && (\r\n              <div className=\"error-message\">\r\n                <div className=\"error-icon\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n                    <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/>\r\n                    <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/>\r\n                  </svg>\r\n                </div>\r\n                <span>{autoReplyMessagesError}</span>\r\n              </div>\r\n            )}\r\n            \r\n            <div className=\"message-template-section\">\r\n              <div className=\"template-header\">\r\n                <h5 className=\"template-title\">Message Template</h5>\r\n                <span className=\"template-hint\">This template will be used for auto-replies</span>\r\n              </div>\r\n              <div className=\"template-preview\">\r\n                <div className=\"template-content\">\r\n                  {autoReplyMessageRule?.actions?.message_template || \r\n                   \"Thank you for your message! We'll get back to you soon.\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"automation-note\">\r\n              <div className=\"note-icon\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n                  <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"/>\r\n                  <circle cx=\"12\" cy=\"16\" r=\"1\"/>\r\n                </svg>\r\n              </div>\r\n              <span className=\"note-text\">\r\n                To customize the auto-reply template or modify the automation logic, please contact your administrator.\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Automation Stats */}\r\n      <div className=\"automation-stats\">\r\n        <div className=\"stats-header\">\r\n          <h4 className=\"stats-title\">Automation Activity</h4>\r\n          <span className=\"stats-subtitle\">Recent automation performance</span>\r\n        </div>\r\n        \r\n        <div className=\"stats-grid\">\r\n          <div className=\"stat-card\">\r\n            <div className=\"stat-icon\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"stat-content\">\r\n              <div className=\"stat-value\">--</div>\r\n              <div className=\"stat-label\">Comments Replied</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"stat-card\">\r\n            <div className=\"stat-icon\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"/>\r\n                <polyline points=\"22,6 12,13 2,6\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"stat-content\">\r\n              <div className=\"stat-value\">--</div>\r\n              <div className=\"stat-label\">Messages Replied</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"stat-card\">\r\n            <div className=\"stat-icon\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"stat-content\">\r\n              <div className=\"stat-value\">--</div>\r\n              <div className=\"stat-label\">Engagement Rate</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutomateTab;","// Facebook SDK and utility functions\r\n\r\n/**\r\n * Load Facebook SDK\r\n * @param {string} appId - Facebook App ID\r\n * @returns {Promise} - Promise that resolves when SDK is loaded\r\n */\r\nexport const loadFacebookSDK = (appId) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Check if SDK is already loaded\r\n    if (window.FB) {\r\n      resolve(window.FB);\r\n      return;\r\n    }\r\n\r\n    // Load Facebook SDK script\r\n    const script = document.createElement('script');\r\n    script.src = 'https://connect.facebook.net/en_US/sdk.js';\r\n    script.async = true;\r\n    script.defer = true;\r\n    script.crossOrigin = 'anonymous';\r\n\r\n    script.onload = () => {\r\n      window.fbAsyncInit = () => {\r\n        window.FB.init({\r\n          appId: appId,\r\n          cookie: true,\r\n          xfbml: true,\r\n          version: 'v18.0'\r\n        });\r\n\r\n        window.FB.AppEvents.logPageView();\r\n        resolve(window.FB);\r\n      };\r\n\r\n      // Trigger fbAsyncInit if it exists\r\n      if (window.fbAsyncInit) {\r\n        window.fbAsyncInit();\r\n      }\r\n    };\r\n\r\n    script.onerror = (error) => {\r\n      reject(new Error('Failed to load Facebook SDK'));\r\n    };\r\n\r\n    document.head.appendChild(script);\r\n  });\r\n};\r\n\r\n/**\r\n * Convert file to base64 string\r\n * @param {File} file - File object to convert\r\n * @returns {Promise<string>} - Promise that resolves to base64 string\r\n */\r\nexport const fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!file) {\r\n      reject(new Error('No file provided'));\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = () => {\r\n      resolve(reader.result);\r\n    };\r\n    \r\n    reader.onerror = (error) => {\r\n      reject(new Error('Failed to read file: ' + error.message));\r\n    };\r\n    \r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * Get Facebook login status\r\n * @returns {Promise} - Promise that resolves with login status\r\n */\r\nexport const getFacebookLoginStatus = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!window.FB) {\r\n      reject(new Error('Facebook SDK not loaded'));\r\n      return;\r\n    }\r\n\r\n    window.FB.getLoginStatus((response) => {\r\n      resolve(response);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Facebook login\r\n * @param {Object} options - Login options\r\n * @returns {Promise} - Promise that resolves with login response\r\n */\r\nexport const facebookLogin = (options = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!window.FB) {\r\n      reject(new Error('Facebook SDK not loaded'));\r\n      return;\r\n    }\r\n\r\n    const defaultOptions = {\r\n      scope: 'public_profile,pages_show_list,pages_manage_posts,pages_read_engagement',\r\n      return_scopes: true\r\n    };\r\n\r\n    window.FB.login((response) => {\r\n      if (response.authResponse) {\r\n        resolve(response);\r\n      } else {\r\n        reject(new Error('Facebook login failed or was cancelled'));\r\n      }\r\n    }, { ...defaultOptions, ...options });\r\n  });\r\n};\r\n\r\n/**\r\n * Facebook logout\r\n * @returns {Promise} - Promise that resolves when logout is complete\r\n */\r\nexport const facebookLogout = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!window.FB) {\r\n      reject(new Error('Facebook SDK not loaded'));\r\n      return;\r\n    }\r\n\r\n    window.FB.logout((response) => {\r\n      resolve(response);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Get Facebook user info\r\n * @param {string} accessToken - Access token\r\n * @param {string} fields - Fields to retrieve\r\n * @returns {Promise} - Promise that resolves with user info\r\n */\r\nexport const getFacebookUserInfo = (accessToken, fields = 'id,name,email') => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!window.FB) {\r\n      reject(new Error('Facebook SDK not loaded'));\r\n      return;\r\n    }\r\n\r\n    window.FB.api('/me', { \r\n      access_token: accessToken, \r\n      fields: fields \r\n    }, (response) => {\r\n      if (response.error) {\r\n        reject(new Error(response.error.message));\r\n      } else {\r\n        resolve(response);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Get Facebook pages\r\n * @param {string} accessToken - Access token\r\n * @returns {Promise} - Promise that resolves with pages data\r\n */\r\nexport const getFacebookPages = (accessToken) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!window.FB) {\r\n      reject(new Error('Facebook SDK not loaded'));\r\n      return;\r\n    }\r\n\r\n    window.FB.api('/me/accounts', {\r\n      access_token: accessToken,\r\n      fields: 'id,name,category,access_token,picture,fan_count,tasks'\r\n    }, (response) => {\r\n      if (response.error) {\r\n        reject(new Error(response.error.message));\r\n      } else {\r\n        resolve(response);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Validate file type for Facebook upload\r\n * @param {File} file - File to validate\r\n * @param {string} type - Expected type ('image' or 'video')\r\n * @returns {boolean} - Whether file is valid\r\n */\r\nexport const validateFileType = (file, type) => {\r\n  if (!file) return false;\r\n\r\n  const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\r\n  const videoTypes = ['video/mp4', 'video/mov', 'video/avi', 'video/wmv', 'video/flv', 'video/webm'];\r\n\r\n  if (type === 'image') {\r\n    return imageTypes.includes(file.type);\r\n  } else if (type === 'video') {\r\n    return videoTypes.includes(file.type);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * Format file size for display\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size\r\n */\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n/**\r\n * Check if file size is within limits\r\n * @param {File} file - File to check\r\n * @param {string} type - File type ('image' or 'video')\r\n * @returns {boolean} - Whether file size is acceptable\r\n */\r\nexport const validateFileSize = (file, type) => {\r\n  if (!file) return false;\r\n\r\n  const maxImageSize = 10 * 1024 * 1024; // 10MB for images\r\n  const maxVideoSize = 100 * 1024 * 1024; // 100MB for videos\r\n\r\n  if (type === 'image') {\r\n    return file.size <= maxImageSize;\r\n  } else if (type === 'video') {\r\n    return file.size <= maxVideoSize;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport default {\r\n  loadFacebookSDK,\r\n  fileToBase64,\r\n  getFacebookLoginStatus,\r\n  facebookLogin,\r\n  facebookLogout,\r\n  getFacebookUserInfo,\r\n  getFacebookPages,\r\n  validateFileType,\r\n  formatFileSize,\r\n  validateFileSize\r\n};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport apiClient from '../services/apiClient';\r\nimport BulkComposer from './BulkComposer';\r\nimport AIGenerateTab from './AIGenerateTab';\r\nimport ManualPostTab from './ManualPostTab';\r\nimport AutomateTab from './AutomateTab';\r\nimport { loadFacebookSDK, fileToBase64 } from '../services/facebookService';\r\nimport './FacebookPage.css';\r\n\r\nfunction FacebookPage() {\r\n  const navigate = useNavigate();\r\n  const { logout } = useAuth();\r\n\r\n  // Core state\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('');\r\n  const [selectedPage, setSelectedPage] = useState(null);\r\n  const [availablePages, setAvailablePages] = useState([]);\r\n  const [facebookConnected, setFacebookConnected] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('auto');\r\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\r\n  const [isCheckingStatus, setIsCheckingStatus] = useState(true);\r\n\r\n  // Form states\r\n  const [autoFormData, setAutoFormData] = useState({\r\n    prompt: '',\r\n    mediaType: 'none',\r\n    mediaFile: null,\r\n    generatedContent: '',\r\n    isGenerating: false,\r\n    imagePrompt: '',\r\n    generatedImageUrl: null,\r\n    generatedImageFilename: null,\r\n    isGeneratingImage: false\r\n  });\r\n\r\n  const [manualFormData, setManualFormData] = useState({\r\n    message: '',\r\n    mediaType: 'none',\r\n    mediaFile: null\r\n  });\r\n\r\n  // UI states\r\n  const [isPublishing, setIsPublishing] = useState(false);\r\n  const [autoPostHistory, setAutoPostHistory] = useState([]);\r\n  const [manualPostHistory, setManualPostHistory] = useState([]);\r\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\r\n\r\n  const [showBulkComposer, setShowBulkComposer] = useState(false);\r\n  const [showAutomate, setShowAutomate] = useState(false);\r\n  const [autoReplyMessagesEnabled, setAutoReplyMessagesEnabled] = useState(true);\r\n  const [autoReplyMessagesLoading, setAutoReplyMessagesLoading] = useState(false);\r\n  const [autoReplyMessagesError, setAutoReplyMessagesError] = useState(null);\r\n\r\n  // File picker modal states\r\n  const [showFilePicker, setShowFilePicker] = useState(false);\r\n  const [filePickerType, setFilePickerType] = useState('');\r\n  const [filePickerFormType, setFilePickerFormType] = useState('');\r\n  const [isLoadingGoogleDrive, setIsLoadingGoogleDrive] = useState(false);\r\n  const [googleDriveAvailable, setGoogleDriveAvailable] = useState(false);\r\n\r\n  // Schedule and automation states\r\n  const [scheduleData, setScheduleData] = useState({\r\n    prompt: '',\r\n    time: '',\r\n    frequency: 'daily',\r\n    customDate: '',\r\n    isActive: false,\r\n    scheduleId: null\r\n  });\r\n\r\n  const [autoReplyMessageRule, setAutoReplyMessageRule] = useState(null);\r\n  const [autoReplySettings, setAutoReplySettings] = useState({\r\n    enabled: false,\r\n    template: 'Thank you for your comment! We appreciate your engagement. 😊',\r\n    ruleId: null,\r\n    selectedPostIds: []\r\n  });\r\n\r\n  const FACEBOOK_APP_ID = process.env.REACT_APP_FACEBOOK_APP_ID || '697225659875731';\r\n\r\n  // Mobile detection utility\r\n  const isMobile = () => window.innerWidth <= 768;\r\n\r\n  const loadAutoReplySettings = useCallback(async () => {\r\n    if (!selectedPage) return;\r\n\r\n    try {\r\n      console.log('🔄 Loading auto-reply settings for page:', selectedPage.id, selectedPage.name);\r\n\r\n      const rules = await apiClient.getAutomationRules('facebook', 'AUTO_REPLY');\r\n      console.log('📋 Found automation rules:', rules);\r\n\r\n      const socialAccounts = await apiClient.getSocialAccounts();\r\n      const facebookAccounts = socialAccounts.filter(acc =>\r\n        acc.platform === 'facebook' && acc.is_connected\r\n      );\r\n      console.log('� Faceboouk accounts:', facebookAccounts);\r\n\r\n      const matchingAccount = facebookAccounts.find(acc =>\r\n        acc.platform_user_id === selectedPage.id\r\n      );\r\n      console.log('🎯 Matching account:', matchingAccount);\r\n\r\n      if (matchingAccount) {\r\n        const autoReplyRule = rules.find(rule =>\r\n          rule.social_account_id === matchingAccount.id\r\n        );\r\n        console.log('🤖 Auto-reply rule found:', autoReplyRule);\r\n\r\n        if (autoReplyRule) {\r\n          setAutoReplySettings(prev => ({\r\n            ...prev,\r\n            enabled: autoReplyRule.is_active,\r\n            template: autoReplyRule.actions?.response_template || prev.template,\r\n            ruleId: autoReplyRule.id,\r\n            selectedPostIds: autoReplyRule.actions?.selected_post_ids || []\r\n          }));\r\n          console.log('✅ Auto-reply settings loaded:', {\r\n            enabled: autoReplyRule.is_active,\r\n            template: autoReplyRule.actions?.response_template,\r\n            ruleId: autoReplyRule.id,\r\n            selectedPostIds: autoReplyRule.actions?.selected_post_ids\r\n          });\r\n        } else {\r\n          setAutoReplySettings(prev => ({\r\n            ...prev,\r\n            enabled: false,\r\n            template: 'Thank you for your comment! We appreciate your engagement. 😊',\r\n            ruleId: null,\r\n            selectedPostIds: []\r\n          }));\r\n          console.log('❌ No auto-reply rule found, using defaults');\r\n        }\r\n      } else {\r\n        setAutoReplySettings(prev => ({\r\n          ...prev,\r\n          enabled: false,\r\n          template: 'Thank you for your comment! We appreciate your engagement. �',\r\n          ruleId: null,\r\n          selectedPostIds: []\r\n        }));\r\n        console.log('❌ No matching account found, using defaults');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error loading auto-reply settings:', error);\r\n    }\r\n  }, [selectedPage]);\r\n\r\n  const checkExistingFacebookConnections = useCallback(async () => {\r\n    try {\r\n      setIsCheckingStatus(true);\r\n      const response = await apiClient.getFacebookStatus();\r\n\r\n      if (response.connected) {\r\n        setFacebookConnected(true);\r\n\r\n        let socialAccounts = [];\r\n        let facebookAccounts = [];\r\n\r\n        try {\r\n          socialAccounts = await apiClient.getSocialAccounts();\r\n          facebookAccounts = socialAccounts.filter(acc =>\r\n            acc.platform === 'facebook' && acc.is_connected\r\n          );\r\n        } catch (accountsError) {\r\n          console.warn('Failed to fetch social accounts:', accountsError);\r\n        }\r\n\r\n        const pagesFromBackend = response.accounts.pages.map(page => {\r\n          const matchingAccount = facebookAccounts.find(acc =>\r\n            acc.platform_user_id === page.platform_id\r\n          );\r\n\r\n          return {\r\n            id: page.platform_id,\r\n            internalId: matchingAccount?.id,\r\n            name: page.name,\r\n            category: page.category,\r\n            access_token: '',\r\n            profilePicture: page.profile_picture || '',\r\n            canPost: page.can_post,\r\n            canComment: page.can_comment,\r\n            followerCount: page.follower_count\r\n          };\r\n        });\r\n\r\n        setAvailablePages(pagesFromBackend);\r\n\r\n        if (pagesFromBackend.length === 1) {\r\n          setSelectedPage(pagesFromBackend[0]);\r\n        }\r\n\r\n        setConnectionStatus(`Connected! ${response.pages_count} Facebook page(s) available.`);\r\n      } else {\r\n        setConnectionStatus('Ready to connect your Facebook account');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking Facebook status:', error);\r\n      setConnectionStatus('Unable to check Facebook connection status');\r\n    } finally {\r\n      setIsCheckingStatus(false);\r\n    }\r\n  }, []);\r\n\r\n  // Check for existing Facebook connections on component mount\r\n  useEffect(() => {\r\n    checkExistingFacebookConnections();\r\n    checkGoogleDriveAvailability();\r\n\r\n    const handleResize = () => {\r\n      setConnectionStatus(prev => prev);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [checkExistingFacebookConnections]);\r\n\r\n  // Cleanup on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      setIsConnecting(false);\r\n      setIsPublishing(false);\r\n      setIsLoggingOut(false);\r\n      setIsCheckingStatus(false);\r\n    };\r\n  }, []);\r\n\r\n  const checkGoogleDriveAvailability = async () => {\r\n    try {\r\n      const { authenticated } = await apiClient.getGoogleDriveStatus();\r\n      setGoogleDriveAvailable(authenticated);\r\n    } catch (error) {\r\n      console.warn('Drive status check failed:', error.message);\r\n      setGoogleDriveAvailable(false);\r\n    }\r\n  };\r\n\r\n  const loadPostHistory = useCallback(async () => {\r\n    if (!selectedPage) return;\r\n    try {\r\n      setIsLoadingPosts(true);\r\n      const response = await apiClient.getSocialPosts('facebook', 50, selectedPage.internalId);\r\n      const posts = response\r\n        .slice(0, 50)\r\n        .sort((a, b) => new Date(b.created_at || b.next_execution) - new Date(a.created_at || a.next_execution));\r\n      const topPosts = posts.slice(0, 10);\r\n      setAutoPostHistory(topPosts.filter((_, index) => index % 2 === 0));\r\n      setManualPostHistory(topPosts.filter((_, index) => index % 2 === 1));\r\n    } catch (error) {\r\n      console.error('Error loading post history:', error);\r\n    } finally {\r\n      setIsLoadingPosts(false);\r\n    }\r\n  }, [selectedPage]);\r\n\r\n  // Load posts when page is selected or tab changes\r\n  useEffect(() => {\r\n    if (selectedPage && facebookConnected) {\r\n      loadPostHistory();\r\n      loadAutoReplySettings();\r\n    }\r\n  }, [selectedPage, facebookConnected, activeTab, loadPostHistory, loadAutoReplySettings]);\r\n\r\n  const handleFacebookLogout = async () => {\r\n    try {\r\n      const safeScheduleData = scheduleData || {};\r\n\r\n      if (selectedPage && safeScheduleData.isActive) {\r\n        const confirmDisconnect = window.confirm(\r\n          `⚠️ Warning: You have an active schedule for \"${selectedPage.name}\". Disconnecting will deactivate this schedule. Do you want to continue?`\r\n        );\r\n\r\n        if (!confirmDisconnect) {\r\n          return;\r\n        }\r\n\r\n        try {\r\n          await apiClient.deleteScheduledPost(safeScheduleData.scheduleId);\r\n          console.log('✅ Schedule deactivated before disconnect');\r\n        } catch (scheduleError) {\r\n          console.warn('Failed to deactivate schedule before disconnect:', scheduleError);\r\n        }\r\n      }\r\n\r\n      setIsLoggingOut(true);\r\n      setConnectionStatus('Disconnecting from Facebook...');\r\n\r\n      await apiClient.logoutFacebook();\r\n\r\n      setFacebookConnected(false);\r\n      setAvailablePages([]);\r\n      setSelectedPage(null);\r\n      setAutoPostHistory([]);\r\n      setManualPostHistory([]);\r\n\r\n      setScheduleData({\r\n        prompt: '',\r\n        time: '',\r\n        frequency: 'daily',\r\n        customDate: '',\r\n        isActive: false,\r\n        scheduleId: null\r\n      });\r\n\r\n      setConnectionStatus('Successfully disconnected from Facebook');\r\n\r\n      setTimeout(() => {\r\n        setConnectionStatus('Ready to connect your Facebook account');\r\n      }, 3000);\r\n\r\n    } catch (error) {\r\n      console.error('Error logging out from Facebook:', error);\r\n      setConnectionStatus('Failed to disconnect from Facebook: ' + error.message);\r\n    } finally {\r\n      setIsLoggingOut(false);\r\n    }\r\n  };\r\n\r\n  const loginWithFacebook = async () => {\r\n    if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {\r\n      setConnectionStatus('Facebook login requires HTTPS. Please use https://localhost:3001 or deploy with HTTPS');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await apiClient.getCurrentUser();\r\n    } catch (error) {\r\n      setConnectionStatus('Your session has expired. Please log out and log back in to connect Facebook.');\r\n      setTimeout(() => {\r\n        logout();\r\n        navigate('/');\r\n      }, 3000);\r\n      return;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setConnectionStatus('Loading Facebook SDK...');\r\n\r\n    try {\r\n      await loadFacebookSDK(FACEBOOK_APP_ID);\r\n\r\n      if (!window.FB || typeof window.FB.login !== 'function') {\r\n        setConnectionStatus('Facebook SDK failed to load. Please refresh the page and try again.');\r\n        setIsConnecting(false);\r\n        return;\r\n      }\r\n\r\n      setConnectionStatus('Connecting to Facebook...');\r\n\r\n      window.FB.login((response) => {\r\n        if (response.authResponse && response.authResponse.accessToken) {\r\n          setConnectionStatus('Facebook login successful! Fetching pages...');\r\n\r\n          (async () => {\r\n            try {\r\n              const { mappedPages, userInfo } = await fetchPages(response.authResponse.accessToken);\r\n\r\n              if (mappedPages.length > 0) {\r\n                setConnectionStatus('Connecting to backend...');\r\n                const backendResponse = await connectToBackend(response.authResponse.accessToken, userInfo, mappedPages);\r\n\r\n                if (backendResponse?.data?.pages) {\r\n                  setAvailablePages(mappedPages);\r\n                  setConnectionStatus(`Connected successfully! ${backendResponse.data.pages_connected} pages synchronized with backend.`);\r\n                }\r\n              } else {\r\n                setConnectionStatus('No pages found in Facebook API. Connecting to backend to check for existing connections...');\r\n\r\n                try {\r\n                  await connectToBackend(response.authResponse.accessToken, userInfo, []);\r\n\r\n                  const existingAccounts = await apiClient.getSocialAccounts();\r\n                  const facebookPages = existingAccounts.filter(acc =>\r\n                    acc.platform === 'facebook' && acc.account_type === 'page' && acc.is_connected\r\n                  );\r\n\r\n                  if (facebookPages.length > 0) {\r\n                    const backendMappedPages = facebookPages.map(page => ({\r\n                      id: page.platform_user_id,\r\n                      internalId: page.id,\r\n                      name: page.display_name,\r\n                      category: page.platform_data?.category || 'Page',\r\n                      access_token: page.access_token || response.authResponse.accessToken,\r\n                      profilePicture: page.profile_picture_url || '',\r\n                      canPost: page.platform_data?.can_post !== false,\r\n                      canComment: page.platform_data?.can_comment !== false,\r\n                      followerCount: page.follower_count || 0\r\n                    }));\r\n\r\n                    setAvailablePages(backendMappedPages);\r\n                    setConnectionStatus(`Found ${facebookPages.length} existing page(s) from previous connections!`);\r\n                  } else {\r\n                    setConnectionStatus('No pages found. You may need to grant page permissions or create a Facebook page first.');\r\n                  }\r\n                } catch (backendError) {\r\n                  console.error('[FB.login] Backend check failed:', backendError);\r\n                  setConnectionStatus('No pages found. You may need to grant page permissions or create a Facebook page first.');\r\n                }\r\n              }\r\n            } catch (error) {\r\n              console.error('[FB.login] Error in page fetching or backend connection:', error);\r\n              setConnectionStatus('Error during setup: ' + (error.message || 'Unknown error'));\r\n              setIsConnecting(false);\r\n              setFacebookConnected(false);\r\n            }\r\n          })();\r\n        } else {\r\n          if (response.status === 'not_authorized') {\r\n            setConnectionStatus('Please authorize the app to continue and select at least one page.');\r\n          } else {\r\n            setConnectionStatus('Facebook login cancelled or failed');\r\n          }\r\n          setIsConnecting(false);\r\n        }\r\n      }, {\r\n        scope: [\r\n          'public_profile',\r\n          'pages_show_list',\r\n          'pages_read_engagement',\r\n          'pages_manage_posts',\r\n          'pages_manage_engagement',\r\n          'pages_read_user_content',\r\n          'pages_manage_metadata'\r\n        ].join(','),\r\n        enable_profile_selector: true,\r\n        return_scopes: true,\r\n        auth_type: 'rerequest',\r\n        display: 'popup'\r\n      });\r\n    } catch (error) {\r\n      console.error('Facebook login error:', error);\r\n      setConnectionStatus('Facebook login failed: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const fetchPages = async (accessToken) => {\r\n    if (!accessToken) {\r\n      setConnectionStatus('No Facebook access token found. Please try reconnecting.');\r\n      setIsConnecting(false);\r\n      setFacebookConnected(false);\r\n      return { mappedPages: [], userInfo: null };\r\n    }\r\n\r\n    try {\r\n      const permissionsResponse = await new Promise((resolve, reject) => {\r\n        window.FB.api('/me/permissions', { access_token: accessToken }, (response) => {\r\n          if (response.error) reject(new Error(response.error.message));\r\n          else resolve(response);\r\n        });\r\n      });\r\n\r\n      const grantedPermissions = permissionsResponse.data?.filter(p => p.status === 'granted').map(p => p.permission) || [];\r\n      const requiredPermissions = ['pages_show_list', 'pages_manage_posts'];\r\n      const missingPermissions = requiredPermissions.filter(p => !grantedPermissions.includes(p));\r\n\r\n      if (missingPermissions.length > 0) {\r\n        setConnectionStatus(`Missing permissions: ${missingPermissions.join(', ')}. Your app needs \"Pages API\" permissions.`);\r\n      }\r\n\r\n      const userInfo = await new Promise((resolve, reject) => {\r\n        window.FB.api('/me', { access_token: accessToken, fields: 'id,name,email' }, (response) => {\r\n          if (response.error) reject(new Error(response.error.message));\r\n          else resolve(response);\r\n        });\r\n      });\r\n\r\n      const pagesResponse = await new Promise((resolve, reject) => {\r\n        window.FB.api('/me/accounts', {\r\n          access_token: accessToken,\r\n          fields: 'id,name,category,access_token,picture,fan_count,tasks'\r\n        }, (response) => {\r\n          if (response.error) {\r\n            reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n          } else {\r\n            resolve(response);\r\n          }\r\n        });\r\n      });\r\n\r\n      const pages = pagesResponse.data || [];\r\n      const mappedPages = pages.map(page => {\r\n        const tasks = page.tasks || [];\r\n        const canPost = tasks.includes('CREATE_CONTENT') || tasks.includes('MANAGE');\r\n        const canComment = tasks.includes('MODERATE') || tasks.includes('MANAGE');\r\n\r\n        return {\r\n          id: page.id,\r\n          internalId: null,\r\n          name: page.name,\r\n          category: page.category || 'Page',\r\n          access_token: page.access_token,\r\n          profilePicture: page.picture?.data?.url || '',\r\n          canPost: canPost,\r\n          canComment: canComment,\r\n          followerCount: page.fan_count || 0\r\n        };\r\n      });\r\n\r\n      setAvailablePages(mappedPages);\r\n\r\n      if (mappedPages.length === 1) {\r\n        setSelectedPage(mappedPages[0]);\r\n        setConnectionStatus(`Connected successfully! 1 page found.`);\r\n        setTimeout(() => loadAutoReplySettings(), 500);\r\n      } else if (mappedPages.length > 1) {\r\n        setSelectedPage(null);\r\n        setConnectionStatus(`Connected successfully! ${mappedPages.length} pages found. Please select a page below.`);\r\n      } else {\r\n        setSelectedPage({\r\n          id: userInfo.id,\r\n          internalId: null,\r\n          name: userInfo.name,\r\n          access_token: accessToken,\r\n          category: 'Personal Profile',\r\n          profilePicture: '',\r\n          canPost: true,\r\n          canComment: true,\r\n          followerCount: 0\r\n        });\r\n        setConnectionStatus('Connected as personal profile (no pages found).');\r\n        setTimeout(() => loadAutoReplySettings(), 500);\r\n      }\r\n      setFacebookConnected(true);\r\n      setIsConnecting(false);\r\n      return { mappedPages, userInfo };\r\n    } catch (error) {\r\n      console.error('Facebook API error:', error);\r\n      setConnectionStatus('Failed to get Facebook data: ' + (error.message || 'Unknown error'));\r\n      setIsConnecting(false);\r\n      setFacebookConnected(false);\r\n      return { mappedPages: [], userInfo: null };\r\n    }\r\n  };\r\n\r\n  const connectToBackend = async (accessToken, userInfo, pages) => {\r\n    try {\r\n      const response = await apiClient.connectFacebook(accessToken, userInfo.id, pages);\r\n\r\n      if (response.data?.data?.token_type === 'long_lived_user_token') {\r\n        const expiresAt = response.data.data.token_expires_at;\r\n        if (expiresAt) {\r\n          const expiryDate = new Date(expiresAt);\r\n          setConnectionStatus(`Connected with long-lived token (expires: ${expiryDate.toLocaleDateString()})`);\r\n        } else {\r\n          setConnectionStatus('Connected with long-lived token');\r\n        }\r\n      }\r\n\r\n      setTimeout(async () => {\r\n        try {\r\n          const socialAccounts = await apiClient.getSocialAccounts();\r\n          const facebookAccounts = socialAccounts.filter(acc =>\r\n            acc.platform === 'facebook' && acc.is_connected\r\n          );\r\n\r\n          const updatedPages = availablePages.map(page => {\r\n            const matchingAccount = facebookAccounts.find(acc =>\r\n              acc.platform_user_id === page.id\r\n            );\r\n            return {\r\n              ...page,\r\n              internalId: matchingAccount?.id\r\n            };\r\n          });\r\n\r\n          setAvailablePages(updatedPages);\r\n\r\n          if (selectedPage) {\r\n            const matchingAccount = facebookAccounts.find(acc =>\r\n              acc.platform_user_id === selectedPage.id\r\n            );\r\n            if (matchingAccount) {\r\n              setSelectedPage(prev => ({\r\n                ...prev,\r\n                internalId: matchingAccount.id\r\n              }));\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating page data with internal IDs:', error);\r\n          setConnectionStatus('Warning: Unable to get account details. You may need to reconnect Facebook for scheduling to work.');\r\n        }\r\n      }, 2000);\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Backend connection error:', error);\r\n\r\n      if (error.response?.status === 401) {\r\n        setConnectionStatus('Your session has expired. Please log out and log back in to connect Facebook.');\r\n        setTimeout(() => {\r\n          logout();\r\n          navigate('/');\r\n        }, 3000);\r\n      } else if (error.response?.data?.detail?.includes('long-lived token')) {\r\n        setConnectionStatus('Failed to get long-lived Facebook token. Please try reconnecting.');\r\n      } else {\r\n        setConnectionStatus('Failed to connect to backend: ' + (error.response?.data?.detail || error.message));\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleAutoInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    setAutoFormData(prev => ({\r\n      ...prev,\r\n      [name]: files ? files[0] : value\r\n    }));\r\n  };\r\n\r\n  const handleManualInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    setManualFormData(prev => ({\r\n      ...prev,\r\n      [name]: files ? files[0] : value\r\n    }));\r\n  };\r\n\r\n  const handleMediaTypeChange = (type, formType) => {\r\n    if (type === 'photo' || type === 'video') {\r\n      openFilePicker(type, formType);\r\n      return;\r\n    }\r\n\r\n    if (formType === 'auto') {\r\n      setAutoFormData(prev => ({\r\n        ...prev,\r\n        mediaType: type,\r\n        mediaFile: null,\r\n        generatedImageUrl: type === 'ai_image' ? prev.generatedImageUrl : null,\r\n        generatedImageFilename: type === 'ai_image' ? prev.generatedImageFilename : null,\r\n        imagePrompt: type === 'ai_image' ? prev.imagePrompt : ''\r\n      }));\r\n    } else {\r\n      setManualFormData(prev => ({\r\n        ...prev,\r\n        mediaType: type,\r\n        mediaFile: null,\r\n        generatedImageUrl: type === 'ai_image' ? prev.generatedImageUrl : null,\r\n        generatedImageFilename: type === 'ai_image' ? prev.generatedImageFilename : null,\r\n        imagePrompt: type === 'ai_image' ? prev.imagePrompt : ''\r\n      }));\r\n    }\r\n  };\r\n\r\n  const openFilePicker = (type, formType) => {\r\n    setFilePickerType(type);\r\n    setFilePickerFormType(formType);\r\n    setShowFilePicker(true);\r\n  };\r\n\r\n  const generatePostContent = async () => {\r\n    if (!autoFormData.prompt.trim()) {\r\n      setConnectionStatus('Please enter a prompt for AI generation');\r\n      return;\r\n    }\r\n\r\n    setAutoFormData(prev => ({ ...prev, isGenerating: true }));\r\n    setConnectionStatus('Generating content with AI...');\r\n\r\n    try {\r\n      const response = await apiClient.generateContent(autoFormData.prompt);\r\n      setAutoFormData(prev => ({\r\n        ...prev,\r\n        generatedContent: response.content,\r\n        isGenerating: false\r\n      }));\r\n      setConnectionStatus('Content generated successfully!');\r\n    } catch (error) {\r\n      console.error('Content generation error:', error);\r\n      setConnectionStatus('Failed to generate content: ' + (error.message || 'Unknown error'));\r\n      setAutoFormData(prev => ({ ...prev, isGenerating: false }));\r\n    }\r\n  };\r\n\r\n  const generateImage = async (formType) => {\r\n    const currentData = formType === 'auto' ? autoFormData : manualFormData;\r\n    const setFormData = formType === 'auto' ? setAutoFormData : setManualFormData;\r\n\r\n    const imagePrompt = currentData.imagePrompt || currentData.prompt || (formType === 'manual' ? currentData.message : '');\r\n\r\n    if (!imagePrompt.trim()) {\r\n      setConnectionStatus('Please enter an image prompt or description');\r\n      return;\r\n    }\r\n\r\n    setFormData(prev => ({ ...prev, isGeneratingImage: true }));\r\n    setConnectionStatus('Generating image with AI...');\r\n\r\n    try {\r\n      const response = await apiClient.generateFacebookImage(imagePrompt, 'feed');\r\n\r\n      if (response.success) {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          generatedImageUrl: response.data.image_url,\r\n          generatedImageFilename: response.data.filename,\r\n          isGeneratingImage: false\r\n        }));\r\n        setConnectionStatus('Image generated successfully!');\r\n      } else {\r\n        throw new Error(response.error || 'Image generation failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Image generation error:', error);\r\n      setConnectionStatus('Failed to generate image: ' + (error.message || 'Unknown error'));\r\n      setFormData(prev => ({ ...prev, isGeneratingImage: false }));\r\n    }\r\n  };\r\n\r\n  const generateImageWithCaption = async () => {\r\n    if (!autoFormData.prompt.trim()) {\r\n      setConnectionStatus('Please enter a prompt for generation');\r\n      return;\r\n    }\r\n\r\n    setAutoFormData(prev => ({ ...prev, isGenerating: true, isGeneratingImage: true }));\r\n    setConnectionStatus('Generating image and caption with AI...');\r\n\r\n    try {\r\n      const textResponse = await apiClient.generateContent(autoFormData.prompt);\r\n\r\n      if (!textResponse.content) {\r\n        throw new Error('Failed to generate text content');\r\n      }\r\n\r\n      const imagePrompt = autoFormData.imagePrompt || autoFormData.prompt;\r\n      const imageResponse = await apiClient.generateFacebookImage(imagePrompt, 'feed');\r\n\r\n      if (!imageResponse.success) {\r\n        throw new Error(imageResponse.error || 'Image generation failed');\r\n      }\r\n\r\n      setAutoFormData(prev => ({\r\n        ...prev,\r\n        generatedContent: textResponse.content,\r\n        generatedImageUrl: imageResponse.data.image_url,\r\n        generatedImageFilename: imageResponse.data.filename,\r\n        isGenerating: false,\r\n        isGeneratingImage: false\r\n      }));\r\n\r\n      setConnectionStatus('Image and caption generated successfully!');\r\n    } catch (error) {\r\n      console.error('Image with caption generation error:', error);\r\n      setConnectionStatus('Failed to generate image and caption: ' + (error.message || 'Unknown error'));\r\n      setAutoFormData(prev => ({ ...prev, isGenerating: false, isGeneratingImage: false }));\r\n    }\r\n  };\r\n\r\n  const publishPost = async () => {\r\n    if (!selectedPage) {\r\n      setConnectionStatus('Please select a page first');\r\n      return;\r\n    }\r\n\r\n    const isAutoMode = activeTab === 'auto';\r\n    const content = isAutoMode ? autoFormData.generatedContent : manualFormData.message;\r\n    const mediaType = isAutoMode ? autoFormData.mediaType : manualFormData.mediaType;\r\n    const mediaFile = isAutoMode ? autoFormData.mediaFile : manualFormData.mediaFile;\r\n    const generatedImageUrl = isAutoMode ? autoFormData.generatedImageUrl : manualFormData.generatedImageUrl;\r\n    const generatedImageFilename = isAutoMode ? autoFormData.generatedImageFilename : manualFormData.generatedImageFilename;\r\n\r\n    if (!content || content.trim() === '') {\r\n      if (mediaType !== 'video') {\r\n        setConnectionStatus('Please enter some content for your post');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (mediaType === 'photo' && !mediaFile) {\r\n      setConnectionStatus('Please select a media file to upload');\r\n      return;\r\n    }\r\n\r\n    if (mediaType === 'video' && !mediaFile) {\r\n      setConnectionStatus('Please select a video file to upload');\r\n      return;\r\n    }\r\n\r\n    if (mediaType === 'ai_image' && (!generatedImageUrl || !generatedImageFilename)) {\r\n      setConnectionStatus('Please generate an image first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsPublishing(true);\r\n      setConnectionStatus('Publishing post to Facebook...');\r\n\r\n      const postOptions = {\r\n        postType: 'feed'\r\n      };\r\n\r\n      if (isAutoMode) {\r\n        if (autoFormData.generatedContent) {\r\n          postOptions.textContent = autoFormData.generatedContent;\r\n        } else if (autoFormData.prompt) {\r\n          postOptions.contentPrompt = autoFormData.prompt;\r\n          postOptions.useAIText = true;\r\n        } else {\r\n          postOptions.textContent = content;\r\n        }\r\n      } else {\r\n        if (content && content.trim()) {\r\n          postOptions.textContent = content;\r\n        }\r\n      }\r\n\r\n      if (mediaType === 'ai_image' && generatedImageUrl && generatedImageFilename) {\r\n        postOptions.imageUrl = generatedImageUrl;\r\n        postOptions.imageFilename = generatedImageFilename;\r\n      } else if (mediaType === 'ai_image' && (autoFormData.imagePrompt || manualFormData.imagePrompt)) {\r\n        const imagePrompt = isAutoMode ? autoFormData.imagePrompt : manualFormData.imagePrompt;\r\n        postOptions.imagePrompt = imagePrompt;\r\n        postOptions.useAIImage = true;\r\n      } else if (mediaType === 'photo' && mediaFile) {\r\n        const imageData = await fileToBase64(mediaFile);\r\n        postOptions.imageUrl = imageData;\r\n      } else if (mediaType === 'video' && mediaFile) {\r\n        try {\r\n          const videoData = await fileToBase64(mediaFile);\r\n          postOptions.videoUrl = videoData;\r\n          postOptions.videoFilename = mediaFile.name;\r\n        } catch (error) {\r\n          console.error('Error converting video to base64:', error);\r\n          throw new Error('Failed to process video file: ' + error.message);\r\n        }\r\n      }\r\n\r\n      if (!postOptions.textContent && !postOptions.contentPrompt && !postOptions.imageUrl && !postOptions.imagePrompt && !postOptions.videoUrl) {\r\n        throw new Error('No content provided. Please add text content, generate content, or add media.');\r\n      }\r\n\r\n      const postResult = await apiClient.createFacebookPost(selectedPage.id, postOptions);\r\n\r\n      if (!postResult.success) {\r\n        throw new Error(postResult.error || 'Failed to create post via backend');\r\n      }\r\n\r\n      setConnectionStatus('Post published successfully!');\r\n\r\n      setTimeout(() => {\r\n        loadPostHistory();\r\n      }, 1000);\r\n\r\n      if (isAutoMode) {\r\n        setAutoFormData(prev => ({\r\n          ...prev,\r\n          prompt: '',\r\n          generatedContent: '',\r\n          mediaFile: null,\r\n          mediaType: 'none',\r\n          imagePrompt: '',\r\n          generatedImageUrl: null,\r\n          generatedImageFilename: null\r\n        }));\r\n      } else {\r\n        setManualFormData(prev => ({\r\n          ...prev,\r\n          message: '',\r\n          mediaFile: null,\r\n          mediaType: 'none',\r\n          imagePrompt: '',\r\n          generatedImageUrl: null,\r\n          generatedImageFilename: null\r\n        }));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Post publishing error:', error);\r\n      setConnectionStatus('Failed to publish post: ' + (error.message || 'Unknown error'));\r\n    } finally {\r\n      setIsPublishing(false);\r\n    }\r\n  };\r\n\r\n  const loadAutoReplyMessageRule = useCallback(async () => {\r\n    if (!selectedPage) return;\r\n    setAutoReplyMessagesLoading(true);\r\n    setAutoReplyMessagesError(null);\r\n    try {\r\n      const rules = await apiClient.getAutomationRules('facebook', 'AUTO_REPLY_MESSAGE');\r\n      const socialAccounts = await apiClient.getSocialAccounts();\r\n      const matchingAccount = socialAccounts.find(acc => acc.platform === 'facebook' && acc.platform_user_id === selectedPage.id);\r\n      const rule = rules.find(r => r.social_account_id === matchingAccount?.id);\r\n      if (rule) {\r\n        setAutoReplyMessageRule(rule);\r\n        setAutoReplyMessagesEnabled(rule.is_active !== false);\r\n      } else {\r\n        setAutoReplyMessageRule(null);\r\n        setAutoReplyMessagesEnabled(true);\r\n      }\r\n    } catch (err) {\r\n      setAutoReplyMessagesError('Failed to load auto-reply message rule.');\r\n    } finally {\r\n      setAutoReplyMessagesLoading(false);\r\n    }\r\n  }, [selectedPage]);\r\n\r\n  useEffect(() => {\r\n    loadAutoReplyMessageRule();\r\n  }, [selectedPage, loadAutoReplyMessageRule]);\r\n\r\n  const handleAutoReplyMessagesToggle = async () => {\r\n    if (!autoReplyMessageRule) return;\r\n    setAutoReplyMessagesLoading(true);\r\n    setAutoReplyMessagesError(null);\r\n    try {\r\n      const updated = await apiClient.updateAutomationRule(autoReplyMessageRule.id, {\r\n        is_active: !autoReplyMessagesEnabled\r\n      });\r\n      setAutoReplyMessagesEnabled(updated.is_active);\r\n      setAutoReplyMessageRule(updated);\r\n    } catch (err) {\r\n      setAutoReplyMessagesError('Failed to update auto-reply message rule.');\r\n    } finally {\r\n      setAutoReplyMessagesLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusCardClass = () => {\r\n    if (connectionStatus.includes('Failed') || connectionStatus.includes('error') || connectionStatus.includes('Error')) {\r\n      return 'status-card error';\r\n    } else if (connectionStatus.includes('successful') || connectionStatus.includes('Connected') || connectionStatus.includes('completed')) {\r\n      return 'status-card success';\r\n    } else {\r\n      return 'status-card info';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"facebook-page-container\">\r\n      {/* Enhanced Navigation Header */}\r\n      <div className=\"facebook-header\">\r\n        <div className=\"facebook-header-left\">\r\n          <div className={`facebook-icon-container ${facebookConnected ? 'connected' : ''}`}>\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#1877f2\">\r\n              <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\r\n            </svg>\r\n          </div>\r\n          <div className=\"facebook-header-content\">\r\n            <h1 className=\"facebook-title\">\r\n              {facebookConnected ?\r\n                (selectedPage ? selectedPage.name : 'Facebook Manager') :\r\n                'Facebook Manager'\r\n              }\r\n            </h1>\r\n            <div className=\"facebook-subtitle\">\r\n              {facebookConnected ? (\r\n                selectedPage ? (\r\n                  <div className=\"page-status-info\">\r\n                    <div className=\"status-indicator connected\" />\r\n                    <span className=\"page-category\">{selectedPage.category}</span>\r\n                    <span className=\"page-followers\">{selectedPage.followerCount?.toLocaleString() || 0} followers</span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"page-status-info\">\r\n                    <div className=\"status-indicator connecting\" />\r\n                    <span>Connected • Select a page to continue</span>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <div className=\"page-status-info\">\r\n                  <div className=\"status-indicator disconnected\" />\r\n                  <span>Not connected • Ready to link your account</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"facebook-header-actions\">\r\n          {facebookConnected && (\r\n            <button\r\n              onClick={handleFacebookLogout}\r\n              disabled={isLoggingOut}\r\n              className=\"header-action-btn disconnect-btn\"\r\n              title=\"Disconnect Facebook\"\r\n            >\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\r\n                <polyline points=\"16,17 21,12 16,7\" />\r\n                <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\r\n              </svg>\r\n              {!isMobile() && (isLoggingOut ? 'Disconnecting...' : 'Disconnect')}\r\n            </button>\r\n          )}\r\n\r\n          <button\r\n            onClick={() => navigate('/')}\r\n            className=\"header-action-btn dashboard-btn\"\r\n            title=\"Back to Dashboard\"\r\n          >\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n              <path d=\"m12 19-7-7 7-7\" />\r\n              <path d=\"M19 12H5\" />\r\n            </svg>\r\n            {!isMobile() && 'Dashboard'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content Container */}\r\n      <div className={`facebook-main-content ${!facebookConnected ? 'centered' : ''}`}>\r\n        {/* Subtle Status Indicator */}\r\n        {connectionStatus && (\r\n          <div className={`status-indicator-bar ${getStatusCardClass().split(' ')[1]}`}>\r\n            <div className=\"status-content\">\r\n              <div className=\"status-icon\">\r\n                {connectionStatus.includes('Failed') || connectionStatus.includes('error') ? (\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\r\n                    <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\r\n                  </svg>\r\n                ) : connectionStatus.includes('successful') || connectionStatus.includes('Connected') ? (\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\r\n                    <polyline points=\"22,4 12,14.01 9,11.01\" />\r\n                  </svg>\r\n                ) : (\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                    <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\r\n                    <circle cx=\"12\" cy=\"16\" r=\"1\" />\r\n                  </svg>\r\n                )}\r\n              </div>\r\n              <span className=\"status-text\">{connectionStatus}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Main Card */}\r\n        <div className={`facebook-main-card ${!facebookConnected ? 'connect-mode' : ''}`}>\r\n          {!facebookConnected ? (\r\n            /* Enhanced Connect Card */\r\n            <div className=\"connect-card\">\r\n              <div className=\"connect-visual\">\r\n                <div className=\"connect-icon-wrapper\">\r\n                  <div className=\"connect-icon\">\r\n                    <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"#1877f2\">\r\n                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"connect-pulse\"></div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"connect-content\">\r\n                <h2 className=\"connect-title\">Connect Your Facebook</h2>\r\n                <p className=\"connect-description\">\r\n                  Link your Facebook pages to start creating and managing posts with AI assistance\r\n                </p>\r\n\r\n                <button\r\n                  onClick={loginWithFacebook}\r\n                  disabled={isConnecting || isCheckingStatus}\r\n                  className=\"connect-button\"\r\n                >\r\n                  <div className=\"connect-button-content\">\r\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\r\n                    </svg>\r\n                    <span>\r\n                      {isCheckingStatus ? 'Checking Connection...' : (isConnecting ? 'Connecting...' : 'Connect Facebook')}\r\n                    </span>\r\n                  </div>\r\n                  {(isConnecting || isCheckingStatus) && (\r\n                    <div className=\"connect-loading\">\r\n                      <div className=\"loading-spinner\"></div>\r\n                    </div>\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            /* Connected Content */\r\n            <div className=\"facebook-connected-content\">\r\n              {/* Enhanced Page Selection */}\r\n              {availablePages.length > 1 && (\r\n                <div className=\"page-selector-card\">\r\n                  <div className=\"page-selector-header\">\r\n                    <div className=\"page-selector-icon\">\r\n                      <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                        <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\" />\r\n                        <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n                        <path d=\"M23 21v-2a4 4 0 0 0-3-3.87\" />\r\n                        <path d=\"M16 3.13a4 4 0 0 1 0 7.75\" />\r\n                      </svg>\r\n                    </div>\r\n                    <div className=\"page-selector-content\">\r\n                      <h3>Select Page</h3>\r\n                      <p>Choose which Facebook page to manage</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"page-selector-dropdown\">\r\n                    <select\r\n                      className=\"page-dropdown\"\r\n                      value={selectedPage?.id || ''}\r\n                      onChange={e => {\r\n                        const page = availablePages.find(p => p.id === e.target.value);\r\n                        if (page && selectedPage?.id !== page.id) {\r\n                          setSelectedPage(page);\r\n                          setAutoPostHistory([]);\r\n                          setManualPostHistory([]);\r\n                          setShowBulkComposer(false);\r\n                          setActiveTab('auto');\r\n                          setConnectionStatus('');\r\n                          setScheduleData({\r\n                            prompt: '',\r\n                            time: '',\r\n                            frequency: 'daily',\r\n                            customDate: '',\r\n                            isActive: false,\r\n                            scheduleId: null\r\n                          });\r\n                          setTimeout(() => {\r\n                            loadAutoReplySettings();\r\n                            loadPostHistory();\r\n                          }, 100);\r\n                        }\r\n                      }}\r\n                    >\r\n                      <option value=\"\" disabled>Choose a page...</option>\r\n                      {availablePages.map(page => (\r\n                        <option key={page.id} value={page.id}>\r\n                          {page.name} • {page.category}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n\r\n                    <div className=\"dropdown-icon\">\r\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                        <polyline points=\"6,9 12,15 18,9\" />\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {selectedPage && (\r\n                    <div className=\"selected-page-info\">\r\n                      <div className=\"page-avatar\">\r\n                        {selectedPage.profilePicture ? (\r\n                          <img\r\n                            src={selectedPage.profilePicture}\r\n                            alt={selectedPage.name}\r\n                            className=\"page-avatar-image\"\r\n                          />\r\n                        ) : (\r\n                          <div className=\"page-avatar-placeholder\">\r\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                              <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                            </svg>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"page-details\">\r\n                        <div className=\"page-name\">{selectedPage.name}</div>\r\n                        <div className=\"page-stats\">\r\n                          <span className=\"follower-count\">\r\n                            {selectedPage.followerCount?.toLocaleString() || 0} followers\r\n                          </span>\r\n                          <div className=\"connection-status\">\r\n                            <div className=\"status-dot connected\"></div>\r\n                            <span>Connected</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n\r\n              {/* Main Content Area */}\r\n              {selectedPage && (\r\n                <div className=\"facebook-workspace\">\r\n                  {/* Enhanced Tab Navigation */}\r\n                  <div className=\"workspace-tabs\">\r\n                    <button\r\n                      className={`workspace-tab ${activeTab === 'auto' ? 'active' : ''}`}\r\n                      onClick={() => {\r\n                        setActiveTab('auto');\r\n                        setShowAutomate(false);\r\n                      }}\r\n                    >\r\n                      <div className=\"tab-icon\">\r\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                          <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                        </svg>\r\n                      </div>\r\n                      <span className=\"tab-label\">{isMobile() ? 'AI' : 'AI Generate'}</span>\r\n                    </button>\r\n\r\n                    <button\r\n                      className={`workspace-tab ${activeTab === 'manual' ? 'active' : ''}`}\r\n                      onClick={() => {\r\n                        setActiveTab('manual');\r\n                        setShowAutomate(false);\r\n                      }}\r\n                    >\r\n                      <div className=\"tab-icon\">\r\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                          <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\r\n                          <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\r\n                        </svg>\r\n                      </div>\r\n                      <span className=\"tab-label\">{isMobile() ? 'Manual' : 'Manual Post'}</span>\r\n                    </button>\r\n\r\n                    <button\r\n                      className={`workspace-tab ${activeTab === 'bulk' ? 'active' : ''}`}\r\n                      onClick={() => {\r\n                        setActiveTab('bulk');\r\n                        setShowBulkComposer(true);\r\n                        setShowAutomate(false);\r\n                      }}\r\n                    >\r\n                      <div className=\"tab-icon\">\r\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                          <path d=\"M3 3h18v18H3z\" />\r\n                          <path d=\"M9 9h6v6H9z\" />\r\n                          <path d=\"M15 3v18\" />\r\n                          <path d=\"M9 3v18\" />\r\n                        </svg>\r\n                      </div>\r\n                      <span className=\"tab-label\">{isMobile() ? 'Bulk' : 'Bulk Posts'}</span>\r\n                    </button>\r\n\r\n                    <button\r\n                      className={`workspace-tab ${activeTab === 'automate' ? 'active' : ''}`}\r\n                      onClick={() => {\r\n                        setActiveTab('automate');\r\n                        setShowAutomate(true);\r\n                      }}\r\n                    >\r\n                      <div className=\"tab-icon\">\r\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                          <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n                          <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\" />\r\n                        </svg>\r\n                      </div>\r\n                      <span className=\"tab-label\">Automate</span>\r\n                    </button>\r\n                  </div>\r\n\r\n                  {/* Tab Content */}\r\n                  <div className=\"workspace-content\">\r\n                    {/* AI Generate Tab */}\r\n                    {activeTab === 'auto' && (\r\n                      <AIGenerateTab\r\n                        formData={autoFormData}\r\n                        setFormData={setAutoFormData}\r\n                        onGenerate={generatePostContent}\r\n                        onGenerateImage={generateImage}\r\n                        onGenerateImageWithCaption={generateImageWithCaption}\r\n                        onPublish={publishPost}\r\n                        isPublishing={isPublishing}\r\n                        postHistory={autoPostHistory}\r\n                        isLoadingPosts={isLoadingPosts}\r\n                        onRefreshPosts={loadPostHistory}\r\n                      />\r\n                    )}\r\n\r\n                    {/* Manual Post Tab */}\r\n                    {activeTab === 'manual' && (\r\n                      <ManualPostTab\r\n                        formData={manualFormData}\r\n                        setFormData={setManualFormData}\r\n                        onPublish={publishPost}\r\n                        isPublishing={isPublishing}\r\n                        postHistory={manualPostHistory}\r\n                        isLoadingPosts={isLoadingPosts}\r\n                        onRefreshPosts={loadPostHistory}\r\n                        onMediaTypeChange={handleMediaTypeChange}\r\n                      />\r\n                    )}\r\n\r\n                    {/* Bulk Composer Tab */}\r\n                    {activeTab === 'bulk' && showBulkComposer && (\r\n                      <BulkComposer\r\n                        selectedPage={selectedPage}\r\n                        availablePages={availablePages}\r\n                        onPageChange={setSelectedPage}\r\n                        onClose={() => {\r\n                          setShowBulkComposer(false);\r\n                          setActiveTab('auto');\r\n                        }}\r\n                      />\r\n                    )}\r\n\r\n                    {/* Automate Tab */}\r\n                    {activeTab === 'automate' && showAutomate && (\r\n                      <AutomateTab\r\n                        autoReplySettings={autoReplySettings}\r\n                        autoReplyMessageRule={autoReplyMessageRule}\r\n                        autoReplyMessagesEnabled={autoReplyMessagesEnabled}\r\n                        autoReplyMessagesLoading={autoReplyMessagesLoading}\r\n                        autoReplyMessagesError={autoReplyMessagesError}\r\n                        onToggleAutoReplyMessages={handleAutoReplyMessagesToggle}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FacebookPage;","// Facebook utility functions extracted from FacebookPage.js\r\n\r\n// Convert file to base64\r\nexport const fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\n// Media icon component with Apple-inspired design\r\nexport const MediaIcon = ({ type }) => {\r\n  switch(type) {\r\n    case 'photo':\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n          <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/>\r\n          <polyline points=\"21,15 16,10 5,21\"/>\r\n        </svg>\r\n      );\r\n    case 'ai_image':\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\r\n          <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n          <path d=\"M12 1v6m0 6v6m11-7h-6m-6 0H1\"/>\r\n        </svg>\r\n      );\r\n    case 'video':\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <polygon points=\"23 7 16 12 23 17 23 7\"/>\r\n          <rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"/>\r\n        </svg>\r\n      );\r\n    default:\r\n      return (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\r\n        </svg>\r\n      );\r\n  }\r\n};\r\n\r\n// Facebook SDK utilities\r\nexport const cleanupFacebookSDK = () => {\r\n  try {\r\n    if (window.FB) {\r\n      try {\r\n        if (window.FB.getLoginStatus) {\r\n          window.FB.logout();\r\n        }\r\n      } catch (e) {\r\n        // Ignore errors during cleanup\r\n      }\r\n      delete window.FB;\r\n    }\r\n    \r\n    if (window.fbAsyncInit) {\r\n      delete window.fbAsyncInit;\r\n    }\r\n  } catch (e) {\r\n    // Ignore cleanup errors\r\n  }\r\n};\r\n\r\nexport const loadFacebookSDK = (FACEBOOK_APP_ID) => {\r\n  return new Promise((resolve, reject) => {\r\n    cleanupFacebookSDK();\r\n    \r\n    const versions = ['v21.0', 'v20.0', 'v19.0', 'v18.0'];\r\n    let currentVersionIndex = 0;\r\n    \r\n    const tryInitialization = () => {\r\n      const version = versions[currentVersionIndex];\r\n      \r\n      window.fbAsyncInit = function () {\r\n        try {\r\n          window.FB.init({\r\n            appId: FACEBOOK_APP_ID,\r\n            cookie: true,\r\n            xfbml: true,\r\n            version: version,\r\n            status: true\r\n          });\r\n          \r\n          console.log(`Facebook SDK initialized successfully with ${version}`);\r\n          \r\n          window.FB.getLoginStatus(function(response) {\r\n            console.log('Facebook SDK test successful:', response.status);\r\n            resolve();\r\n          }, true);\r\n          \r\n        } catch (error) {\r\n          console.error(`Facebook SDK initialization failed with ${version}:`, error);\r\n          \r\n          currentVersionIndex++;\r\n          if (currentVersionIndex < versions.length) {\r\n            console.log(`Trying Facebook SDK version ${versions[currentVersionIndex]}...`);\r\n            setTimeout(tryInitialization, 500);\r\n          } else {\r\n            reject(new Error('All Facebook SDK versions failed to initialize'));\r\n          }\r\n        }\r\n      };\r\n\r\n      if (!document.getElementById('facebook-jssdk')) {\r\n        const script = document.createElement('script');\r\n        script.id = 'facebook-jssdk';\r\n        script.src = 'https://connect.facebook.net/en_US/sdk.js';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.crossOrigin = 'anonymous';\r\n        script.onerror = () => {\r\n          console.error(`Failed to load Facebook SDK script for ${version}`);\r\n          \r\n          currentVersionIndex++;\r\n          if (currentVersionIndex < versions.length) {\r\n            console.log(`Trying Facebook SDK version ${versions[currentVersionIndex]}...`);\r\n            setTimeout(tryInitialization, 500);\r\n          } else {\r\n            reject(new Error('Failed to load Facebook SDK script'));\r\n          }\r\n        };\r\n        \r\n        document.body.appendChild(script);\r\n      }\r\n    };\r\n\r\n    tryInitialization();\r\n  });\r\n};\r\n\r\n// Post utilities\r\nexport const postTextOnly = async (selectedPage, message) => {\r\n  return new Promise((resolve, reject) => {\r\n    window.FB.api(`/${selectedPage.id}/feed`, 'POST', {\r\n      message: message,\r\n      access_token: selectedPage.access_token\r\n    }, (response) => {\r\n      if (response.error) {\r\n        reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n      } else {\r\n        resolve(response);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const postWithMedia = async (selectedPage, message, file, mediaType) => {\r\n  const fileData = await fileToBase64(file);\r\n  \r\n  if (mediaType === 'photo') {\r\n    return new Promise((resolve, reject) => {\r\n      window.FB.api(`/${selectedPage.id}/photos`, 'POST', {\r\n        caption: message,\r\n        source: fileData,\r\n        access_token: selectedPage.access_token\r\n      }, (response) => {\r\n        if (response.error) {\r\n          reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  } else if (mediaType === 'video') {\r\n    return new Promise((resolve, reject) => {\r\n      window.FB.api(`/${selectedPage.id}/videos`, 'POST', {\r\n        description: message,\r\n        source: fileData,\r\n        access_token: selectedPage.access_token\r\n      }, (response) => {\r\n        if (response.error) {\r\n          reject(new Error(`${response.error.message} (Code: ${response.error.code})`));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}; "],"names":["promptTemplates","id","name","prompt","_ref","selectedPage","onClose","availablePages","onPageChange","isAuthenticated","useAuth","addNotification","useNotifications","strategyData","setStrategyData","useState","promptTemplate","customStrategyTemplate","startDate","endDate","frequency","customCron","timeSlot","composerRows","setComposerRows","selectedRows","setSelectedRows","dragStartRow","setDragStartRow","currentMonth","setCurrentMonth","Date","isScheduling","setIsScheduling","scheduleProgress","setScheduleProgress","expandedCaption","setExpandedCaption","mediaPreviewModal","setMediaPreviewModal","scheduledPosts","setScheduledPosts","loadingScheduledPosts","setLoadingScheduledPosts","showScheduledPosts","setShowScheduledPosts","expandedSchedule","setExpandedSchedule","editingPost","setEditingPost","isCheckingPageSync","setIsCheckingPageSync","pageSyncStatus","setPageSyncStatus","schedulePage","setSchedulePage","scheduleSort","setScheduleSort","initialAutoExpandDone","useRef","groupedBatches","reduce","groups","post","batchKey","schedule_batch_id","scheduled_date","push","sortedBatchKeys","Object","keys","sort","a","b","_groupedBatches$a$","_groupedBatches$b$","aDate","bDate","localeCompare","totalPages","Math","ceil","length","pagedBatchKeys","slice","gridRef","generateInitialRows","useCallback","startDateParts","split","UTC","parseInt","endDateParts","rows","currentDate","dayCount","rowCount","now","shouldInclude","getUTCDay","getUTCDate","formattedDate","getUTCFullYear","String","getUTCMonth","padStart","caption","mediaFile","mediaPreview","scheduledDate","scheduledTime","status","isSelected","setUTCDate","useEffect","istTime","utcTime","hours","minutes","date","setUTCHours","istHours","getUTCHours","istMinutes","getUTCMinutes","addHour","utcToIstTime","prev","loadScheduledPosts","async","response","apiClient","getBulkComposerContent","internalId","data","error","console","alert","log","current","today","toISOString","recentDates","handleStrategyChange","field","value","map","row","handleCellEdit","rowId","updatedRow","trim","handleDragOver","e","preventDefault","getPostsForDate","dateString","getFullYear","getMonth","getDate","postsForDate","filter","getStatusIcon","_jsx","width","height","viewBox","fill","stroke","strokeWidth","children","d","_jsxs","x1","y1","x2","y2","cx","cy","r","points","getStatusClass","startEditingPost","original","savePostEdit","updateBulkComposerPost","cancelPostEdit","checkPageSync","socialAccounts","getSocialAccounts","matchingAccount","acc","platform","is_connected","find","platform_user_id","updatedPage","timer","setTimeout","clearTimeout","className","onChange","target","template","placeholder","type","min","disabled","onClick","title","x","y","rx","ry","toLocaleDateString","month","year","day","generateCalendarDays","daysInMonth","getDaysInMonth","firstDayOfMonth","getFirstDayOfMonth","getDay","days","i","index","postIndex","substring","newRow","random","MdAdd","size","handleSelectAll","MdSelectAll","handleBulkDelete","includes","MdDelete","selectedComposerRows","contexts","weekday","customStrategy","maxLength","generateFacebookBulkCaptions","selectedTemplate","t","captions","context","captionResponse","generateFacebookCaptionWithStrategy","success","content","message","total_generated","c","selectedIndex","findIndex","selectedRow","generatedCaption","imagePrompt","generateFacebookImage","image_url","updatedRows","mediaGenerated","ref","draggable","onDragStart","handleDragStart","onDragOver","onDrop","targetRowId","sourceIndex","targetIndex","movedRow","splice","handleDrop","checked","handleRowSelect","style","resize","handleExpandCaption","MdExpandMore","hasMediaPreview","hasMediaFile","src","alt","_row$mediaFile2","_row$mediaFile2$type","startsWith","controls","_row$mediaFile","_row$mediaFile$type","mediaUrl","mediaType","handleViewMedia","handleRemoveMedia","accept","handleMediaUpload","event","file","files","reader","FileReader","onload","result","readAsDataURL","htmlFor","handleGenerateMedia","round","Promise","resolve","window","confirm","readyPosts","_requestPayload$posts","pageId","postsWithMedia","all","_postData$caption","fileToBase64","fetch","ok","Error","blob","reject","onloadend","onerror","postData","scheduled_time","media_file","media_filename","scheduledDateTime","warn","scheduled_datetime_utc","has_media","requestPayload","social_account_id","posts","posts_count","first_post_sample","toString","bulkSchedulePosts","some","readyPost","successCount","Array","isArray","results","failedCount","forEach","strategyName","_error$message","_error$message2","stack","_Fragment","p","max","display","alignItems","gap","MdSort","idx","batchPosts","isExpanded","dates","dateRange","statuses","entries","_ref2","count","toLowerCase","toggleScheduleExpansion","dateKey","cursor","opacity","match","maxWidth","maxHeight","borderRadius","border","href","rel","postId","postCaption","cancelBulkComposerPost","cancelScheduledPost","error_message","handleSaveExpandedCaption","newCaption","formData","setFormData","onGenerate","onGenerateImage","onGenerateImageWithCaption","onPublish","isPublishing","postHistory","isLoadingPosts","onRefreshPosts","handleInputChange","handleMediaTypeChange","generatedImageUrl","generatedImageFilename","isGenerating","generatedContent","isGeneratingImage","media_urls","created_at","next_execution","onMediaTypeChange","handleMediaTypeSelect","URL","createObjectURL","toFixed","_autoReplyMessageRule","autoReplySettings","autoReplyMessageRule","autoReplyMessagesEnabled","autoReplyMessagesLoading","autoReplyMessagesError","onToggleAutoReplyMessages","actions","message_template","loadFacebookSDK","appId","FB","script","document","createElement","defer","crossOrigin","fbAsyncInit","init","cookie","xfbml","version","AppEvents","logPageView","head","appendChild","_selectedPage$followe","_selectedPage$followe2","navigate","useNavigate","logout","isConnecting","setIsConnecting","connectionStatus","setConnectionStatus","setSelectedPage","setAvailablePages","facebookConnected","setFacebookConnected","activeTab","setActiveTab","isLoggingOut","setIsLoggingOut","isCheckingStatus","setIsCheckingStatus","autoFormData","setAutoFormData","manualFormData","setManualFormData","setIsPublishing","autoPostHistory","setAutoPostHistory","manualPostHistory","setManualPostHistory","setIsLoadingPosts","showBulkComposer","setShowBulkComposer","showAutomate","setShowAutomate","setAutoReplyMessagesEnabled","setAutoReplyMessagesLoading","setAutoReplyMessagesError","showFilePicker","setShowFilePicker","filePickerType","setFilePickerType","filePickerFormType","setFilePickerFormType","isLoadingGoogleDrive","setIsLoadingGoogleDrive","googleDriveAvailable","setGoogleDriveAvailable","scheduleData","setScheduleData","time","customDate","isActive","scheduleId","setAutoReplyMessageRule","setAutoReplySettings","enabled","ruleId","selectedPostIds","FACEBOOK_APP_ID","process","REACT_APP_FACEBOOK_APP_ID","isMobile","innerWidth","loadAutoReplySettings","rules","getAutomationRules","facebookAccounts","autoReplyRule","rule","_autoReplyRule$action3","_autoReplyRule$action4","_autoReplyRule$action","_autoReplyRule$action2","is_active","response_template","selected_post_ids","checkExistingFacebookConnections","getFacebookStatus","connected","accountsError","pagesFromBackend","accounts","pages","page","platform_id","category","access_token","profilePicture","profile_picture","canPost","can_post","canComment","can_comment","followerCount","follower_count","pages_count","checkGoogleDriveAvailability","handleResize","addEventListener","removeEventListener","authenticated","getGoogleDriveStatus","loadPostHistory","getSocialPosts","topPosts","_","fetchPages","accessToken","mappedPages","userInfo","_permissionsResponse$","grantedPermissions","api","permission","missingPermissions","join","fields","pagesResponse","code","_page$picture","_page$picture$data","tasks","picture","url","fan_count","connectToBackend","_response$data","_response$data$data","connectFacebook","token_type","expiresAt","token_expires_at","expiryDate","updatedPages","_error$response","_error$response2","_error$response2$data","_error$response2$data2","detail","_error$response3","_error$response3$data","openFilePicker","formType","publishPost","isAutoMode","postOptions","postType","textContent","contentPrompt","useAIText","imageUrl","imageFilename","useAIImage","imageData","videoData","videoUrl","videoFilename","postResult","createFacebookPost","loadAutoReplyMessageRule","err","toLocaleString","safeScheduleData","deleteScheduledPost","scheduleError","logoutFacebook","AIGenerateTab","generateContent","currentData","filename","textResponse","imageResponse","ManualPostTab","BulkComposer","AutomateTab","updated","updateAutomationRule","location","protocol","hostname","getCurrentUser","login","authResponse","_backendResponse$data","backendResponse","pages_connected","facebookPages","account_type","backendMappedPages","_page$platform_data","_page$platform_data2","_page$platform_data3","display_name","platform_data","profile_picture_url","backendError","scope","enable_profile_selector","return_scopes","auth_type","cleanupFacebookSDK","getLoginStatus","versions","currentVersionIndex","tryInitialization","getElementById","body"],"sourceRoot":""}